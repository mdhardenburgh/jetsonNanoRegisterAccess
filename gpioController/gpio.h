/**
 * From Table 1 System Address Map on page 21 - 22 of the TX1 TRM.
 * GPIO-1, GPIO-2, GPIO-3, etc... coresponds to the GPIO bank with the lettered ports as
 * seen in Table 32 from the TX1 TRM.
 * ______________________________________________________________________________________
 * Description | Address Start | Address End | Offset Start | Offset End | Default Length
 * GPIO-1      | 6000:d000     | 6000:d0ff   | 0000:d000    | 0000:d0ff  | 256 B
 * GPIO-2      | 6000:d100     | 6000:d1ff   | 0000:d100    | 0000:d1ff  | 256 B
 * GPIO-3      | 6000:d200     | 6000:d2ff   | 0000:d200    | 0000:d2ff  | 256 B
 * GPIO-4      | 6000:d300     | 6000:d3ff   | 0000:d300    | 0000:d3ff  | 256 B
 * GPIO-5      | 6000:d400     | 6000:d4ff   | 0000:d400    | 0000:d4ff  | 256 B
 * GPIO-6      | 6000:d500     | 6000:d5ff   | 0000:d500    | 0000:d5ff  | 256 B
 * GPIO-7      | 6000:d600     | 6000:d6ff   | 0000:d600    | 0000:d6ff  | 256 B
 * GPIO-8      | 6000:d700     | 6000:d7ff   | 0000:d700    | 0000:d7ff  | 256 B
 *
 * From Table 3.3 on page 17 in the Jetson Nano Dev Kit Carrier Board pdf
 * _______________________________________________________________________________________________________________________________________
 * Header Pin # | Module Pin Name | Module Pin Number | Tegra Pin Name | Default Usage    | Alternate Function         | Tegra GPIO Port #
 * 3            | I2C1_SDA        | 191               | GEN2_I2C_SDA   | I2C #1 Data      | GPIO                       | PJ.03
 * 5            | I2C1_SCL        | 189               | GEN2_I2C_SCL   | I2C #1 Clock     | GPIO                       | PJ.02
 * 7            | GPIO09          | 211               | AUD_MCLK       | GPIO             | Audio Master Clock         | PBB.00
 * 8            | UART1_TXD       | 203               | UART2_TXD      | UART #1 Transmit | GPIO                       | PG.00
 * 10           | UART1_RXD       | 205               | UART2_RXD      | UART #1 Receive  | GPIO                       | PG.01
 * 11           | UART1_RTS*      | 207               | UART2_RTS      | GPIO             | UART #2 Request to Send    | PG.02
 * 12           | I2S0_SCLK       | 199               | DAP4_SCLK      | GPIO             | Audio I2S #0 Clock         | PJ.07
 * 13           | SPI1_SCK        | 106               | SPI2_SCK       | GPIO             | SPI #1 Shift Clock         | PB.06
 * 15           | GPIO12          | 218               | LCD_TE         | GPIO             | –                          | PY.02
 * 16           | SPI1_CSI1*      | 112               | SPI2_CS1       | GPIO             | SPI #1 Chip Select #1      | PDD.00
 * 18           | SPI1_CSI0*      | 110               | SPI2_CS0       | GPIO             | SPI #0 Chip Select #0      | PB.07
 * 19           | SPI0_MOSI       | 89                | SPI1_MOSI      | GPIO             | SPI #0 Master Out/Slave In | PC.00 
 * 21           | SPI0_MISO       | 93                | SPI1_MISO      | GPIO             | SPI #0 Master In/Slave Out | PC.01
 * 22           | SPI1_MISO       | 108               | SPI2_MISO      | GPIO             | SPI #1 Master In/Slave Out | PB.05
 * 23           | SPI0_SCK        | 91                | SPI1_SCK       | GPIO             | SPI #0 Shift Clock         | PC.02
 * 24           | SPI0_CS0*       | 95                | SPI1_CS0       | GPIO             | SPI #0 Chip Select #0      | PC.03
 * 26           | SPI0_CS1*       | 97                | SPI1_CS1       | GPIO             | SPI #0 Chip Select #1      | PC.01
 * 27           | I2C0_SDA        | 187               | GEN1_I2C_SDA   | I2C #0 Data      | GPIO                       | PB.05
 * 28           | I2C0_SCL        | 185               | GEN1_I2C_SCL   | I2C #0 Clock     | GPIO                       | PC.02
 * 29           | GPIO01          | 118               | CAM_AF_EN      | GPIO             | Camera MCLK #2             | PC.03
 * 31           | GPIO11          | 216               | GPIO_PZ0       | GPIO             | Camera MCLK #3             | PZ.00
 * 32           | GPIO07          | 206               | LCD_BL_PWM     | GPIO             | PWM                        | PV.00
 * 33           | GPIO13          | 228               | GPIO_PE6       | GPIO             | PWM                        | PE.06
 * 35           | I2S0_FS         | 197               | DAP4_FS        | GPIO             | Audio I2S #0 Field Select  | PJ.04
 * 36           | UART1_CTS*      | 209               | UART2_CTS      | GPIO             | UART #1 Clear to Send      | PG.03
 * 37           | SPI1_MOSI       | 104               | SPI2_MOSI      | GPIO             | SPI #1 Master Out/Slave In | PB.04
 * 38           | I2S0_DIN        | 195               | DAP4_DIN       | GPIO             | Audio I2S #0 Data in       | PJ.05
 * 40           | I2S0_DOUT       | 193               | DAP4_DOUT      | GPIO             | Audio I2S #0 Data Out      | PJ.06
 *
 * From Table 32: GPIO Register Address Map on page 247 of the TX1 TRM. Each GPIO control bank has 32 GPIOs.
 * 
 * Each port (A, B, C, D, etc...) has 8 GPIO pins associated with it. So port A has the pins PA.00, PA.01, PA.02, PA.03, PA.04,
 * PA.05, PA.06, and PA.07. This is the same for every port. As you can see in the above table the pin PE.06 is at default a 
 * GPIO (with alternate function of PWM). This GPIO coresponds the the physical Tegra pin pad GPIO_PE6, the pysical jetson 
 * module pin 228, and that module pin has the name GPIO13. That module pin is connected to the GPIO header on the carrier
 * board, and it is pin 33.  
 * _____________________________________________________________________________________________________
 * Register Name                | Offset (Lower: Read-Modify-Write) | Offset (Upper: Per-Pin Mask Write)
 * GPIO Controller 1 – Port     | A   | B   | C   | D               | A   | B   | C   | D 
 * GPIO_CNF_[A/B/C/D]           | 000 | 004 | 008 | 00C             | 080 | 084 | 088 | 08C
 * GPIO_OE_[A/B/C/D]            | 010 | 014 | 018 | 01C             | 090 | 094 | 098 | 09C
 * GPIO_OUT_[A/B/C/D]           | 020 | 024 | 028 | 02C             | 0A0 | 0A4 | 0A8 | 0AC
 * GPIO_IN_[A/B/C/D]            | 030 | 034 | 038 | 03C             | --- | --- | --- | ---
 * GPIO_INT_STA_[A/B/C/D]       | 040 | 044 | 048 | 04C             | 0C0 | 0C4 | 0C8 | 0CC
 * GPIO_INT_ENB_[A/B/C/D]       | 050 | 054 | 058 | 05C             | 0D0 | 0D4 | 0D8 | 0DC
 * GPIO_INT_LVL_[A/B/C/D]       | 060 | 064 | 068 | 06C             | 0E0 | 0E4 | 0E8 | 0EC
 * GPIO_INT_CLR_[A/B/C/D]       | 070 | 074 | 078 | 07C             | --- | --- | --- | ---
 * GPIO_DB_CTRL_[A/B/C/D]_0     | --- | --- | --- | ---             | 0B0 | 0B4 | 0B8 | 0BC
 * GPIO_DB_CNT _[A/B/C/D]_0     | --- | --- | --- | ---             | 0F0 | 0F4 | 0F8 | 0FC
 * GPIO Controller 2 – Port     | E   | F   | G   | H               | E   | F   | G   | H 
 * GPIO_CNF_[E/F/G/H]           | 100 | 104 | 108 | 10C             | 180 | 184 | 188 | 18C 
 * GPIO_OE_[E/F/G/H]            | 110 | 114 | 118 | 11C             | 190 | 194 | 198 | 19C
 * GPIO_OUT_[E/F/G/H]           | 120 | 124 | 128 | 12C             | 1A0 | 1A4 | 1A8 | 1AC
 * GPIO_IN_[E/F/G/H]            | 130 | 134 | 138 | 13C             | --- | --- | —-- | —-- 
 * GPIO_INT_STA_[E/F/G/H]       | 140 | 144 | 148 | 14C             | 1C0 | 1C4 | 1C8 | 1CC
 * GPIO_INT_ENB_[E/F/G/H]       | 150 | 154 | 158 | 15C             | 1D0 | 1D4 | 1D8 | 1DC
 * GPIO_INT_LVL_[E/F/G/H]       | 160 | 164 | 168 | 16C             | 1E0 | 1E4 | 1E8 | 1EC
 * GPIO_INT_CLR_[E/F/G/H]       | 170 | 174 | 178 | 17C             | -—- | -—- | -—- | -—-
 * GPIO_DB_CTRL_[E/F/G/H]_0     | -—- | -—- | -—- | -—-             | 1B0 | 1B4 | 1B8 | 1BC
 * GPIO_DB_CNT _[E/F/G/H]_0     | -—- | -—- | -—- | -—-             | 1F0 | 1F4 | 1F8 | 1FC
 * GPIO Controller 3 – Port     | I   | J   | K   | L               | I   | J   | K   | L 
 * GPIO_CNF_[I/J/K/L]           | 200 | 204 | 208 | 20C             | 280 | 284 | 288 | 28C
 * GPIO_OE_[I/J/K/L]            | 210 | 214 | 218 | 21C             | 290 | 294 | 298 | 29C
 * GPIO_OUT_[I/J/K/L]           | 220 | 224 | 228 | 22C             | 2A0 | 2A4 | 2A8 | 2AC
 * GPIO_IN_[I/J/K/L]            | 230 | 234 | 238 | 23C             | ——- | ——- | ——- | ——-
 * GPIO_INT_STA_[I/J/K/L]       | 240 | 244 | 248 | 24C             | 2C0 | 2C4 | 2C8 | 2CC
 * GPIO_INT_ENB_[I/J/K/L]       | 250 | 254 | 258 | 25C             | 2D0 | 2D4 | 2D8 | 2DC
 * GPIO_INT_LVL_[I/J/K/L]       | 260 | 264 | 268 | 26C             | 2E0 | 2E4 | 2E8 | 2EC
 * GPIO_INT_CLR_[I/J/K/L]       | 270 | 274 | 278 | 27C             | ——- | ——- | ——- | -——
 * GPIO_DB_CTRL_[I/J/K/L]_0     | ——- | -—— | -—— | -——             | 2B0 | 2B4 | 2B8 | 2BC
 * GPIO_DB_CNT _[I/J/K/L]_0     | -—— | —-— | -—— | -——             | 2F0 | 2F4 | 2F8 | 2FC
 * GPIO Controller 4 – Port     | M   | N   | O   | P               | M   | N   | O   | P
 * GPIO_CNF_[M/N/O/P]           | 300 | 304 | 308 | 30C             | 380 | 384 | 388 | 38C
 * GPIO_OE_[M/N/O/P]            | 310 | 314 | 318 | 31C             | 390 | 394 | 398 | 39C
 * GPIO_OUT_[M/N/O/P]           | 320 | 324 | 328 | 32C             | 3A0 | 3A4 | 3A8 | 3AC
 * GPIO_IN_[M/N/O/P]            | 330 | 334 | 338 | 33C             | —-- | -—- | -—- | -—-
 * GPIO_INT_STA_[M/N/O/P]       | 340 | 344 | 348 | 34C             | 3C0 | 3C4 | 3C8 | 3CC
 * GPIO_INT_ENB_[M/N/O/P]       | 350 | 354 | 358 | 35C             | 3D0 | 3D4 | 3D8 | 3DC
 * GPIO_INT_LVL_[M/N/O/P]       | 360 | 364 | 368 | 36C             | 3E0 | 3E4 | 3E8 | 3EC
 * GPIO_INT_CLR_[M/N/O/P]       | 370 | 374 | 378 | 37C             | -—- | -—- | -—- | -—-
 * GPIO_DB_CTRL_[M/N/O/P]_0     | -—- | -—- | -—- | -—-             | 3B0 | 3B4 | 3B8 | 3BC
 * GPIO_DB_CNT _[M/N/O/P]_0     | -—- | -—— | -—- | -—-             | 3F0 | 3F4 | 3F8 | 3FC
 * GPIO Controller 5 – Port     | Q   | R   | S   | T               | Q   | R   | S   | T
 * GPIO_CNF_[Q/R/S/T]           | 400 | 404 | 408 | 40C             | 480 | 484 | 488 | 48C
 * GPIO_OE_[Q/R/S/T]            | 410 | 414 | 418 | 41C             | 490 | 494 | 498 | 49C
 * GPIO_OUT_[Q/R/S/T]           | 420 | 424 | 428 | 42C             | 4A0 | 4A4 | 4A8 | 4AC
 * GPIO_IN_[Q/R/S/T]            | 430 | 434 | 438 | 43C             | —-- | -—- | -—- | -—-
 * GPIO_INT_STA_[Q/R/S/T]       | 440 | 444 | 448 | 44C             | 4C0 | 4C4 | 4C8 | 4CC
 * GPIO_INT_ENB_[Q/R/S/T]       | 450 | 454 | 458 | 45C             | 4D0 | 4D4 | 4D8 | 4DC
 * GPIO_INT_LVL_[Q/R/S/T]       | 460 | 464 | 468 | 46C             | 4E0 | 4E4 | 4E8 | 4EC
 * GPIO_INT_CLR_[Q/R/S/T]       | 470 | 474 | 478 | 47C             | -—- | -—- | -—- | -—-
 * GPIO_DB_CTRL_[Q/R/S/T]_0     | -—- | -—- | -—- | -—-             | 4B0 | 4B4 | 4B8 | 4BC
 * GPIO_DB_CNT _[Q/R/S/T]_0     | —-- | -—- | -—- | -—-             | 4F0 | 4F4 | 4F8 | 4FC
 * GPIO Controller 6 – Port     | U   | V   | W   | X               | U   | V   | W   | X
 * GPIO_CNF_[U/V/W/X]           | 500 | 504 | 508 | 50C             | 580 | 584 | 588 | 58C
 * GPIO_OE_[U/V/W/X]            | 510 | 514 | 518 | 51C             | 590 | 594 | 598 | 59C
 * GPIO_OUT_[U/V/W/X]           | 520 | 524 | 528 | 52C             | 5A0 | 5A4 | 5A8 | 5AC
 * GPIO_IN_[U/V/W/X]            | 530 | 534 | 538 | 53C             | -—- | -—- | -—- | -—-
 * GPIO_INT_STA_[U/V/W/X]       | 540 | 544 | 548 | 54C             | 5C0 | 5C4 | 5C8 | 5CC
 * GPIO_INT_ENB_[U/V/W/X]       | 550 | 554 | 558 | 55C             | 5D0 | 5D4 | 5D8 | 5DC
 * GPIO_INT_LVL_[U/V/W/X]       | 560 | 564 | 568 | 56C             | 5E0 | 5E4 | 5E8 | 5EC
 * GPIO_INT_CLR_[U/V/W/X]       | 570 | 574 | 578 | 57C             | -—- | -—- | -—- | -—-
 * GPIO_DB_CTRL_[U/V/W/X]_0     | —-- | -—- | -—- | -—-             | 5B0 | 5B4 | 5B8 | 5BC
 * GPIO_DB_CNT _[U/V/W/X]_0     | —-- | -—- | -—- | -—-             | 5F0 | 5F4 | 5F8 | 5FC
 * GPIO Controller 7 – Port     | Y   | Z   | AA  | BB              | Y   | Z   | AA  | BB
 * GPIO_CNF_[Y/Z/AA/BB]         | 600 | 604 | 608 | 60C             | 680 | 684 | 688 | 68C
 * GPIO_OE_[Y/Z/AA/BB]          | 610 | 614 | 618 | 61C             | 690 | 694 | 698 | 69C
 * GPIO_OUT_[Y/Z/AA/BB]         | 620 | 624 | 628 | 62C             | 6A0 | 6A4 | 6A8 | 6AC
 * GPIO_IN_[Y/Z/AA/BB]          | 630 | 634 | 638 | 63C             | -—- | -—- | -—- | -—- 
 * GPIO_INT_STA_[Y/Z/AA/BB]     | 640 | 644 | 648 | 64C             | 6C0 | 6C4 | 6C8 | 6CC
 * GPIO_INT_ENB_[Y/Z/AA/BB]     | 650 | 654 | 658 | 65C             | 6D0 | 6D4 | 6D8 | 6DC
 * GPIO_INT_LVL_[Y/Z/AA/BB]     | 660 | 664 | 668 | 66C             | 6E0 | 6E4 | 6E8 | 6EC
 * GPIO_INT_CLR_[Y/Z/AA/BB]     | 670 | 674 | 678 | 67C             | -—- | -—- | -—- | -—-
 * GPIO_DB_CTRL_[Y/Z/AA/BB]_0   | —-- | -—- | -—- | -—-             | 6B0 | 6B4 | 6B8 | 6BC
 * GPIO_DB_CNT _[Y/Z/AA/BB]_0   | -—- | -—- | -—- | -—-             | 6F0 | 6F4 | 6F8 | 6FC
 * GPIO Controller 8 – Port     | CC  | DD  | EE  | ---             | CC  | DD  | EE  | ---
 * GPIO_CNF_[CC/DD/EE/-]        | 700 | 704 | 708 | -—-             | 780 | 784 | 788 | -—-
 * GPIO_OE_[CC/DD/EE/-]         | 710 | 714 | 718 | —--             | 790 | 794 | 798 | —--
 * GPIO_OUT_[CC/DD/EE/-]        | 720 | 724 | 728 | —--             | 7A0 | 7A4 | 7A8 | —--
 * GPIO_IN_[CC/DD/EE/-]         | 730 | 734 | 738 | —--             | —-- | -—- | -—- | -—-
 * GPIO_INT_STA_[CC/DD/EE/-]    | 740 | 744 | 748 | ---             | 7C0 | 7C4 | 7C8 | ---
 * GPIO_INT_ENB_[CC/DD/EE/-]    | 750 | 754 | 758 | ---             | 7D0 | 7D4 | 7D8 | ---
 * GPIO_INT_LVL_[CC/DD/EE/-]    | 760 | 764 | 768 | ---             | 7E0 | 7E4 | 7E8 | ---
 * GPIO_INT_CLR_[CC/DD/EE/-]    | 770 | 774 | 778 | -—-             | -—- | -—- | -—- | -—- 
 * GPIO_DB_CTRL_[CC/DD/EE/-]_0  | -—- | -—- | -—- | -—-             | 7B0 | 7B4 | 7B8 | -—-
 * GPIO_DB_CNT _[CC/DD/EE/-]_0  | -—- | -—- | -—- | -—-             | 7F0 | 7F4 | 7F8 | -—-
 * 
 */ 

static const gpioController1BaseAddress = 0x6000d000;
static const gpioController2BaseAddress = 0x6000d100;
static const gpioController3BaseAddress = 0x6000d200;
static const gpioController4BaseAddress = 0x6000d300;
static const gpioController5BaseAddress = 0x6000d400;
static const gpioController6BaseAddress = 0x6000d500;
static const gpioController7BaseAddress = 0x6000d600;
static const gpioController8BaseAddress = 0x6000d700;



// GPIO Controller 1 – Start Addr 6000:d000

/**
 * 9.13.1 GPIO_CNF_0 
 *
 * Designates whether each pin operates as a GPIO or as an SFIO. By default all 
 * pins come up in SFIO mode. These can be programmed to GPIO mode at any stage.
 *
 * Lock bits are used to control the access to the CNF and OE registers. When 
 * set, no one can write to the CNF and OE bits. They can be programmed ONLY 
 * during Boot and get reset by chip reset only.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_CNF_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x000;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x004;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x008;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_D_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x00C;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

/**
 * 9.13.2 GPIO_OE_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid.
 * 
 * The set of registers below are used to either drive the signal out or as an 
 * Input. This needs to be programmed depending upon whether the pin needs to 
 * be in either Input or Output.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OE_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x010;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x014;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x018;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_D_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x01C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

/**
 * 9.13.3 GPIO_OUT_0
 *
 * GPIO_CNF.x=1 (in GPIO mode) AND GPIO_OE.x=1 (GPIO output enabled) must be 
 * true for this to be valid. This register will take affect only in GPIO 
 * mode. This register is used to drive the value out on a given pin.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OUT_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x020;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x024;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x028;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_D_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x02C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * 9.13.4 GPIO_IN_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid. This 
 * is a read-only register used to read the value from the pin. This is an 
 * array of 4 identical register entries; the register fields below apply to each entry.
 */

struct GPIO_IN_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x030;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x034;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x038;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x03C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * All GPIO inputs can be independently programmed to generate an interrupt 
 * request.
 * 
 * In addition, the individual trigger level for interrupt on each input pin 
 * can be programmed as either active-on-high or active-on-low. For example, to 
 * program an active-on-high interrupt on bit 3 of GPIO-PORT_C, write '1' into 
 * bit 3 of GPIO_INT.LVL.C register (this sets the interrupt to be 
 * active-on-high), and then write '1' into bit 3 of GPIO_INT.ENB.C (this 
 * enables interrupt on the named bit).
 *
 * The interrupt flag status can be read in the appropriate bit of the 
 * GPIO_INT.STA.C register. Once the programmed interrupt occurs, status should 
 * be cleared by writing into the appropriate bit of the GPIO_INT.CLR.C 
 * register. Note that the interrupt thus generated is routed to the processor 
 * only if the corresponding bit for GPIO interrupts in the Secondary interrupt
 *  controller is enabled.
 */

/**
 * 9.13.5 GPIO_INT_STA_0
 *
 * GPIO mode (GPIO_CNF.x=1) and GPIO_INT.ENB.x=1 must be true for this condition 
 * to be valid. Every GPIO pin generates an Interrupt when switching from 
 * Low-High to High-Low. Interrupt status for each port is saved in an 
 * Interrupt status register.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_STATUS_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x040;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x044;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x048;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_D_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x04C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};


/**
 * 9.13.6 GPIO_INT_ENB_0
 *
 * Every bit of the GPIO pin has an enable which, when enabled, routes the 
 * Interrupt to the Interrupt controller. This is an array of 4 identical 
 * register entries; the register fields below apply to each entry.
 */

struct GPIO_INT_ENABLE_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x050;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x054;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x058;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_D_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x05C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

/**
 * 9.13.7 GPIO_INT_LVL_0
 *
 * The GPIO can detect an interrupt for any edge- or level-sensitive signal.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry
 */

struct GPIO_INT_LEVEL_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x060;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x064;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x068;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_D_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x06C;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};


/**
 * 9.13.8 GPIO_INT_CLR_0
 * 
 * This write-only register clears the Interrupts that are set. This is valid 
 * only in GPIO mode when GPIO_INT.ENB is set.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_CLEAR_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x070;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x074;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x078;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_D_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x07C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

/**
 * 9.13.9 GPIO_MSK_CNF_0
 *
 * Each register is provided with an individual 16-bit version for enabling 
 * Masked Writes to avoid a Read-Modify-Write operation by the firmware. The 
 * exception is for the interrupt clear register, whose functionality is 
 * combined in the interrupt status register. Individual pins only can be 
 * programmed by suitably enabling the write masks in the upper byte of these 
 * 16-bit registers.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_CNF_A
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x080;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_B
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x084;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_C
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x088;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_D
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x08C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.10 GPIO_MSK_OE_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OE_A
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x090;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_B
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x094;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_C
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x098;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_D
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x09C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.11 GPIO_MSK_OUT_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OUT_A
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0A0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_B
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0A4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_C
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0A8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_D
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0AC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.12 GPIO_DB_CTRL_P0_0
 */

struct GPIO_DB_CTRL_PA
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0B0;

    const uint32_t MSK_PA_DBC_EN_7_bit = 15;
    const uint32_t MSK_PA_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_7_DISABLE = (0 << MSK_PA_DBC_EN_7_bit);
    const uint32_t MSK_PA_DBC_EN_7_ENABLE = (1 << MSK_PA_DBC_EN_7_bit); 
         
    const uint32_t MSK_PA_DBC_EN_6_bit = 14;
    const uint32_t MSK_PA_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_6_DISABLE = (0 << MSK_PA_DBC_EN_6_bit);
    const uint32_t MSK_PA_DBC_EN_6_ENABLE = (1 << MSK_PA_DBC_EN_6_bit); 
          
    const uint32_t MSK_PA_DBC_EN_5_bit = 13;
    const uint32_t MSK_PA_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_5_DISABLE = (0 << MSK_PA_DBC_EN_5_bit);
    const uint32_t MSK_PA_DBC_EN_5_ENABLE = (1 << MSK_PA_DBC_EN_5_bit); 
           
    const uint32_t MSK_PA_DBC_EN_4_bit = 12;
    const uint32_t MSK_PA_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_4_DISABLE = (0 << MSK_PA_DBC_EN_4_bit);
    const uint32_t MSK_PA_DBC_EN_4_ENABLE = (1 << MSK_PA_DBC_EN_4_bit); 
            
    const uint32_t MSK_PA_DBC_EN_3_bit = 11;
    const uint32_t MSK_PA_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_3_DISABLE = (0 << MSK_PA_DBC_EN_3_bit);
    const uint32_t MSK_PA_DBC_EN_3_ENABLE = (1 << MSK_PA_DBC_EN_3_bit); 
             
    const uint32_t MSK_PA_DBC_EN_2_bit = 10;
    const uint32_t MSK_PA_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_2_DISABLE = (0 << MSK_PA_DBC_EN_2_bit);
    const uint32_t MSK_PA_DBC_EN_2_ENABLE = (1 << MSK_PA_DBC_EN_2_bit); 
              
    const uint32_t MSK_PA_DBC_EN_1_bit = 9;
    const uint32_t MSK_PA_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_1_DISABLE = (0 << MSK_PA_DBC_EN_1_bit);
    const uint32_t MSK_PA_DBC_EN_1_ENABLE = (1 << MSK_PA_DBC_EN_1_bit); 
               
    const uint32_t MSK_PA_DBC_EN_0_bit = 8;
    const uint32_t MSK_PA_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_0_DISABLE = (0 << MSK_PA_DBC_EN_0_bit);
    const uint32_t MSK_PA_DBC_EN_0_ENABLE = (1 << MSK_PA_DBC_EN_0_bit); 
 
    const uint32_t PA_DBC_EN_7_bit = 7;
    const uint32_t PA_DBC_EN_7_bitWidth = 1;
    const uint32_t PA_DBC_EN_7_LOW = (0 << PA_DBC_EN_7_bit);
    const uint32_t PA_DBC_EN_7_HIGH = (1 << PA_DBC_EN_7_bit); 
 
    const uint32_t PA_DBC_EN_6_bit = 6;
    const uint32_t PA_DBC_EN_6_bitWidth = 1;
    const uint32_t PA_DBC_EN_6_LOW = (0 << PA_DBC_EN_6_bit);
    const uint32_t PA_DBC_EN_6_HIGH = (1 << PA_DBC_EN_6_bit); 
 
    const uint32_t PA_DBC_EN_5_bit = 5;
    const uint32_t PA_DBC_EN_5_bitWidth = 1;
    const uint32_t PA_DBC_EN_5_LOW = (0 << PA_DBC_EN_5_bit);
    const uint32_t PA_DBC_EN_5_HIGH = (1 << PA_DBC_EN_5_bit); 
 
    const uint32_t PA_DBC_EN_4_bit = 4;
    const uint32_t PA_DBC_EN_4_bitWidth = 1;
    const uint32_t PA_DBC_EN_4_LOW = (0 << PA_DBC_EN_4_bit);
    const uint32_t PA_DBC_EN_4_HIGH = (1 << PA_DBC_EN_4_bit); 
 
    const uint32_t PA_DBC_EN_3_bit = 3;
    const uint32_t PA_DBC_EN_3_bitWidth = 1;
    const uint32_t PA_DBC_EN_3_LOW = (0 << PA_DBC_EN_3_bit);
    const uint32_t PA_DBC_EN_3_HIGH = (1 << PA_DBC_EN_3_bit); 
 
    const uint32_t PA_DBC_EN_2_bit = 2;
    const uint32_t PA_DBC_EN_2_bitWidth = 1;
    const uint32_t PA_DBC_EN_2_LOW = (0 << PA_DBC_EN_2_bit);
    const uint32_t PA_DBC_EN_2_HIGH = (1 << PA_DBC_EN_2_bit); 
 
    const uint32_t PA_DBC_EN_1_bit = 1;
    const uint32_t PA_DBC_EN_1_bitWidth = 1;
    const uint32_t PA_DBC_EN_1_LOW = (0 << PA_DBC_EN_1_bit);
    const uint32_t PA_DBC_EN_1_HIGH = (1 << PA_DBC_EN_1_bit); 
 
    const uint32_t PA_DBC_EN_0_bit = 0;
    const uint32_t PA_DBC_EN_0_bitWidth = 1;
    const uint32_t PA_DBC_EN_0_LOW = (0 << PA_DBC_EN_0_bit);
    const uint32_t PA_DBC_EN_0_HIGH = (1 << PA_DBC_EN_0_bit); 
 
};

// 9.13.13 GPIO_DB_CTRL_P1_0
struct GPIO_DB_CTRL_PB
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0B4;

    const uint32_t MSK_PB_DBC_EN_7_bit = 15;
    const uint32_t MSK_PB_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_7_DISABLE = (0 << MSK_PB_DBC_EN_7_bit);
    const uint32_t MSK_PB_DBC_EN_7_ENABLE = (1 << MSK_PB_DBC_EN_7_bit); 
         
    const uint32_t MSK_PB_DBC_EN_6_bit = 14;
    const uint32_t MSK_PB_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_6_DISABLE = (0 << MSK_PB_DBC_EN_6_bit);
    const uint32_t MSK_PB_DBC_EN_6_ENABLE = (1 << MSK_PB_DBC_EN_6_bit); 
          
    const uint32_t MSK_PB_DBC_EN_5_bit = 13;
    const uint32_t MSK_PB_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_5_DISABLE = (0 << MSK_PB_DBC_EN_5_bit);
    const uint32_t MSK_PB_DBC_EN_5_ENABLE = (1 << MSK_PB_DBC_EN_5_bit); 
           
    const uint32_t MSK_PB_DBC_EN_4_bit = 12;
    const uint32_t MSK_PB_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_4_DISABLE = (0 << MSK_PB_DBC_EN_4_bit);
    const uint32_t MSK_PB_DBC_EN_4_ENABLE = (1 << MSK_PB_DBC_EN_4_bit); 
            
    const uint32_t MSK_PB_DBC_EN_3_bit = 11;
    const uint32_t MSK_PB_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_3_DISABLE = (0 << MSK_PB_DBC_EN_3_bit);
    const uint32_t MSK_PB_DBC_EN_3_ENABLE = (1 << MSK_PB_DBC_EN_3_bit); 
             
    const uint32_t MSK_PB_DBC_EN_2_bit = 10;
    const uint32_t MSK_PB_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_2_DISABLE = (0 << MSK_PB_DBC_EN_2_bit);
    const uint32_t MSK_PB_DBC_EN_2_ENABLE = (1 << MSK_PB_DBC_EN_2_bit); 
              
    const uint32_t MSK_PB_DBC_EN_1_bit = 9;
    const uint32_t MSK_PB_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_1_DISABLE = (0 << MSK_PB_DBC_EN_1_bit);
    const uint32_t MSK_PB_DBC_EN_1_ENABLE = (1 << MSK_PB_DBC_EN_1_bit); 
               
    const uint32_t MSK_PB_DBC_EN_0_bit = 8;
    const uint32_t MSK_PB_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_0_DISABLE = (0 << MSK_PB_DBC_EN_0_bit);
    const uint32_t MSK_PB_DBC_EN_0_ENABLE = (1 << MSK_PB_DBC_EN_0_bit); 
 
    const uint32_t PB_DBC_EN_7_bit = 7;
    const uint32_t PB_DBC_EN_7_bitWidth = 1;
    const uint32_t PB_DBC_EN_7_LOW = (0 << PB_DBC_EN_7_bit);
    const uint32_t PB_DBC_EN_7_HIGH = (1 << PB_DBC_EN_7_bit); 
 
    const uint32_t PB_DBC_EN_6_bit = 6;
    const uint32_t PB_DBC_EN_6_bitWidth = 1;
    const uint32_t PB_DBC_EN_6_LOW = (0 << PB_DBC_EN_6_bit);
    const uint32_t PB_DBC_EN_6_HIGH = (1 << PB_DBC_EN_6_bit); 
 
    const uint32_t PB_DBC_EN_5_bit = 5;
    const uint32_t PB_DBC_EN_5_bitWidth = 1;
    const uint32_t PB_DBC_EN_5_LOW = (0 << PB_DBC_EN_5_bit);
    const uint32_t PB_DBC_EN_5_HIGH = (1 << PB_DBC_EN_5_bit); 
 
    const uint32_t PB_DBC_EN_4_bit = 4;
    const uint32_t PB_DBC_EN_4_bitWidth = 1;
    const uint32_t PB_DBC_EN_4_LOW = (0 << PB_DBC_EN_4_bit);
    const uint32_t PB_DBC_EN_4_HIGH = (1 << PB_DBC_EN_4_bit); 
 
    const uint32_t PB_DBC_EN_3_bit = 3;
    const uint32_t PB_DBC_EN_3_bitWidth = 1;
    const uint32_t PB_DBC_EN_3_LOW = (0 << PB_DBC_EN_3_bit);
    const uint32_t PB_DBC_EN_3_HIGH = (1 << PB_DBC_EN_3_bit); 
 
    const uint32_t PB_DBC_EN_2_bit = 2;
    const uint32_t PB_DBC_EN_2_bitWidth = 1;
    const uint32_t PB_DBC_EN_2_LOW = (0 << PB_DBC_EN_2_bit);
    const uint32_t PB_DBC_EN_2_HIGH = (1 << PB_DBC_EN_2_bit); 
 
    const uint32_t PB_DBC_EN_1_bit = 1;
    const uint32_t PB_DBC_EN_1_bitWidth = 1;
    const uint32_t PB_DBC_EN_1_LOW = (0 << PB_DBC_EN_1_bit);
    const uint32_t PB_DBC_EN_1_HIGH = (1 << PB_DBC_EN_1_bit); 
 
    const uint32_t PB_DBC_EN_0_bit = 0;
    const uint32_t PB_DBC_EN_0_bitWidth = 1;
    const uint32_t PB_DBC_EN_0_LOW = (0 << PB_DBC_EN_0_bit);
    const uint32_t PB_DBC_EN_0_HIGH = (1 << PB_DBC_EN_0_bit); 
 
};

// 9.13.14 GPIO_DB_CTRL_P2_0
struct GPIO_DB_CTRL_PC
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0B8;

    const uint32_t MSK_PC_DBC_EN_7_bit = 15;
    const uint32_t MSK_PC_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_7_DISABLE = (0 << MSK_PC_DBC_EN_7_bit);
    const uint32_t MSK_PC_DBC_EN_7_ENABLE = (1 << MSK_PC_DBC_EN_7_bit); 
         
    const uint32_t MSK_PC_DBC_EN_6_bit = 14;
    const uint32_t MSK_PC_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_6_DISABLE = (0 << MSK_PC_DBC_EN_6_bit);
    const uint32_t MSK_PC_DBC_EN_6_ENABLE = (1 << MSK_PC_DBC_EN_6_bit); 
          
    const uint32_t MSK_PC_DBC_EN_5_bit = 13;
    const uint32_t MSK_PC_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_5_DISABLE = (0 << MSK_PC_DBC_EN_5_bit);
    const uint32_t MSK_PC_DBC_EN_5_ENABLE = (1 << MSK_PC_DBC_EN_5_bit); 
           
    const uint32_t MSK_PC_DBC_EN_4_bit = 12;
    const uint32_t MSK_PC_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_4_DISABLE = (0 << MSK_PC_DBC_EN_4_bit);
    const uint32_t MSK_PC_DBC_EN_4_ENABLE = (1 << MSK_PC_DBC_EN_4_bit); 
            
    const uint32_t MSK_PC_DBC_EN_3_bit = 11;
    const uint32_t MSK_PC_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_3_DISABLE = (0 << MSK_PC_DBC_EN_3_bit);
    const uint32_t MSK_PC_DBC_EN_3_ENABLE = (1 << MSK_PC_DBC_EN_3_bit); 
             
    const uint32_t MSK_PC_DBC_EN_2_bit = 10;
    const uint32_t MSK_PC_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_2_DISABLE = (0 << MSK_PC_DBC_EN_2_bit);
    const uint32_t MSK_PC_DBC_EN_2_ENABLE = (1 << MSK_PC_DBC_EN_2_bit); 
              
    const uint32_t MSK_PC_DBC_EN_1_bit = 9;
    const uint32_t MSK_PC_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_1_DISABLE = (0 << MSK_PC_DBC_EN_1_bit);
    const uint32_t MSK_PC_DBC_EN_1_ENABLE = (1 << MSK_PC_DBC_EN_1_bit); 
               
    const uint32_t MSK_PC_DBC_EN_0_bit = 8;
    const uint32_t MSK_PC_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_0_DISABLE = (0 << MSK_PC_DBC_EN_0_bit);
    const uint32_t MSK_PC_DBC_EN_0_ENABLE = (1 << MSK_PC_DBC_EN_0_bit); 
 
    const uint32_t PC_DBC_EN_7_bit = 7;
    const uint32_t PC_DBC_EN_7_bitWidth = 1;
    const uint32_t PC_DBC_EN_7_LOW = (0 << PC_DBC_EN_7_bit);
    const uint32_t PC_DBC_EN_7_HIGH = (1 << PC_DBC_EN_7_bit); 
 
    const uint32_t PC_DBC_EN_6_bit = 6;
    const uint32_t PC_DBC_EN_6_bitWidth = 1;
    const uint32_t PC_DBC_EN_6_LOW = (0 << PC_DBC_EN_6_bit);
    const uint32_t PC_DBC_EN_6_HIGH = (1 << PC_DBC_EN_6_bit); 
 
    const uint32_t PC_DBC_EN_5_bit = 5;
    const uint32_t PC_DBC_EN_5_bitWidth = 1;
    const uint32_t PC_DBC_EN_5_LOW = (0 << PC_DBC_EN_5_bit);
    const uint32_t PC_DBC_EN_5_HIGH = (1 << PC_DBC_EN_5_bit); 
 
    const uint32_t PC_DBC_EN_4_bit = 4;
    const uint32_t PC_DBC_EN_4_bitWidth = 1;
    const uint32_t PC_DBC_EN_4_LOW = (0 << PC_DBC_EN_4_bit);
    const uint32_t PC_DBC_EN_4_HIGH = (1 << PC_DBC_EN_4_bit); 
 
    const uint32_t PC_DBC_EN_3_bit = 3;
    const uint32_t PC_DBC_EN_3_bitWidth = 1;
    const uint32_t PC_DBC_EN_3_LOW = (0 << PC_DBC_EN_3_bit);
    const uint32_t PC_DBC_EN_3_HIGH = (1 << PC_DBC_EN_3_bit); 
 
    const uint32_t PC_DBC_EN_2_bit = 2;
    const uint32_t PC_DBC_EN_2_bitWidth = 1;
    const uint32_t PC_DBC_EN_2_LOW = (0 << PC_DBC_EN_2_bit);
    const uint32_t PC_DBC_EN_2_HIGH = (1 << PC_DBC_EN_2_bit); 
 
    const uint32_t PC_DBC_EN_1_bit = 1;
    const uint32_t PC_DBC_EN_1_bitWidth = 1;
    const uint32_t PC_DBC_EN_1_LOW = (0 << PC_DBC_EN_1_bit);
    const uint32_t PC_DBC_EN_1_HIGH = (1 << PC_DBC_EN_1_bit); 
 
    const uint32_t PC_DBC_EN_0_bit = 0;
    const uint32_t PC_DBC_EN_0_bitWidth = 1;
    const uint32_t PC_DBC_EN_0_LOW = (0 << PC_DBC_EN_0_bit);
    const uint32_t PC_DBC_EN_0_HIGH = (1 << PC_DBC_EN_0_bit); 
 
};

// 9.13.15 GPIO_DB_CTRL_P3_0
struct GPIO_DB_CTRL_PD
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0BC;

    const uint32_t MSK_PD_DBC_EN_7_bit = 15;
    const uint32_t MSK_PD_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_7_DISABLE = (0 << MSK_PD_DBC_EN_7_bit);
    const uint32_t MSK_PD_DBC_EN_7_ENABLE = (1 << MSK_PD_DBC_EN_7_bit); 
         
    const uint32_t MSK_PD_DBC_EN_6_bit = 14;
    const uint32_t MSK_PD_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_6_DISABLE = (0 << MSK_PD_DBC_EN_6_bit);
    const uint32_t MSK_PD_DBC_EN_6_ENABLE = (1 << MSK_PD_DBC_EN_6_bit); 
          
    const uint32_t MSK_PD_DBC_EN_5_bit = 13;
    const uint32_t MSK_PD_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_5_DISABLE = (0 << MSK_PD_DBC_EN_5_bit);
    const uint32_t MSK_PD_DBC_EN_5_ENABLE = (1 << MSK_PD_DBC_EN_5_bit); 
           
    const uint32_t MSK_PD_DBC_EN_4_bit = 12;
    const uint32_t MSK_PD_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_4_DISABLE = (0 << MSK_PD_DBC_EN_4_bit);
    const uint32_t MSK_PD_DBC_EN_4_ENABLE = (1 << MSK_PD_DBC_EN_4_bit); 
            
    const uint32_t MSK_PD_DBC_EN_3_bit = 11;
    const uint32_t MSK_PD_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_3_DISABLE = (0 << MSK_PD_DBC_EN_3_bit);
    const uint32_t MSK_PD_DBC_EN_3_ENABLE = (1 << MSK_PD_DBC_EN_3_bit); 
             
    const uint32_t MSK_PD_DBC_EN_2_bit = 10;
    const uint32_t MSK_PD_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_2_DISABLE = (0 << MSK_PD_DBC_EN_2_bit);
    const uint32_t MSK_PD_DBC_EN_2_ENABLE = (1 << MSK_PD_DBC_EN_2_bit); 
              
    const uint32_t MSK_PD_DBC_EN_1_bit = 9;
    const uint32_t MSK_PD_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_1_DISABLE = (0 << MSK_PD_DBC_EN_1_bit);
    const uint32_t MSK_PD_DBC_EN_1_ENABLE = (1 << MSK_PD_DBC_EN_1_bit); 
               
    const uint32_t MSK_PD_DBC_EN_0_bit = 8;
    const uint32_t MSK_PD_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_0_DISABLE = (0 << MSK_PD_DBC_EN_0_bit);
    const uint32_t MSK_PD_DBC_EN_0_ENABLE = (1 << MSK_PD_DBC_EN_0_bit); 
 
    const uint32_t PD_DBC_EN_7_bit = 7;
    const uint32_t PD_DBC_EN_7_bitWidth = 1;
    const uint32_t PD_DBC_EN_7_LOW = (0 << PD_DBC_EN_7_bit);
    const uint32_t PD_DBC_EN_7_HIGH = (1 << PD_DBC_EN_7_bit); 
 
    const uint32_t PD_DBC_EN_6_bit = 6;
    const uint32_t PD_DBC_EN_6_bitWidth = 1;
    const uint32_t PD_DBC_EN_6_LOW = (0 << PD_DBC_EN_6_bit);
    const uint32_t PD_DBC_EN_6_HIGH = (1 << PD_DBC_EN_6_bit); 
 
    const uint32_t PD_DBC_EN_5_bit = 5;
    const uint32_t PD_DBC_EN_5_bitWidth = 1;
    const uint32_t PD_DBC_EN_5_LOW = (0 << PD_DBC_EN_5_bit);
    const uint32_t PD_DBC_EN_5_HIGH = (1 << PD_DBC_EN_5_bit); 
 
    const uint32_t PD_DBC_EN_4_bit = 4;
    const uint32_t PD_DBC_EN_4_bitWidth = 1;
    const uint32_t PD_DBC_EN_4_LOW = (0 << PD_DBC_EN_4_bit);
    const uint32_t PD_DBC_EN_4_HIGH = (1 << PD_DBC_EN_4_bit); 
 
    const uint32_t PD_DBC_EN_3_bit = 3;
    const uint32_t PD_DBC_EN_3_bitWidth = 1;
    const uint32_t PD_DBC_EN_3_LOW = (0 << PD_DBC_EN_3_bit);
    const uint32_t PD_DBC_EN_3_HIGH = (1 << PD_DBC_EN_3_bit); 
 
    const uint32_t PD_DBC_EN_2_bit = 2;
    const uint32_t PD_DBC_EN_2_bitWidth = 1;
    const uint32_t PD_DBC_EN_2_LOW = (0 << PD_DBC_EN_2_bit);
    const uint32_t PD_DBC_EN_2_HIGH = (1 << PD_DBC_EN_2_bit); 
 
    const uint32_t PD_DBC_EN_1_bit = 1;
    const uint32_t PD_DBC_EN_1_bitWidth = 1;
    const uint32_t PD_DBC_EN_1_LOW = (0 << PD_DBC_EN_1_bit);
    const uint32_t PD_DBC_EN_1_HIGH = (1 << PD_DBC_EN_1_bit); 
 
    const uint32_t PD_DBC_EN_0_bit = 0;
    const uint32_t PD_DBC_EN_0_bitWidth = 1;
    const uint32_t PD_DBC_EN_0_LOW = (0 << PD_DBC_EN_0_bit);
    const uint32_t PD_DBC_EN_0_HIGH = (1 << PD_DBC_EN_0_bit); 
 
};

/**
 * 9.13.16 GPIO_MSK_INT_STA_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_STATUS_A
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0C0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_B
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0C4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_C
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0C8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_D
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0CC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.17 GPIO_MSK_INT_ENB_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_A
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0D0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_B
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0D4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_C
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0D8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_D
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0DC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.18 GPIO_MSK_INT_LVL_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_A
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0E0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_B
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0E4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_C
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0E8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_D
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0EC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

// 9.13.19 GPIO_DB_CNT_P0_0
struct GPIO_DB_CNT_PA
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0F0;

    const uint32_t PA_DBC_CNT_bit = 0;
    const uint32_t PA_DBC_CNT_bitWidth 8;
    const uint32_t PA_DBC_CNT_0 = (0 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_1 = (1 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_2 = (2 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_3 = (3 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_4 = (4 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_5 = (5 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_6 = (6 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_7 = (7 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_8 = (8 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_9 = (9 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_10 = (10 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_11 = (11 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_12 = (12 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_13 = (13 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_14 = (14 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_15 = (15 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_16 = (16 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_17 = (17 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_18 = (18 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_19 = (19 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_20 = (20 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_21 = (21 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_22 = (22 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_23 = (23 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_24 = (24 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_25 = (25 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_26 = (26 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_27 = (27 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_28 = (28 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_29 = (29 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_30 = (30 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_31 = (31 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_32 = (32 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_33 = (33 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_34 = (34 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_35 = (35 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_36 = (36 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_37 = (37 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_38 = (38 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_39 = (39 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_40 = (40 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_41 = (41 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_42 = (42 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_43 = (43 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_44 = (44 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_45 = (45 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_46 = (46 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_47 = (47 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_48 = (48 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_49 = (49 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_50 = (50 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_51 = (51 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_52 = (52 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_53 = (53 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_54 = (54 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_55 = (55 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_56 = (56 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_57 = (57 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_58 = (58 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_59 = (59 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_60 = (60 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_61 = (61 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_62 = (62 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_63 = (63 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_64 = (64 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_65 = (65 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_66 = (66 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_67 = (67 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_68 = (68 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_69 = (69 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_70 = (70 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_71 = (71 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_72 = (72 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_73 = (73 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_74 = (74 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_75 = (75 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_76 = (76 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_77 = (77 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_78 = (78 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_79 = (79 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_80 = (80 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_81 = (81 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_82 = (82 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_83 = (83 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_84 = (84 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_85 = (85 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_86 = (86 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_87 = (87 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_88 = (88 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_89 = (89 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_90 = (90 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_91 = (91 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_92 = (92 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_93 = (93 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_94 = (94 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_95 = (95 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_96 = (96 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_97 = (97 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_98 = (98 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_99 = (99 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_100 = (100 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_101 = (101 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_102 = (102 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_103 = (103 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_104 = (104 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_105 = (105 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_106 = (106 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_107 = (107 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_108 = (108 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_109 = (109 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_110 = (110 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_111 = (111 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_112 = (112 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_113 = (113 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_114 = (114 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_115 = (115 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_116 = (116 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_117 = (117 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_118 = (118 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_119 = (119 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_120 = (120 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_121 = (121 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_122 = (122 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_123 = (123 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_124 = (124 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_125 = (125 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_126 = (126 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_127 = (127 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_128 = (128 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_129 = (129 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_130 = (130 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_131 = (131 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_132 = (132 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_133 = (133 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_134 = (134 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_135 = (135 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_136 = (136 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_137 = (137 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_138 = (138 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_139 = (139 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_140 = (140 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_141 = (141 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_142 = (142 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_143 = (143 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_144 = (144 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_145 = (145 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_146 = (146 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_147 = (147 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_148 = (148 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_149 = (149 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_150 = (150 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_151 = (151 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_152 = (152 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_153 = (153 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_154 = (154 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_155 = (155 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_156 = (156 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_157 = (157 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_158 = (158 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_159 = (159 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_160 = (160 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_161 = (161 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_162 = (162 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_163 = (163 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_164 = (164 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_165 = (165 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_166 = (166 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_167 = (167 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_168 = (168 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_169 = (169 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_170 = (170 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_171 = (171 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_172 = (172 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_173 = (173 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_174 = (174 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_175 = (175 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_176 = (176 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_177 = (177 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_178 = (178 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_179 = (179 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_180 = (180 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_181 = (181 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_182 = (182 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_183 = (183 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_184 = (184 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_185 = (185 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_186 = (186 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_187 = (187 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_188 = (188 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_189 = (189 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_190 = (190 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_191 = (191 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_192 = (192 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_193 = (193 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_194 = (194 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_195 = (195 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_196 = (196 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_197 = (197 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_198 = (198 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_199 = (199 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_200 = (200 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_201 = (201 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_202 = (202 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_203 = (203 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_204 = (204 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_205 = (205 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_206 = (206 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_207 = (207 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_208 = (208 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_209 = (209 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_210 = (210 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_211 = (211 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_212 = (212 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_213 = (213 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_214 = (214 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_215 = (215 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_216 = (216 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_217 = (217 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_218 = (218 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_219 = (219 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_220 = (220 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_221 = (221 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_222 = (222 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_223 = (223 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_224 = (224 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_225 = (225 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_226 = (226 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_227 = (227 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_228 = (228 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_229 = (229 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_230 = (230 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_231 = (231 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_232 = (232 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_233 = (233 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_234 = (234 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_235 = (235 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_236 = (236 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_237 = (237 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_238 = (238 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_239 = (239 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_240 = (240 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_241 = (241 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_242 = (242 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_243 = (243 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_244 = (244 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_245 = (245 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_246 = (246 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_247 = (247 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_248 = (248 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_249 = (249 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_250 = (250 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_251 = (251 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_252 = (252 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_253 = (253 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_254 = (254 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_255 = (255 << PA_DBC_CNT_bit);

};

// 9.13.20 GPIO_DB_CNT_P1_0
struct GPIO_DB_CNT_PB
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0F4;

    const uint32_t PB_DBC_CNT_bit = 0;
    const uint32_t PB_DBC_CNT_bitWidth 8;
    const uint32_t PB_DBC_CNT_0 = (0 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_1 = (1 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_2 = (2 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_3 = (3 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_4 = (4 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_5 = (5 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_6 = (6 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_7 = (7 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_8 = (8 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_9 = (9 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_10 = (10 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_11 = (11 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_12 = (12 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_13 = (13 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_14 = (14 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_15 = (15 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_16 = (16 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_17 = (17 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_18 = (18 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_19 = (19 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_20 = (20 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_21 = (21 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_22 = (22 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_23 = (23 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_24 = (24 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_25 = (25 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_26 = (26 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_27 = (27 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_28 = (28 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_29 = (29 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_30 = (30 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_31 = (31 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_32 = (32 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_33 = (33 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_34 = (34 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_35 = (35 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_36 = (36 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_37 = (37 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_38 = (38 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_39 = (39 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_40 = (40 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_41 = (41 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_42 = (42 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_43 = (43 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_44 = (44 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_45 = (45 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_46 = (46 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_47 = (47 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_48 = (48 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_49 = (49 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_50 = (50 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_51 = (51 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_52 = (52 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_53 = (53 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_54 = (54 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_55 = (55 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_56 = (56 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_57 = (57 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_58 = (58 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_59 = (59 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_60 = (60 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_61 = (61 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_62 = (62 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_63 = (63 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_64 = (64 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_65 = (65 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_66 = (66 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_67 = (67 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_68 = (68 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_69 = (69 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_70 = (70 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_71 = (71 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_72 = (72 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_73 = (73 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_74 = (74 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_75 = (75 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_76 = (76 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_77 = (77 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_78 = (78 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_79 = (79 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_80 = (80 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_81 = (81 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_82 = (82 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_83 = (83 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_84 = (84 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_85 = (85 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_86 = (86 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_87 = (87 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_88 = (88 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_89 = (89 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_90 = (90 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_91 = (91 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_92 = (92 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_93 = (93 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_94 = (94 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_95 = (95 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_96 = (96 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_97 = (97 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_98 = (98 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_99 = (99 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_100 = (100 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_101 = (101 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_102 = (102 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_103 = (103 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_104 = (104 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_105 = (105 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_106 = (106 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_107 = (107 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_108 = (108 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_109 = (109 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_110 = (110 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_111 = (111 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_112 = (112 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_113 = (113 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_114 = (114 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_115 = (115 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_116 = (116 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_117 = (117 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_118 = (118 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_119 = (119 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_120 = (120 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_121 = (121 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_122 = (122 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_123 = (123 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_124 = (124 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_125 = (125 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_126 = (126 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_127 = (127 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_128 = (128 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_129 = (129 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_130 = (130 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_131 = (131 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_132 = (132 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_133 = (133 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_134 = (134 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_135 = (135 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_136 = (136 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_137 = (137 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_138 = (138 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_139 = (139 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_140 = (140 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_141 = (141 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_142 = (142 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_143 = (143 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_144 = (144 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_145 = (145 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_146 = (146 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_147 = (147 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_148 = (148 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_149 = (149 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_150 = (150 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_151 = (151 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_152 = (152 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_153 = (153 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_154 = (154 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_155 = (155 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_156 = (156 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_157 = (157 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_158 = (158 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_159 = (159 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_160 = (160 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_161 = (161 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_162 = (162 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_163 = (163 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_164 = (164 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_165 = (165 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_166 = (166 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_167 = (167 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_168 = (168 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_169 = (169 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_170 = (170 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_171 = (171 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_172 = (172 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_173 = (173 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_174 = (174 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_175 = (175 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_176 = (176 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_177 = (177 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_178 = (178 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_179 = (179 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_180 = (180 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_181 = (181 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_182 = (182 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_183 = (183 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_184 = (184 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_185 = (185 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_186 = (186 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_187 = (187 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_188 = (188 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_189 = (189 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_190 = (190 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_191 = (191 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_192 = (192 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_193 = (193 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_194 = (194 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_195 = (195 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_196 = (196 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_197 = (197 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_198 = (198 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_199 = (199 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_200 = (200 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_201 = (201 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_202 = (202 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_203 = (203 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_204 = (204 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_205 = (205 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_206 = (206 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_207 = (207 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_208 = (208 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_209 = (209 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_210 = (210 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_211 = (211 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_212 = (212 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_213 = (213 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_214 = (214 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_215 = (215 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_216 = (216 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_217 = (217 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_218 = (218 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_219 = (219 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_220 = (220 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_221 = (221 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_222 = (222 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_223 = (223 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_224 = (224 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_225 = (225 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_226 = (226 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_227 = (227 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_228 = (228 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_229 = (229 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_230 = (230 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_231 = (231 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_232 = (232 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_233 = (233 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_234 = (234 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_235 = (235 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_236 = (236 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_237 = (237 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_238 = (238 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_239 = (239 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_240 = (240 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_241 = (241 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_242 = (242 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_243 = (243 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_244 = (244 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_245 = (245 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_246 = (246 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_247 = (247 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_248 = (248 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_249 = (249 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_250 = (250 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_251 = (251 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_252 = (252 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_253 = (253 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_254 = (254 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_255 = (255 << PB_DBC_CNT_bit);

};

// 9.13.21 GPIO_DB_CNT_P2_0
struct GPIO_DB_CNT_PC
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0F8;

    const uint32_t PC_DBC_CNT_bit = 0;
    const uint32_t PC_DBC_CNT_bitWidth 8;
    const uint32_t PC_DBC_CNT_0 = (0 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_1 = (1 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_2 = (2 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_3 = (3 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_4 = (4 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_5 = (5 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_6 = (6 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_7 = (7 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_8 = (8 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_9 = (9 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_10 = (10 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_11 = (11 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_12 = (12 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_13 = (13 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_14 = (14 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_15 = (15 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_16 = (16 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_17 = (17 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_18 = (18 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_19 = (19 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_20 = (20 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_21 = (21 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_22 = (22 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_23 = (23 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_24 = (24 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_25 = (25 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_26 = (26 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_27 = (27 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_28 = (28 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_29 = (29 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_30 = (30 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_31 = (31 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_32 = (32 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_33 = (33 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_34 = (34 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_35 = (35 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_36 = (36 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_37 = (37 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_38 = (38 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_39 = (39 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_40 = (40 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_41 = (41 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_42 = (42 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_43 = (43 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_44 = (44 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_45 = (45 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_46 = (46 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_47 = (47 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_48 = (48 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_49 = (49 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_50 = (50 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_51 = (51 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_52 = (52 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_53 = (53 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_54 = (54 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_55 = (55 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_56 = (56 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_57 = (57 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_58 = (58 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_59 = (59 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_60 = (60 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_61 = (61 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_62 = (62 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_63 = (63 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_64 = (64 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_65 = (65 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_66 = (66 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_67 = (67 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_68 = (68 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_69 = (69 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_70 = (70 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_71 = (71 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_72 = (72 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_73 = (73 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_74 = (74 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_75 = (75 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_76 = (76 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_77 = (77 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_78 = (78 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_79 = (79 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_80 = (80 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_81 = (81 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_82 = (82 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_83 = (83 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_84 = (84 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_85 = (85 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_86 = (86 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_87 = (87 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_88 = (88 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_89 = (89 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_90 = (90 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_91 = (91 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_92 = (92 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_93 = (93 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_94 = (94 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_95 = (95 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_96 = (96 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_97 = (97 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_98 = (98 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_99 = (99 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_100 = (100 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_101 = (101 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_102 = (102 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_103 = (103 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_104 = (104 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_105 = (105 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_106 = (106 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_107 = (107 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_108 = (108 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_109 = (109 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_110 = (110 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_111 = (111 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_112 = (112 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_113 = (113 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_114 = (114 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_115 = (115 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_116 = (116 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_117 = (117 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_118 = (118 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_119 = (119 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_120 = (120 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_121 = (121 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_122 = (122 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_123 = (123 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_124 = (124 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_125 = (125 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_126 = (126 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_127 = (127 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_128 = (128 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_129 = (129 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_130 = (130 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_131 = (131 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_132 = (132 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_133 = (133 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_134 = (134 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_135 = (135 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_136 = (136 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_137 = (137 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_138 = (138 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_139 = (139 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_140 = (140 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_141 = (141 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_142 = (142 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_143 = (143 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_144 = (144 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_145 = (145 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_146 = (146 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_147 = (147 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_148 = (148 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_149 = (149 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_150 = (150 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_151 = (151 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_152 = (152 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_153 = (153 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_154 = (154 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_155 = (155 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_156 = (156 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_157 = (157 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_158 = (158 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_159 = (159 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_160 = (160 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_161 = (161 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_162 = (162 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_163 = (163 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_164 = (164 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_165 = (165 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_166 = (166 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_167 = (167 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_168 = (168 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_169 = (169 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_170 = (170 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_171 = (171 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_172 = (172 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_173 = (173 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_174 = (174 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_175 = (175 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_176 = (176 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_177 = (177 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_178 = (178 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_179 = (179 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_180 = (180 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_181 = (181 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_182 = (182 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_183 = (183 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_184 = (184 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_185 = (185 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_186 = (186 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_187 = (187 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_188 = (188 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_189 = (189 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_190 = (190 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_191 = (191 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_192 = (192 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_193 = (193 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_194 = (194 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_195 = (195 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_196 = (196 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_197 = (197 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_198 = (198 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_199 = (199 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_200 = (200 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_201 = (201 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_202 = (202 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_203 = (203 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_204 = (204 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_205 = (205 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_206 = (206 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_207 = (207 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_208 = (208 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_209 = (209 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_210 = (210 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_211 = (211 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_212 = (212 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_213 = (213 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_214 = (214 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_215 = (215 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_216 = (216 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_217 = (217 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_218 = (218 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_219 = (219 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_220 = (220 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_221 = (221 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_222 = (222 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_223 = (223 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_224 = (224 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_225 = (225 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_226 = (226 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_227 = (227 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_228 = (228 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_229 = (229 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_230 = (230 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_231 = (231 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_232 = (232 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_233 = (233 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_234 = (234 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_235 = (235 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_236 = (236 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_237 = (237 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_238 = (238 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_239 = (239 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_240 = (240 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_241 = (241 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_242 = (242 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_243 = (243 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_244 = (244 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_245 = (245 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_246 = (246 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_247 = (247 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_248 = (248 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_249 = (249 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_250 = (250 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_251 = (251 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_252 = (252 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_253 = (253 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_254 = (254 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_255 = (255 << PC_DBC_CNT_bit);

};

// 9.13.22 GPIO_DB_CNT_P3_0
struct GPIO_DB_CNT_PD
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0FC;

    const uint32_t PD_DBC_CNT_bit = 0;
    const uint32_t PD_DBC_CNT_bitWidth 8;
    const uint32_t PD_DBC_CNT_0 = (0 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_1 = (1 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_2 = (2 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_3 = (3 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_4 = (4 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_5 = (5 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_6 = (6 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_7 = (7 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_8 = (8 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_9 = (9 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_10 = (10 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_11 = (11 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_12 = (12 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_13 = (13 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_14 = (14 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_15 = (15 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_16 = (16 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_17 = (17 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_18 = (18 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_19 = (19 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_20 = (20 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_21 = (21 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_22 = (22 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_23 = (23 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_24 = (24 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_25 = (25 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_26 = (26 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_27 = (27 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_28 = (28 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_29 = (29 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_30 = (30 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_31 = (31 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_32 = (32 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_33 = (33 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_34 = (34 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_35 = (35 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_36 = (36 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_37 = (37 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_38 = (38 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_39 = (39 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_40 = (40 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_41 = (41 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_42 = (42 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_43 = (43 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_44 = (44 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_45 = (45 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_46 = (46 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_47 = (47 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_48 = (48 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_49 = (49 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_50 = (50 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_51 = (51 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_52 = (52 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_53 = (53 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_54 = (54 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_55 = (55 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_56 = (56 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_57 = (57 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_58 = (58 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_59 = (59 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_60 = (60 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_61 = (61 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_62 = (62 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_63 = (63 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_64 = (64 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_65 = (65 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_66 = (66 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_67 = (67 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_68 = (68 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_69 = (69 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_70 = (70 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_71 = (71 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_72 = (72 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_73 = (73 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_74 = (74 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_75 = (75 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_76 = (76 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_77 = (77 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_78 = (78 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_79 = (79 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_80 = (80 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_81 = (81 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_82 = (82 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_83 = (83 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_84 = (84 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_85 = (85 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_86 = (86 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_87 = (87 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_88 = (88 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_89 = (89 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_90 = (90 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_91 = (91 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_92 = (92 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_93 = (93 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_94 = (94 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_95 = (95 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_96 = (96 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_97 = (97 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_98 = (98 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_99 = (99 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_100 = (100 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_101 = (101 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_102 = (102 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_103 = (103 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_104 = (104 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_105 = (105 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_106 = (106 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_107 = (107 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_108 = (108 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_109 = (109 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_110 = (110 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_111 = (111 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_112 = (112 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_113 = (113 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_114 = (114 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_115 = (115 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_116 = (116 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_117 = (117 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_118 = (118 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_119 = (119 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_120 = (120 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_121 = (121 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_122 = (122 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_123 = (123 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_124 = (124 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_125 = (125 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_126 = (126 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_127 = (127 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_128 = (128 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_129 = (129 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_130 = (130 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_131 = (131 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_132 = (132 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_133 = (133 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_134 = (134 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_135 = (135 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_136 = (136 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_137 = (137 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_138 = (138 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_139 = (139 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_140 = (140 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_141 = (141 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_142 = (142 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_143 = (143 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_144 = (144 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_145 = (145 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_146 = (146 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_147 = (147 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_148 = (148 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_149 = (149 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_150 = (150 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_151 = (151 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_152 = (152 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_153 = (153 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_154 = (154 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_155 = (155 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_156 = (156 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_157 = (157 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_158 = (158 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_159 = (159 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_160 = (160 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_161 = (161 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_162 = (162 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_163 = (163 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_164 = (164 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_165 = (165 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_166 = (166 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_167 = (167 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_168 = (168 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_169 = (169 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_170 = (170 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_171 = (171 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_172 = (172 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_173 = (173 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_174 = (174 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_175 = (175 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_176 = (176 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_177 = (177 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_178 = (178 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_179 = (179 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_180 = (180 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_181 = (181 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_182 = (182 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_183 = (183 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_184 = (184 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_185 = (185 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_186 = (186 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_187 = (187 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_188 = (188 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_189 = (189 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_190 = (190 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_191 = (191 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_192 = (192 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_193 = (193 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_194 = (194 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_195 = (195 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_196 = (196 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_197 = (197 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_198 = (198 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_199 = (199 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_200 = (200 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_201 = (201 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_202 = (202 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_203 = (203 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_204 = (204 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_205 = (205 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_206 = (206 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_207 = (207 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_208 = (208 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_209 = (209 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_210 = (210 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_211 = (211 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_212 = (212 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_213 = (213 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_214 = (214 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_215 = (215 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_216 = (216 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_217 = (217 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_218 = (218 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_219 = (219 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_220 = (220 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_221 = (221 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_222 = (222 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_223 = (223 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_224 = (224 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_225 = (225 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_226 = (226 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_227 = (227 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_228 = (228 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_229 = (229 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_230 = (230 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_231 = (231 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_232 = (232 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_233 = (233 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_234 = (234 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_235 = (235 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_236 = (236 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_237 = (237 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_238 = (238 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_239 = (239 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_240 = (240 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_241 = (241 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_242 = (242 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_243 = (243 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_244 = (244 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_245 = (245 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_246 = (246 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_247 = (247 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_248 = (248 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_249 = (249 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_250 = (250 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_251 = (251 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_252 = (252 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_253 = (253 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_254 = (254 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_255 = (255 << PD_DBC_CNT_bit);

};

// GPIO Controller 2 – Start Addr 6000:d100

/**
 * 9.13.1 GPIO_CNF_0 
 *
 * Designates whether each pin operates as a GPIO or as an SFIO. By default all 
 * pins come up in SFIO mode. These can be programmed to GPIO mode at any stage.
 *
 * Lock bits are used to control the access to the CNF and OE registers. When 
 * set, no one can write to the CNF and OE bits. They can be programmed ONLY 
 * during Boot and get reset by chip reset only.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_CNF_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x000;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x004;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x008;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x00C;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

/**
 * 9.13.2 GPIO_OE_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid.
 * 
 * The set of registers below are used to either drive the signal out or as an 
 * Input. This needs to be programmed depending upon whether the pin needs to 
 * be in either Input or Output.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OE_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x010;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x014;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x018;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x01C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

/**
 * 9.13.3 GPIO_OUT_0
 *
 * GPIO_CNF.x=1 (in GPIO mode) AND GPIO_OE.x=1 (GPIO output enabled) must be 
 * true for this to be valid. This register will take affect only in GPIO 
 * mode. This register is used to drive the value out on a given pin.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OUT_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x020;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x024;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x028;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x02C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * 9.13.4 GPIO_IN_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid. This 
 * is a read-only register used to read the value from the pin. This is an 
 * array of 4 identical register entries; the register fields below apply to each entry.
 */

struct GPIO_IN_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x030;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x034;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x038;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x03C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * All GPIO inputs can be independently programmed to generate an interrupt 
 * request.
 * 
 * In addition, the individual trigger level for interrupt on each input pin 
 * can be programmed as either active-on-high or active-on-low. For example, to 
 * program an active-on-high interrupt on bit 3 of GPIO-PORT_C, write '1' into 
 * bit 3 of GPIO_INT.LVL.C register (this sets the interrupt to be 
 * active-on-high), and then write '1' into bit 3 of GPIO_INT.ENB.C (this 
 * enables interrupt on the named bit).
 *
 * The interrupt flag status can be read in the appropriate bit of the 
 * GPIO_INT.STA.C register. Once the programmed interrupt occurs, status should 
 * be cleared by writing into the appropriate bit of the GPIO_INT.CLR.C 
 * register. Note that the interrupt thus generated is routed to the processor 
 * only if the corresponding bit for GPIO interrupts in the Secondary interrupt
 *  controller is enabled.
 */

/**
 * 9.13.5 GPIO_INT_STA_0
 *
 * GPIO mode (GPIO_CNF.x=1) and GPIO_INT.ENB.x=1 must be true for this condition 
 * to be valid. Every GPIO pin generates an Interrupt when switching from 
 * Low-High to High-Low. Interrupt status for each port is saved in an 
 * Interrupt status register.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_STATUS_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x040;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x044;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x048;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x04C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};


/**
 * 9.13.6 GPIO_INT_ENB_0
 *
 * Every bit of the GPIO pin has an enable which, when enabled, routes the 
 * Interrupt to the Interrupt controller. This is an array of 4 identical 
 * register entries; the register fields below apply to each entry.
 */

struct GPIO_INT_ENABLE_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x050;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x054;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x058;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x05C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

/**
 * 9.13.7 GPIO_INT_LVL_0
 *
 * The GPIO can detect an interrupt for any edge- or level-sensitive signal.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry
 */

struct GPIO_INT_LEVEL_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x060;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x064;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x068;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x06C;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};


/**
 * 9.13.8 GPIO_INT_CLR_0
 * 
 * This write-only register clears the Interrupts that are set. This is valid 
 * only in GPIO mode when GPIO_INT.ENB is set.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_CLEAR_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x070;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x074;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x078;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x07C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

/**
 * 9.13.9 GPIO_MSK_CNF_0
 *
 * Each register is provided with an individual 16-bit version for enabling 
 * Masked Writes to avoid a Read-Modify-Write operation by the firmware. The 
 * exception is for the interrupt clear register, whose functionality is 
 * combined in the interrupt status register. Individual pins only can be 
 * programmed by suitably enabling the write masks in the upper byte of these 
 * 16-bit registers.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_CNF_E
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x080;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_F
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x084;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_G
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x088;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_H
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x08C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.10 GPIO_MSK_OE_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OE_E
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x090;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_F
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x094;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_G
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x098;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_H
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x09C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.11 GPIO_MSK_OUT_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OUT_E
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0A0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_F
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0A4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_G
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0A8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_H
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0AC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.12 GPIO_DB_CTRL_P0_0
 */

struct GPIO_DB_CTRL_PE
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0B0;

    const uint32_t MSK_PE_DBC_EN_7_bit = 15;
    const uint32_t MSK_PE_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_7_DISABLE = (0 << MSK_PE_DBC_EN_7_bit);
    const uint32_t MSK_PE_DBC_EN_7_ENABLE = (1 << MSK_PE_DBC_EN_7_bit); 
         
    const uint32_t MSK_PE_DBC_EN_6_bit = 14;
    const uint32_t MSK_PE_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_6_DISABLE = (0 << MSK_PE_DBC_EN_6_bit);
    const uint32_t MSK_PE_DBC_EN_6_ENABLE = (1 << MSK_PE_DBC_EN_6_bit); 
          
    const uint32_t MSK_PE_DBC_EN_5_bit = 13;
    const uint32_t MSK_PE_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_5_DISABLE = (0 << MSK_PE_DBC_EN_5_bit);
    const uint32_t MSK_PE_DBC_EN_5_ENABLE = (1 << MSK_PE_DBC_EN_5_bit); 
           
    const uint32_t MSK_PE_DBC_EN_4_bit = 12;
    const uint32_t MSK_PE_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_4_DISABLE = (0 << MSK_PE_DBC_EN_4_bit);
    const uint32_t MSK_PE_DBC_EN_4_ENABLE = (1 << MSK_PE_DBC_EN_4_bit); 
            
    const uint32_t MSK_PE_DBC_EN_3_bit = 11;
    const uint32_t MSK_PE_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_3_DISABLE = (0 << MSK_PE_DBC_EN_3_bit);
    const uint32_t MSK_PE_DBC_EN_3_ENABLE = (1 << MSK_PE_DBC_EN_3_bit); 
             
    const uint32_t MSK_PE_DBC_EN_2_bit = 10;
    const uint32_t MSK_PE_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_2_DISABLE = (0 << MSK_PE_DBC_EN_2_bit);
    const uint32_t MSK_PE_DBC_EN_2_ENABLE = (1 << MSK_PE_DBC_EN_2_bit); 
              
    const uint32_t MSK_PE_DBC_EN_1_bit = 9;
    const uint32_t MSK_PE_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_1_DISABLE = (0 << MSK_PE_DBC_EN_1_bit);
    const uint32_t MSK_PE_DBC_EN_1_ENABLE = (1 << MSK_PE_DBC_EN_1_bit); 
               
    const uint32_t MSK_PE_DBC_EN_0_bit = 8;
    const uint32_t MSK_PE_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_0_DISABLE = (0 << MSK_PE_DBC_EN_0_bit);
    const uint32_t MSK_PE_DBC_EN_0_ENABLE = (1 << MSK_PE_DBC_EN_0_bit); 
 
    const uint32_t PE_DBC_EN_7_bit = 7;
    const uint32_t PE_DBC_EN_7_bitWidth = 1;
    const uint32_t PE_DBC_EN_7_LOW = (0 << PE_DBC_EN_7_bit);
    const uint32_t PE_DBC_EN_7_HIGH = (1 << PE_DBC_EN_7_bit); 
 
    const uint32_t PE_DBC_EN_6_bit = 6;
    const uint32_t PE_DBC_EN_6_bitWidth = 1;
    const uint32_t PE_DBC_EN_6_LOW = (0 << PE_DBC_EN_6_bit);
    const uint32_t PE_DBC_EN_6_HIGH = (1 << PE_DBC_EN_6_bit); 
 
    const uint32_t PE_DBC_EN_5_bit = 5;
    const uint32_t PE_DBC_EN_5_bitWidth = 1;
    const uint32_t PE_DBC_EN_5_LOW = (0 << PE_DBC_EN_5_bit);
    const uint32_t PE_DBC_EN_5_HIGH = (1 << PE_DBC_EN_5_bit); 
 
    const uint32_t PE_DBC_EN_4_bit = 4;
    const uint32_t PE_DBC_EN_4_bitWidth = 1;
    const uint32_t PE_DBC_EN_4_LOW = (0 << PE_DBC_EN_4_bit);
    const uint32_t PE_DBC_EN_4_HIGH = (1 << PE_DBC_EN_4_bit); 
 
    const uint32_t PE_DBC_EN_3_bit = 3;
    const uint32_t PE_DBC_EN_3_bitWidth = 1;
    const uint32_t PE_DBC_EN_3_LOW = (0 << PE_DBC_EN_3_bit);
    const uint32_t PE_DBC_EN_3_HIGH = (1 << PE_DBC_EN_3_bit); 
 
    const uint32_t PE_DBC_EN_2_bit = 2;
    const uint32_t PE_DBC_EN_2_bitWidth = 1;
    const uint32_t PE_DBC_EN_2_LOW = (0 << PE_DBC_EN_2_bit);
    const uint32_t PE_DBC_EN_2_HIGH = (1 << PE_DBC_EN_2_bit); 
 
    const uint32_t PE_DBC_EN_1_bit = 1;
    const uint32_t PE_DBC_EN_1_bitWidth = 1;
    const uint32_t PE_DBC_EN_1_LOW = (0 << PE_DBC_EN_1_bit);
    const uint32_t PE_DBC_EN_1_HIGH = (1 << PE_DBC_EN_1_bit); 
 
    const uint32_t PE_DBC_EN_0_bit = 0;
    const uint32_t PE_DBC_EN_0_bitWidth = 1;
    const uint32_t PE_DBC_EN_0_LOW = (0 << PE_DBC_EN_0_bit);
    const uint32_t PE_DBC_EN_0_HIGH = (1 << PE_DBC_EN_0_bit); 
 
};

// 9.13.13 GPIO_DB_CTRL_P1_0
struct GPIO_DB_CTRL_PF
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0B4;

    const uint32_t MSK_PF_DBC_EN_7_bit = 15;
    const uint32_t MSK_PF_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_7_DISABLE = (0 << MSK_PF_DBC_EN_7_bit);
    const uint32_t MSK_PF_DBC_EN_7_ENABLE = (1 << MSK_PF_DBC_EN_7_bit); 
         
    const uint32_t MSK_PF_DBC_EN_6_bit = 14;
    const uint32_t MSK_PF_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_6_DISABLE = (0 << MSK_PF_DBC_EN_6_bit);
    const uint32_t MSK_PF_DBC_EN_6_ENABLE = (1 << MSK_PF_DBC_EN_6_bit); 
          
    const uint32_t MSK_PF_DBC_EN_5_bit = 13;
    const uint32_t MSK_PF_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_5_DISABLE = (0 << MSK_PF_DBC_EN_5_bit);
    const uint32_t MSK_PF_DBC_EN_5_ENABLE = (1 << MSK_PF_DBC_EN_5_bit); 
           
    const uint32_t MSK_PF_DBC_EN_4_bit = 12;
    const uint32_t MSK_PF_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_4_DISABLE = (0 << MSK_PF_DBC_EN_4_bit);
    const uint32_t MSK_PF_DBC_EN_4_ENABLE = (1 << MSK_PF_DBC_EN_4_bit); 
            
    const uint32_t MSK_PF_DBC_EN_3_bit = 11;
    const uint32_t MSK_PF_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_3_DISABLE = (0 << MSK_PF_DBC_EN_3_bit);
    const uint32_t MSK_PF_DBC_EN_3_ENABLE = (1 << MSK_PF_DBC_EN_3_bit); 
             
    const uint32_t MSK_PF_DBC_EN_2_bit = 10;
    const uint32_t MSK_PF_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_2_DISABLE = (0 << MSK_PF_DBC_EN_2_bit);
    const uint32_t MSK_PF_DBC_EN_2_ENABLE = (1 << MSK_PF_DBC_EN_2_bit); 
              
    const uint32_t MSK_PF_DBC_EN_1_bit = 9;
    const uint32_t MSK_PF_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_1_DISABLE = (0 << MSK_PF_DBC_EN_1_bit);
    const uint32_t MSK_PF_DBC_EN_1_ENABLE = (1 << MSK_PF_DBC_EN_1_bit); 
               
    const uint32_t MSK_PF_DBC_EN_0_bit = 8;
    const uint32_t MSK_PF_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_0_DISABLE = (0 << MSK_PF_DBC_EN_0_bit);
    const uint32_t MSK_PF_DBC_EN_0_ENABLE = (1 << MSK_PF_DBC_EN_0_bit); 
 
    const uint32_t PF_DBC_EN_7_bit = 7;
    const uint32_t PF_DBC_EN_7_bitWidth = 1;
    const uint32_t PF_DBC_EN_7_LOW = (0 << PF_DBC_EN_7_bit);
    const uint32_t PF_DBC_EN_7_HIGH = (1 << PF_DBC_EN_7_bit); 
 
    const uint32_t PF_DBC_EN_6_bit = 6;
    const uint32_t PF_DBC_EN_6_bitWidth = 1;
    const uint32_t PF_DBC_EN_6_LOW = (0 << PF_DBC_EN_6_bit);
    const uint32_t PF_DBC_EN_6_HIGH = (1 << PF_DBC_EN_6_bit); 
 
    const uint32_t PF_DBC_EN_5_bit = 5;
    const uint32_t PF_DBC_EN_5_bitWidth = 1;
    const uint32_t PF_DBC_EN_5_LOW = (0 << PF_DBC_EN_5_bit);
    const uint32_t PF_DBC_EN_5_HIGH = (1 << PF_DBC_EN_5_bit); 
 
    const uint32_t PF_DBC_EN_4_bit = 4;
    const uint32_t PF_DBC_EN_4_bitWidth = 1;
    const uint32_t PF_DBC_EN_4_LOW = (0 << PF_DBC_EN_4_bit);
    const uint32_t PF_DBC_EN_4_HIGH = (1 << PF_DBC_EN_4_bit); 
 
    const uint32_t PF_DBC_EN_3_bit = 3;
    const uint32_t PF_DBC_EN_3_bitWidth = 1;
    const uint32_t PF_DBC_EN_3_LOW = (0 << PF_DBC_EN_3_bit);
    const uint32_t PF_DBC_EN_3_HIGH = (1 << PF_DBC_EN_3_bit); 
 
    const uint32_t PF_DBC_EN_2_bit = 2;
    const uint32_t PF_DBC_EN_2_bitWidth = 1;
    const uint32_t PF_DBC_EN_2_LOW = (0 << PF_DBC_EN_2_bit);
    const uint32_t PF_DBC_EN_2_HIGH = (1 << PF_DBC_EN_2_bit); 
 
    const uint32_t PF_DBC_EN_1_bit = 1;
    const uint32_t PF_DBC_EN_1_bitWidth = 1;
    const uint32_t PF_DBC_EN_1_LOW = (0 << PF_DBC_EN_1_bit);
    const uint32_t PF_DBC_EN_1_HIGH = (1 << PF_DBC_EN_1_bit); 
 
    const uint32_t PF_DBC_EN_0_bit = 0;
    const uint32_t PF_DBC_EN_0_bitWidth = 1;
    const uint32_t PF_DBC_EN_0_LOW = (0 << PF_DBC_EN_0_bit);
    const uint32_t PF_DBC_EN_0_HIGH = (1 << PF_DBC_EN_0_bit); 
 
};

// 9.13.14 GPIO_DB_CTRL_P2_0
struct GPIO_DB_CTRL_PG
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0B8;

    const uint32_t MSK_PG_DBC_EN_7_bit = 15;
    const uint32_t MSK_PG_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_7_DISABLE = (0 << MSK_PG_DBC_EN_7_bit);
    const uint32_t MSK_PG_DBC_EN_7_ENABLE = (1 << MSK_PG_DBC_EN_7_bit); 
         
    const uint32_t MSK_PG_DBC_EN_6_bit = 14;
    const uint32_t MSK_PG_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_6_DISABLE = (0 << MSK_PG_DBC_EN_6_bit);
    const uint32_t MSK_PG_DBC_EN_6_ENABLE = (1 << MSK_PG_DBC_EN_6_bit); 
          
    const uint32_t MSK_PG_DBC_EN_5_bit = 13;
    const uint32_t MSK_PG_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_5_DISABLE = (0 << MSK_PG_DBC_EN_5_bit);
    const uint32_t MSK_PG_DBC_EN_5_ENABLE = (1 << MSK_PG_DBC_EN_5_bit); 
           
    const uint32_t MSK_PG_DBC_EN_4_bit = 12;
    const uint32_t MSK_PG_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_4_DISABLE = (0 << MSK_PG_DBC_EN_4_bit);
    const uint32_t MSK_PG_DBC_EN_4_ENABLE = (1 << MSK_PG_DBC_EN_4_bit); 
            
    const uint32_t MSK_PG_DBC_EN_3_bit = 11;
    const uint32_t MSK_PG_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_3_DISABLE = (0 << MSK_PG_DBC_EN_3_bit);
    const uint32_t MSK_PG_DBC_EN_3_ENABLE = (1 << MSK_PG_DBC_EN_3_bit); 
             
    const uint32_t MSK_PG_DBC_EN_2_bit = 10;
    const uint32_t MSK_PG_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_2_DISABLE = (0 << MSK_PG_DBC_EN_2_bit);
    const uint32_t MSK_PG_DBC_EN_2_ENABLE = (1 << MSK_PG_DBC_EN_2_bit); 
              
    const uint32_t MSK_PG_DBC_EN_1_bit = 9;
    const uint32_t MSK_PG_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_1_DISABLE = (0 << MSK_PG_DBC_EN_1_bit);
    const uint32_t MSK_PG_DBC_EN_1_ENABLE = (1 << MSK_PG_DBC_EN_1_bit); 
               
    const uint32_t MSK_PG_DBC_EN_0_bit = 8;
    const uint32_t MSK_PG_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_0_DISABLE = (0 << MSK_PG_DBC_EN_0_bit);
    const uint32_t MSK_PG_DBC_EN_0_ENABLE = (1 << MSK_PG_DBC_EN_0_bit); 
 
    const uint32_t PG_DBC_EN_7_bit = 7;
    const uint32_t PG_DBC_EN_7_bitWidth = 1;
    const uint32_t PG_DBC_EN_7_LOW = (0 << PG_DBC_EN_7_bit);
    const uint32_t PG_DBC_EN_7_HIGH = (1 << PG_DBC_EN_7_bit); 
 
    const uint32_t PG_DBC_EN_6_bit = 6;
    const uint32_t PG_DBC_EN_6_bitWidth = 1;
    const uint32_t PG_DBC_EN_6_LOW = (0 << PG_DBC_EN_6_bit);
    const uint32_t PG_DBC_EN_6_HIGH = (1 << PG_DBC_EN_6_bit); 
 
    const uint32_t PG_DBC_EN_5_bit = 5;
    const uint32_t PG_DBC_EN_5_bitWidth = 1;
    const uint32_t PG_DBC_EN_5_LOW = (0 << PG_DBC_EN_5_bit);
    const uint32_t PG_DBC_EN_5_HIGH = (1 << PG_DBC_EN_5_bit); 
 
    const uint32_t PG_DBC_EN_4_bit = 4;
    const uint32_t PG_DBC_EN_4_bitWidth = 1;
    const uint32_t PG_DBC_EN_4_LOW = (0 << PG_DBC_EN_4_bit);
    const uint32_t PG_DBC_EN_4_HIGH = (1 << PG_DBC_EN_4_bit); 
 
    const uint32_t PG_DBC_EN_3_bit = 3;
    const uint32_t PG_DBC_EN_3_bitWidth = 1;
    const uint32_t PG_DBC_EN_3_LOW = (0 << PG_DBC_EN_3_bit);
    const uint32_t PG_DBC_EN_3_HIGH = (1 << PG_DBC_EN_3_bit); 
 
    const uint32_t PG_DBC_EN_2_bit = 2;
    const uint32_t PG_DBC_EN_2_bitWidth = 1;
    const uint32_t PG_DBC_EN_2_LOW = (0 << PG_DBC_EN_2_bit);
    const uint32_t PG_DBC_EN_2_HIGH = (1 << PG_DBC_EN_2_bit); 
 
    const uint32_t PG_DBC_EN_1_bit = 1;
    const uint32_t PG_DBC_EN_1_bitWidth = 1;
    const uint32_t PG_DBC_EN_1_LOW = (0 << PG_DBC_EN_1_bit);
    const uint32_t PG_DBC_EN_1_HIGH = (1 << PG_DBC_EN_1_bit); 
 
    const uint32_t PG_DBC_EN_0_bit = 0;
    const uint32_t PG_DBC_EN_0_bitWidth = 1;
    const uint32_t PG_DBC_EN_0_LOW = (0 << PG_DBC_EN_0_bit);
    const uint32_t PG_DBC_EN_0_HIGH = (1 << PG_DBC_EN_0_bit); 
 
};

// 9.13.15 GPIO_DB_CTRL_P3_0
struct GPIO_DB_CTRL_PH
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0BC;

    const uint32_t MSK_PH_DBC_EN_7_bit = 15;
    const uint32_t MSK_PH_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_7_DISABLE = (0 << MSK_PH_DBC_EN_7_bit);
    const uint32_t MSK_PH_DBC_EN_7_ENABLE = (1 << MSK_PH_DBC_EN_7_bit); 
         
    const uint32_t MSK_PH_DBC_EN_6_bit = 14;
    const uint32_t MSK_PH_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_6_DISABLE = (0 << MSK_PH_DBC_EN_6_bit);
    const uint32_t MSK_PH_DBC_EN_6_ENABLE = (1 << MSK_PH_DBC_EN_6_bit); 
          
    const uint32_t MSK_PH_DBC_EN_5_bit = 13;
    const uint32_t MSK_PH_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_5_DISABLE = (0 << MSK_PH_DBC_EN_5_bit);
    const uint32_t MSK_PH_DBC_EN_5_ENABLE = (1 << MSK_PH_DBC_EN_5_bit); 
           
    const uint32_t MSK_PH_DBC_EN_4_bit = 12;
    const uint32_t MSK_PH_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_4_DISABLE = (0 << MSK_PH_DBC_EN_4_bit);
    const uint32_t MSK_PH_DBC_EN_4_ENABLE = (1 << MSK_PH_DBC_EN_4_bit); 
            
    const uint32_t MSK_PH_DBC_EN_3_bit = 11;
    const uint32_t MSK_PH_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_3_DISABLE = (0 << MSK_PH_DBC_EN_3_bit);
    const uint32_t MSK_PH_DBC_EN_3_ENABLE = (1 << MSK_PH_DBC_EN_3_bit); 
             
    const uint32_t MSK_PH_DBC_EN_2_bit = 10;
    const uint32_t MSK_PH_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_2_DISABLE = (0 << MSK_PH_DBC_EN_2_bit);
    const uint32_t MSK_PH_DBC_EN_2_ENABLE = (1 << MSK_PH_DBC_EN_2_bit); 
              
    const uint32_t MSK_PH_DBC_EN_1_bit = 9;
    const uint32_t MSK_PH_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_1_DISABLE = (0 << MSK_PH_DBC_EN_1_bit);
    const uint32_t MSK_PH_DBC_EN_1_ENABLE = (1 << MSK_PH_DBC_EN_1_bit); 
               
    const uint32_t MSK_PH_DBC_EN_0_bit = 8;
    const uint32_t MSK_PH_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_0_DISABLE = (0 << MSK_PH_DBC_EN_0_bit);
    const uint32_t MSK_PH_DBC_EN_0_ENABLE = (1 << MSK_PH_DBC_EN_0_bit); 
 
    const uint32_t PH_DBC_EN_7_bit = 7;
    const uint32_t PH_DBC_EN_7_bitWidth = 1;
    const uint32_t PH_DBC_EN_7_LOW = (0 << PH_DBC_EN_7_bit);
    const uint32_t PH_DBC_EN_7_HIGH = (1 << PH_DBC_EN_7_bit); 
 
    const uint32_t PH_DBC_EN_6_bit = 6;
    const uint32_t PH_DBC_EN_6_bitWidth = 1;
    const uint32_t PH_DBC_EN_6_LOW = (0 << PH_DBC_EN_6_bit);
    const uint32_t PH_DBC_EN_6_HIGH = (1 << PH_DBC_EN_6_bit); 
 
    const uint32_t PH_DBC_EN_5_bit = 5;
    const uint32_t PH_DBC_EN_5_bitWidth = 1;
    const uint32_t PH_DBC_EN_5_LOW = (0 << PH_DBC_EN_5_bit);
    const uint32_t PH_DBC_EN_5_HIGH = (1 << PH_DBC_EN_5_bit); 
 
    const uint32_t PH_DBC_EN_4_bit = 4;
    const uint32_t PH_DBC_EN_4_bitWidth = 1;
    const uint32_t PH_DBC_EN_4_LOW = (0 << PH_DBC_EN_4_bit);
    const uint32_t PH_DBC_EN_4_HIGH = (1 << PH_DBC_EN_4_bit); 
 
    const uint32_t PH_DBC_EN_3_bit = 3;
    const uint32_t PH_DBC_EN_3_bitWidth = 1;
    const uint32_t PH_DBC_EN_3_LOW = (0 << PH_DBC_EN_3_bit);
    const uint32_t PH_DBC_EN_3_HIGH = (1 << PH_DBC_EN_3_bit); 
 
    const uint32_t PH_DBC_EN_2_bit = 2;
    const uint32_t PH_DBC_EN_2_bitWidth = 1;
    const uint32_t PH_DBC_EN_2_LOW = (0 << PH_DBC_EN_2_bit);
    const uint32_t PH_DBC_EN_2_HIGH = (1 << PH_DBC_EN_2_bit); 
 
    const uint32_t PH_DBC_EN_1_bit = 1;
    const uint32_t PH_DBC_EN_1_bitWidth = 1;
    const uint32_t PH_DBC_EN_1_LOW = (0 << PH_DBC_EN_1_bit);
    const uint32_t PH_DBC_EN_1_HIGH = (1 << PH_DBC_EN_1_bit); 
 
    const uint32_t PH_DBC_EN_0_bit = 0;
    const uint32_t PH_DBC_EN_0_bitWidth = 1;
    const uint32_t PH_DBC_EN_0_LOW = (0 << PH_DBC_EN_0_bit);
    const uint32_t PH_DBC_EN_0_HIGH = (1 << PH_DBC_EN_0_bit); 
 
};

/**
 * 9.13.16 GPIO_MSK_INT_STA_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_STATUS_E
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0C0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_F
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0C4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_G
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0C8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_H
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0CC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.17 GPIO_MSK_INT_ENB_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_E
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0D0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_F
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0D4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_G
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0D8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_H
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0DC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.18 GPIO_MSK_INT_LVL_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_E
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0E0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_F
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0E4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_G
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0E8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_H
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0EC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

// 9.13.19 GPIO_DB_CNT_P0_0
struct GPIO_DB_CNT_PE
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0F0;

    const uint32_t PE_DBC_CNT_bit = 0;
    const uint32_t PE_DBC_CNT_bitWidth 8;
    const uint32_t PE_DBC_CNT_0 = (0 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_1 = (1 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_2 = (2 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_3 = (3 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_4 = (4 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_5 = (5 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_6 = (6 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_7 = (7 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_8 = (8 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_9 = (9 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_10 = (10 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_11 = (11 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_12 = (12 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_13 = (13 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_14 = (14 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_15 = (15 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_16 = (16 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_17 = (17 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_18 = (18 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_19 = (19 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_20 = (20 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_21 = (21 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_22 = (22 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_23 = (23 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_24 = (24 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_25 = (25 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_26 = (26 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_27 = (27 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_28 = (28 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_29 = (29 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_30 = (30 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_31 = (31 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_32 = (32 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_33 = (33 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_34 = (34 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_35 = (35 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_36 = (36 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_37 = (37 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_38 = (38 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_39 = (39 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_40 = (40 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_41 = (41 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_42 = (42 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_43 = (43 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_44 = (44 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_45 = (45 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_46 = (46 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_47 = (47 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_48 = (48 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_49 = (49 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_50 = (50 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_51 = (51 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_52 = (52 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_53 = (53 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_54 = (54 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_55 = (55 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_56 = (56 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_57 = (57 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_58 = (58 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_59 = (59 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_60 = (60 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_61 = (61 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_62 = (62 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_63 = (63 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_64 = (64 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_65 = (65 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_66 = (66 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_67 = (67 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_68 = (68 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_69 = (69 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_70 = (70 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_71 = (71 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_72 = (72 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_73 = (73 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_74 = (74 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_75 = (75 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_76 = (76 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_77 = (77 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_78 = (78 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_79 = (79 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_80 = (80 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_81 = (81 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_82 = (82 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_83 = (83 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_84 = (84 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_85 = (85 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_86 = (86 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_87 = (87 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_88 = (88 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_89 = (89 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_90 = (90 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_91 = (91 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_92 = (92 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_93 = (93 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_94 = (94 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_95 = (95 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_96 = (96 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_97 = (97 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_98 = (98 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_99 = (99 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_100 = (100 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_101 = (101 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_102 = (102 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_103 = (103 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_104 = (104 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_105 = (105 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_106 = (106 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_107 = (107 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_108 = (108 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_109 = (109 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_110 = (110 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_111 = (111 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_112 = (112 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_113 = (113 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_114 = (114 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_115 = (115 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_116 = (116 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_117 = (117 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_118 = (118 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_119 = (119 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_120 = (120 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_121 = (121 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_122 = (122 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_123 = (123 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_124 = (124 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_125 = (125 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_126 = (126 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_127 = (127 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_128 = (128 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_129 = (129 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_130 = (130 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_131 = (131 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_132 = (132 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_133 = (133 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_134 = (134 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_135 = (135 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_136 = (136 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_137 = (137 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_138 = (138 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_139 = (139 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_140 = (140 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_141 = (141 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_142 = (142 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_143 = (143 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_144 = (144 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_145 = (145 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_146 = (146 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_147 = (147 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_148 = (148 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_149 = (149 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_150 = (150 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_151 = (151 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_152 = (152 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_153 = (153 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_154 = (154 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_155 = (155 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_156 = (156 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_157 = (157 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_158 = (158 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_159 = (159 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_160 = (160 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_161 = (161 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_162 = (162 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_163 = (163 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_164 = (164 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_165 = (165 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_166 = (166 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_167 = (167 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_168 = (168 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_169 = (169 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_170 = (170 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_171 = (171 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_172 = (172 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_173 = (173 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_174 = (174 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_175 = (175 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_176 = (176 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_177 = (177 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_178 = (178 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_179 = (179 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_180 = (180 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_181 = (181 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_182 = (182 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_183 = (183 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_184 = (184 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_185 = (185 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_186 = (186 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_187 = (187 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_188 = (188 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_189 = (189 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_190 = (190 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_191 = (191 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_192 = (192 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_193 = (193 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_194 = (194 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_195 = (195 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_196 = (196 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_197 = (197 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_198 = (198 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_199 = (199 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_200 = (200 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_201 = (201 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_202 = (202 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_203 = (203 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_204 = (204 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_205 = (205 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_206 = (206 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_207 = (207 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_208 = (208 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_209 = (209 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_210 = (210 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_211 = (211 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_212 = (212 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_213 = (213 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_214 = (214 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_215 = (215 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_216 = (216 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_217 = (217 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_218 = (218 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_219 = (219 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_220 = (220 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_221 = (221 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_222 = (222 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_223 = (223 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_224 = (224 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_225 = (225 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_226 = (226 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_227 = (227 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_228 = (228 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_229 = (229 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_230 = (230 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_231 = (231 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_232 = (232 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_233 = (233 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_234 = (234 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_235 = (235 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_236 = (236 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_237 = (237 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_238 = (238 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_239 = (239 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_240 = (240 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_241 = (241 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_242 = (242 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_243 = (243 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_244 = (244 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_245 = (245 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_246 = (246 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_247 = (247 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_248 = (248 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_249 = (249 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_250 = (250 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_251 = (251 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_252 = (252 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_253 = (253 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_254 = (254 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_255 = (255 << PE_DBC_CNT_bit);

};

// 9.13.20 GPIO_DB_CNT_P1_0
struct GPIO_DB_CNT_PF
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0F4;

    const uint32_t PF_DBC_CNT_bit = 0;
    const uint32_t PF_DBC_CNT_bitWidth 8;
    const uint32_t PF_DBC_CNT_0 = (0 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_1 = (1 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_2 = (2 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_3 = (3 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_4 = (4 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_5 = (5 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_6 = (6 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_7 = (7 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_8 = (8 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_9 = (9 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_10 = (10 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_11 = (11 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_12 = (12 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_13 = (13 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_14 = (14 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_15 = (15 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_16 = (16 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_17 = (17 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_18 = (18 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_19 = (19 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_20 = (20 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_21 = (21 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_22 = (22 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_23 = (23 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_24 = (24 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_25 = (25 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_26 = (26 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_27 = (27 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_28 = (28 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_29 = (29 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_30 = (30 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_31 = (31 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_32 = (32 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_33 = (33 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_34 = (34 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_35 = (35 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_36 = (36 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_37 = (37 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_38 = (38 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_39 = (39 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_40 = (40 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_41 = (41 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_42 = (42 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_43 = (43 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_44 = (44 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_45 = (45 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_46 = (46 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_47 = (47 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_48 = (48 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_49 = (49 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_50 = (50 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_51 = (51 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_52 = (52 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_53 = (53 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_54 = (54 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_55 = (55 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_56 = (56 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_57 = (57 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_58 = (58 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_59 = (59 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_60 = (60 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_61 = (61 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_62 = (62 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_63 = (63 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_64 = (64 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_65 = (65 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_66 = (66 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_67 = (67 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_68 = (68 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_69 = (69 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_70 = (70 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_71 = (71 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_72 = (72 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_73 = (73 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_74 = (74 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_75 = (75 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_76 = (76 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_77 = (77 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_78 = (78 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_79 = (79 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_80 = (80 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_81 = (81 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_82 = (82 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_83 = (83 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_84 = (84 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_85 = (85 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_86 = (86 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_87 = (87 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_88 = (88 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_89 = (89 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_90 = (90 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_91 = (91 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_92 = (92 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_93 = (93 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_94 = (94 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_95 = (95 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_96 = (96 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_97 = (97 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_98 = (98 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_99 = (99 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_100 = (100 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_101 = (101 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_102 = (102 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_103 = (103 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_104 = (104 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_105 = (105 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_106 = (106 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_107 = (107 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_108 = (108 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_109 = (109 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_110 = (110 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_111 = (111 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_112 = (112 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_113 = (113 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_114 = (114 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_115 = (115 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_116 = (116 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_117 = (117 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_118 = (118 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_119 = (119 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_120 = (120 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_121 = (121 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_122 = (122 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_123 = (123 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_124 = (124 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_125 = (125 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_126 = (126 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_127 = (127 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_128 = (128 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_129 = (129 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_130 = (130 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_131 = (131 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_132 = (132 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_133 = (133 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_134 = (134 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_135 = (135 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_136 = (136 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_137 = (137 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_138 = (138 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_139 = (139 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_140 = (140 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_141 = (141 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_142 = (142 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_143 = (143 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_144 = (144 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_145 = (145 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_146 = (146 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_147 = (147 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_148 = (148 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_149 = (149 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_150 = (150 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_151 = (151 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_152 = (152 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_153 = (153 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_154 = (154 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_155 = (155 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_156 = (156 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_157 = (157 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_158 = (158 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_159 = (159 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_160 = (160 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_161 = (161 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_162 = (162 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_163 = (163 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_164 = (164 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_165 = (165 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_166 = (166 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_167 = (167 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_168 = (168 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_169 = (169 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_170 = (170 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_171 = (171 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_172 = (172 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_173 = (173 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_174 = (174 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_175 = (175 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_176 = (176 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_177 = (177 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_178 = (178 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_179 = (179 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_180 = (180 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_181 = (181 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_182 = (182 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_183 = (183 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_184 = (184 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_185 = (185 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_186 = (186 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_187 = (187 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_188 = (188 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_189 = (189 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_190 = (190 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_191 = (191 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_192 = (192 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_193 = (193 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_194 = (194 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_195 = (195 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_196 = (196 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_197 = (197 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_198 = (198 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_199 = (199 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_200 = (200 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_201 = (201 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_202 = (202 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_203 = (203 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_204 = (204 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_205 = (205 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_206 = (206 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_207 = (207 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_208 = (208 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_209 = (209 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_210 = (210 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_211 = (211 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_212 = (212 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_213 = (213 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_214 = (214 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_215 = (215 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_216 = (216 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_217 = (217 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_218 = (218 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_219 = (219 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_220 = (220 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_221 = (221 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_222 = (222 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_223 = (223 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_224 = (224 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_225 = (225 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_226 = (226 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_227 = (227 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_228 = (228 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_229 = (229 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_230 = (230 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_231 = (231 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_232 = (232 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_233 = (233 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_234 = (234 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_235 = (235 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_236 = (236 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_237 = (237 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_238 = (238 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_239 = (239 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_240 = (240 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_241 = (241 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_242 = (242 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_243 = (243 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_244 = (244 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_245 = (245 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_246 = (246 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_247 = (247 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_248 = (248 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_249 = (249 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_250 = (250 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_251 = (251 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_252 = (252 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_253 = (253 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_254 = (254 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_255 = (255 << PF_DBC_CNT_bit);

};

// 9.13.21 GPIO_DB_CNT_P2_0
struct GPIO_DB_CNT_PG
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0F8;

    const uint32_t PG_DBC_CNT_bit = 0;
    const uint32_t PG_DBC_CNT_bitWidth 8;
    const uint32_t PG_DBC_CNT_0 = (0 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_1 = (1 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_2 = (2 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_3 = (3 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_4 = (4 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_5 = (5 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_6 = (6 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_7 = (7 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_8 = (8 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_9 = (9 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_10 = (10 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_11 = (11 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_12 = (12 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_13 = (13 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_14 = (14 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_15 = (15 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_16 = (16 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_17 = (17 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_18 = (18 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_19 = (19 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_20 = (20 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_21 = (21 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_22 = (22 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_23 = (23 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_24 = (24 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_25 = (25 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_26 = (26 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_27 = (27 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_28 = (28 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_29 = (29 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_30 = (30 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_31 = (31 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_32 = (32 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_33 = (33 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_34 = (34 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_35 = (35 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_36 = (36 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_37 = (37 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_38 = (38 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_39 = (39 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_40 = (40 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_41 = (41 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_42 = (42 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_43 = (43 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_44 = (44 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_45 = (45 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_46 = (46 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_47 = (47 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_48 = (48 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_49 = (49 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_50 = (50 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_51 = (51 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_52 = (52 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_53 = (53 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_54 = (54 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_55 = (55 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_56 = (56 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_57 = (57 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_58 = (58 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_59 = (59 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_60 = (60 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_61 = (61 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_62 = (62 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_63 = (63 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_64 = (64 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_65 = (65 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_66 = (66 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_67 = (67 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_68 = (68 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_69 = (69 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_70 = (70 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_71 = (71 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_72 = (72 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_73 = (73 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_74 = (74 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_75 = (75 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_76 = (76 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_77 = (77 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_78 = (78 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_79 = (79 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_80 = (80 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_81 = (81 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_82 = (82 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_83 = (83 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_84 = (84 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_85 = (85 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_86 = (86 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_87 = (87 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_88 = (88 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_89 = (89 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_90 = (90 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_91 = (91 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_92 = (92 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_93 = (93 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_94 = (94 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_95 = (95 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_96 = (96 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_97 = (97 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_98 = (98 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_99 = (99 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_100 = (100 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_101 = (101 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_102 = (102 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_103 = (103 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_104 = (104 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_105 = (105 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_106 = (106 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_107 = (107 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_108 = (108 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_109 = (109 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_110 = (110 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_111 = (111 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_112 = (112 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_113 = (113 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_114 = (114 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_115 = (115 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_116 = (116 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_117 = (117 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_118 = (118 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_119 = (119 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_120 = (120 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_121 = (121 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_122 = (122 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_123 = (123 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_124 = (124 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_125 = (125 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_126 = (126 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_127 = (127 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_128 = (128 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_129 = (129 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_130 = (130 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_131 = (131 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_132 = (132 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_133 = (133 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_134 = (134 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_135 = (135 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_136 = (136 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_137 = (137 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_138 = (138 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_139 = (139 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_140 = (140 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_141 = (141 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_142 = (142 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_143 = (143 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_144 = (144 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_145 = (145 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_146 = (146 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_147 = (147 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_148 = (148 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_149 = (149 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_150 = (150 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_151 = (151 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_152 = (152 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_153 = (153 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_154 = (154 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_155 = (155 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_156 = (156 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_157 = (157 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_158 = (158 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_159 = (159 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_160 = (160 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_161 = (161 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_162 = (162 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_163 = (163 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_164 = (164 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_165 = (165 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_166 = (166 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_167 = (167 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_168 = (168 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_169 = (169 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_170 = (170 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_171 = (171 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_172 = (172 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_173 = (173 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_174 = (174 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_175 = (175 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_176 = (176 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_177 = (177 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_178 = (178 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_179 = (179 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_180 = (180 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_181 = (181 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_182 = (182 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_183 = (183 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_184 = (184 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_185 = (185 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_186 = (186 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_187 = (187 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_188 = (188 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_189 = (189 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_190 = (190 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_191 = (191 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_192 = (192 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_193 = (193 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_194 = (194 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_195 = (195 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_196 = (196 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_197 = (197 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_198 = (198 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_199 = (199 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_200 = (200 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_201 = (201 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_202 = (202 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_203 = (203 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_204 = (204 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_205 = (205 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_206 = (206 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_207 = (207 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_208 = (208 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_209 = (209 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_210 = (210 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_211 = (211 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_212 = (212 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_213 = (213 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_214 = (214 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_215 = (215 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_216 = (216 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_217 = (217 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_218 = (218 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_219 = (219 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_220 = (220 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_221 = (221 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_222 = (222 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_223 = (223 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_224 = (224 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_225 = (225 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_226 = (226 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_227 = (227 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_228 = (228 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_229 = (229 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_230 = (230 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_231 = (231 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_232 = (232 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_233 = (233 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_234 = (234 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_235 = (235 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_236 = (236 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_237 = (237 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_238 = (238 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_239 = (239 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_240 = (240 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_241 = (241 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_242 = (242 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_243 = (243 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_244 = (244 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_245 = (245 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_246 = (246 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_247 = (247 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_248 = (248 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_249 = (249 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_250 = (250 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_251 = (251 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_252 = (252 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_253 = (253 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_254 = (254 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_255 = (255 << PG_DBC_CNT_bit);

};

// 9.13.22 GPIO_DB_CNT_P3_0
struct GPIO_DB_CNT_PF
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0FC;

    const uint32_t PH_DBC_CNT_bit = 0;
    const uint32_t PH_DBC_CNT_bitWidth 8;
    const uint32_t PH_DBC_CNT_0 = (0 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_1 = (1 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_2 = (2 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_3 = (3 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_4 = (4 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_5 = (5 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_6 = (6 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_7 = (7 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_8 = (8 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_9 = (9 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_10 = (10 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_11 = (11 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_12 = (12 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_13 = (13 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_14 = (14 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_15 = (15 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_16 = (16 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_17 = (17 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_18 = (18 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_19 = (19 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_20 = (20 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_21 = (21 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_22 = (22 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_23 = (23 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_24 = (24 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_25 = (25 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_26 = (26 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_27 = (27 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_28 = (28 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_29 = (29 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_30 = (30 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_31 = (31 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_32 = (32 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_33 = (33 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_34 = (34 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_35 = (35 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_36 = (36 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_37 = (37 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_38 = (38 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_39 = (39 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_40 = (40 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_41 = (41 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_42 = (42 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_43 = (43 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_44 = (44 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_45 = (45 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_46 = (46 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_47 = (47 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_48 = (48 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_49 = (49 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_50 = (50 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_51 = (51 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_52 = (52 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_53 = (53 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_54 = (54 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_55 = (55 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_56 = (56 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_57 = (57 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_58 = (58 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_59 = (59 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_60 = (60 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_61 = (61 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_62 = (62 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_63 = (63 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_64 = (64 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_65 = (65 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_66 = (66 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_67 = (67 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_68 = (68 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_69 = (69 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_70 = (70 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_71 = (71 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_72 = (72 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_73 = (73 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_74 = (74 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_75 = (75 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_76 = (76 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_77 = (77 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_78 = (78 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_79 = (79 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_80 = (80 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_81 = (81 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_82 = (82 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_83 = (83 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_84 = (84 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_85 = (85 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_86 = (86 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_87 = (87 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_88 = (88 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_89 = (89 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_90 = (90 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_91 = (91 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_92 = (92 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_93 = (93 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_94 = (94 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_95 = (95 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_96 = (96 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_97 = (97 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_98 = (98 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_99 = (99 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_100 = (100 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_101 = (101 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_102 = (102 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_103 = (103 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_104 = (104 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_105 = (105 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_106 = (106 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_107 = (107 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_108 = (108 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_109 = (109 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_110 = (110 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_111 = (111 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_112 = (112 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_113 = (113 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_114 = (114 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_115 = (115 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_116 = (116 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_117 = (117 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_118 = (118 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_119 = (119 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_120 = (120 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_121 = (121 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_122 = (122 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_123 = (123 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_124 = (124 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_125 = (125 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_126 = (126 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_127 = (127 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_128 = (128 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_129 = (129 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_130 = (130 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_131 = (131 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_132 = (132 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_133 = (133 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_134 = (134 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_135 = (135 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_136 = (136 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_137 = (137 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_138 = (138 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_139 = (139 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_140 = (140 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_141 = (141 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_142 = (142 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_143 = (143 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_144 = (144 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_145 = (145 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_146 = (146 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_147 = (147 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_148 = (148 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_149 = (149 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_150 = (150 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_151 = (151 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_152 = (152 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_153 = (153 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_154 = (154 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_155 = (155 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_156 = (156 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_157 = (157 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_158 = (158 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_159 = (159 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_160 = (160 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_161 = (161 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_162 = (162 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_163 = (163 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_164 = (164 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_165 = (165 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_166 = (166 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_167 = (167 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_168 = (168 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_169 = (169 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_170 = (170 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_171 = (171 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_172 = (172 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_173 = (173 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_174 = (174 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_175 = (175 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_176 = (176 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_177 = (177 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_178 = (178 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_179 = (179 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_180 = (180 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_181 = (181 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_182 = (182 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_183 = (183 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_184 = (184 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_185 = (185 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_186 = (186 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_187 = (187 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_188 = (188 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_189 = (189 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_190 = (190 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_191 = (191 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_192 = (192 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_193 = (193 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_194 = (194 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_195 = (195 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_196 = (196 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_197 = (197 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_198 = (198 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_199 = (199 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_200 = (200 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_201 = (201 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_202 = (202 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_203 = (203 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_204 = (204 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_205 = (205 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_206 = (206 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_207 = (207 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_208 = (208 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_209 = (209 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_210 = (210 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_211 = (211 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_212 = (212 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_213 = (213 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_214 = (214 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_215 = (215 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_216 = (216 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_217 = (217 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_218 = (218 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_219 = (219 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_220 = (220 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_221 = (221 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_222 = (222 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_223 = (223 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_224 = (224 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_225 = (225 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_226 = (226 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_227 = (227 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_228 = (228 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_229 = (229 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_230 = (230 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_231 = (231 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_232 = (232 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_233 = (233 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_234 = (234 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_235 = (235 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_236 = (236 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_237 = (237 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_238 = (238 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_239 = (239 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_240 = (240 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_241 = (241 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_242 = (242 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_243 = (243 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_244 = (244 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_245 = (245 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_246 = (246 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_247 = (247 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_248 = (248 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_249 = (249 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_250 = (250 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_251 = (251 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_252 = (252 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_253 = (253 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_254 = (254 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_255 = (255 << PH_DBC_CNT_bit);

};


// GPIO Controller 3 – Start Addr 6000:d200

/**
 * 9.13.1 GPIO_CNF_0 
 *
 * Designates whether each pin operates as a GPIO or as an SFIO. By default all 
 * pins come up in SFIO mode. These can be programmed to GPIO mode at any stage.
 *
 * Lock bits are used to control the access to the CNF and OE registers. When 
 * set, no one can write to the CNF and OE bits. They can be programmed ONLY 
 * during Boot and get reset by chip reset only.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_CNF_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x000;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x004;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x008;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x00C;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

/**
 * 9.13.2 GPIO_OE_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid.
 * 
 * The set of registers below are used to either drive the signal out or as an 
 * Input. This needs to be programmed depending upon whether the pin needs to 
 * be in either Input or Output.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OE_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x010;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x014;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x018;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x01C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

/**
 * 9.13.3 GPIO_OUT_0
 *
 * GPIO_CNF.x=1 (in GPIO mode) AND GPIO_OE.x=1 (GPIO output enabled) must be 
 * true for this to be valid. This register will take affect only in GPIO 
 * mode. This register is used to drive the value out on a given pin.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OUT_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x020;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x024;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x028;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x02C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * 9.13.4 GPIO_IN_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid. This 
 * is a read-only register used to read the value from the pin. This is an 
 * array of 4 identical register entries; the register fields below apply to each entry.
 */

struct GPIO_IN_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x030;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x034;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x038;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x03C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * All GPIO inputs can be independently programmed to generate an interrupt 
 * request.
 * 
 * In addition, the individual trigger level for interrupt on each input pin 
 * can be programmed as either active-on-high or active-on-low. For example, to 
 * program an active-on-high interrupt on bit 3 of GPIO-PORT_C, write '1' into 
 * bit 3 of GPIO_INT.LVL.C register (this sets the interrupt to be 
 * active-on-high), and then write '1' into bit 3 of GPIO_INT.ENB.C (this 
 * enables interrupt on the named bit).
 *
 * The interrupt flag status can be read in the appropriate bit of the 
 * GPIO_INT.STA.C register. Once the programmed interrupt occurs, status should 
 * be cleared by writing into the appropriate bit of the GPIO_INT.CLR.C 
 * register. Note that the interrupt thus generated is routed to the processor 
 * only if the corresponding bit for GPIO interrupts in the Secondary interrupt
 *  controller is enabled.
 */

/**
 * 9.13.5 GPIO_INT_STA_0
 *
 * GPIO mode (GPIO_CNF.x=1) and GPIO_INT.ENB.x=1 must be true for this condition 
 * to be valid. Every GPIO pin generates an Interrupt when switching from 
 * Low-High to High-Low. Interrupt status for each port is saved in an 
 * Interrupt status register.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_STATUS_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x040;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x044;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x048;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x04C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};


/**
 * 9.13.6 GPIO_INT_ENB_0
 *
 * Every bit of the GPIO pin has an enable which, when enabled, routes the 
 * Interrupt to the Interrupt controller. This is an array of 4 identical 
 * register entries; the register fields below apply to each entry.
 */

struct GPIO_INT_ENABLE_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x050;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x054;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x058;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x05C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

/**
 * 9.13.7 GPIO_INT_LVL_0
 *
 * The GPIO can detect an interrupt for any edge- or level-sensitive signal.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry
 */

struct GPIO_INT_LEVEL_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x060;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x064;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x068;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x06C;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};


/**
 * 9.13.8 GPIO_INT_CLR_0
 * 
 * This write-only register clears the Interrupts that are set. This is valid 
 * only in GPIO mode when GPIO_INT.ENB is set.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_CLEAR_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x070;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x074;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x078;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x07C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

/**
 * 9.13.9 GPIO_MSK_CNF_0
 *
 * Each register is provided with an individual 16-bit version for enabling 
 * Masked Writes to avoid a Read-Modify-Write operation by the firmware. The 
 * exception is for the interrupt clear register, whose functionality is 
 * combined in the interrupt status register. Individual pins only can be 
 * programmed by suitably enabling the write masks in the upper byte of these 
 * 16-bit registers.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_CNF_I
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x080;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_J
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x084;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_K
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x088;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_L
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x08C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.10 GPIO_MSK_OE_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OE_I
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x090;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_J
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x094;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_K
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x098;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_L
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x09C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.11 GPIO_MSK_OUT_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OUT_I
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0A0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_J
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0A4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_K
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0A8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_L
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0AC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.12 GPIO_DB_CTRL_P0_0
 */

struct GPIO_DB_CTRL_PI
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0B0;

    const uint32_t MSK_PI_DBC_EN_7_bit = 15;
    const uint32_t MSK_PI_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_7_DISABLE = (0 << MSK_PI_DBC_EN_7_bit);
    const uint32_t MSK_PI_DBC_EN_7_ENABLE = (1 << MSK_PI_DBC_EN_7_bit); 
         
    const uint32_t MSK_PI_DBC_EN_6_bit = 14;
    const uint32_t MSK_PI_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_6_DISABLE = (0 << MSK_PI_DBC_EN_6_bit);
    const uint32_t MSK_PI_DBC_EN_6_ENABLE = (1 << MSK_PI_DBC_EN_6_bit); 
          
    const uint32_t MSK_PI_DBC_EN_5_bit = 13;
    const uint32_t MSK_PI_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_5_DISABLE = (0 << MSK_PI_DBC_EN_5_bit);
    const uint32_t MSK_PI_DBC_EN_5_ENABLE = (1 << MSK_PI_DBC_EN_5_bit); 
           
    const uint32_t MSK_PI_DBC_EN_4_bit = 12;
    const uint32_t MSK_PI_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_4_DISABLE = (0 << MSK_PI_DBC_EN_4_bit);
    const uint32_t MSK_PI_DBC_EN_4_ENABLE = (1 << MSK_PI_DBC_EN_4_bit); 
            
    const uint32_t MSK_PI_DBC_EN_3_bit = 11;
    const uint32_t MSK_PI_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_3_DISABLE = (0 << MSK_PI_DBC_EN_3_bit);
    const uint32_t MSK_PI_DBC_EN_3_ENABLE = (1 << MSK_PI_DBC_EN_3_bit); 
             
    const uint32_t MSK_PI_DBC_EN_2_bit = 10;
    const uint32_t MSK_PI_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_2_DISABLE = (0 << MSK_PI_DBC_EN_2_bit);
    const uint32_t MSK_PI_DBC_EN_2_ENABLE = (1 << MSK_PI_DBC_EN_2_bit); 
              
    const uint32_t MSK_PI_DBC_EN_1_bit = 9;
    const uint32_t MSK_PI_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_1_DISABLE = (0 << MSK_PI_DBC_EN_1_bit);
    const uint32_t MSK_PI_DBC_EN_1_ENABLE = (1 << MSK_PI_DBC_EN_1_bit); 
               
    const uint32_t MSK_PI_DBC_EN_0_bit = 8;
    const uint32_t MSK_PI_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_0_DISABLE = (0 << MSK_PI_DBC_EN_0_bit);
    const uint32_t MSK_PI_DBC_EN_0_ENABLE = (1 << MSK_PI_DBC_EN_0_bit); 
 
    const uint32_t PI_DBC_EN_7_bit = 7;
    const uint32_t PI_DBC_EN_7_bitWidth = 1;
    const uint32_t PI_DBC_EN_7_LOW = (0 << PI_DBC_EN_7_bit);
    const uint32_t PI_DBC_EN_7_HIGH = (1 << PI_DBC_EN_7_bit); 
 
    const uint32_t PI_DBC_EN_6_bit = 6;
    const uint32_t PI_DBC_EN_6_bitWidth = 1;
    const uint32_t PI_DBC_EN_6_LOW = (0 << PI_DBC_EN_6_bit);
    const uint32_t PI_DBC_EN_6_HIGH = (1 << PI_DBC_EN_6_bit); 
 
    const uint32_t PI_DBC_EN_5_bit = 5;
    const uint32_t PI_DBC_EN_5_bitWidth = 1;
    const uint32_t PI_DBC_EN_5_LOW = (0 << PI_DBC_EN_5_bit);
    const uint32_t PI_DBC_EN_5_HIGH = (1 << PI_DBC_EN_5_bit); 
 
    const uint32_t PI_DBC_EN_4_bit = 4;
    const uint32_t PI_DBC_EN_4_bitWidth = 1;
    const uint32_t PI_DBC_EN_4_LOW = (0 << PI_DBC_EN_4_bit);
    const uint32_t PI_DBC_EN_4_HIGH = (1 << PI_DBC_EN_4_bit); 
 
    const uint32_t PI_DBC_EN_3_bit = 3;
    const uint32_t PI_DBC_EN_3_bitWidth = 1;
    const uint32_t PI_DBC_EN_3_LOW = (0 << PI_DBC_EN_3_bit);
    const uint32_t PI_DBC_EN_3_HIGH = (1 << PI_DBC_EN_3_bit); 
 
    const uint32_t PI_DBC_EN_2_bit = 2;
    const uint32_t PI_DBC_EN_2_bitWidth = 1;
    const uint32_t PI_DBC_EN_2_LOW = (0 << PI_DBC_EN_2_bit);
    const uint32_t PI_DBC_EN_2_HIGH = (1 << PI_DBC_EN_2_bit); 
 
    const uint32_t PI_DBC_EN_1_bit = 1;
    const uint32_t PI_DBC_EN_1_bitWidth = 1;
    const uint32_t PI_DBC_EN_1_LOW = (0 << PI_DBC_EN_1_bit);
    const uint32_t PI_DBC_EN_1_HIGH = (1 << PI_DBC_EN_1_bit); 
 
    const uint32_t PI_DBC_EN_0_bit = 0;
    const uint32_t PI_DBC_EN_0_bitWidth = 1;
    const uint32_t PI_DBC_EN_0_LOW = (0 << PI_DBC_EN_0_bit);
    const uint32_t PI_DBC_EN_0_HIGH = (1 << PI_DBC_EN_0_bit); 
 
};

// 9.13.13 GPIO_DB_CTRL_P1_0
struct GPIO_DB_CTRL_PJ
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0B4;

    const uint32_t MSK_PJ_DBC_EN_7_bit = 15;
    const uint32_t MSK_PJ_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_7_DISABLE = (0 << MSK_PJ_DBC_EN_7_bit);
    const uint32_t MSK_PJ_DBC_EN_7_ENABLE = (1 << MSK_PJ_DBC_EN_7_bit); 
         
    const uint32_t MSK_PJ_DBC_EN_6_bit = 14;
    const uint32_t MSK_PJ_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_6_DISABLE = (0 << MSK_PJ_DBC_EN_6_bit);
    const uint32_t MSK_PJ_DBC_EN_6_ENABLE = (1 << MSK_PJ_DBC_EN_6_bit); 
          
    const uint32_t MSK_PJ_DBC_EN_5_bit = 13;
    const uint32_t MSK_PJ_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_5_DISABLE = (0 << MSK_PJ_DBC_EN_5_bit);
    const uint32_t MSK_PJ_DBC_EN_5_ENABLE = (1 << MSK_PJ_DBC_EN_5_bit); 
           
    const uint32_t MSK_PJ_DBC_EN_4_bit = 12;
    const uint32_t MSK_PJ_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_4_DISABLE = (0 << MSK_PJ_DBC_EN_4_bit);
    const uint32_t MSK_PJ_DBC_EN_4_ENABLE = (1 << MSK_PJ_DBC_EN_4_bit); 
            
    const uint32_t MSK_PJ_DBC_EN_3_bit = 11;
    const uint32_t MSK_PJ_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_3_DISABLE = (0 << MSK_PJ_DBC_EN_3_bit);
    const uint32_t MSK_PJ_DBC_EN_3_ENABLE = (1 << MSK_PJ_DBC_EN_3_bit); 
             
    const uint32_t MSK_PJ_DBC_EN_2_bit = 10;
    const uint32_t MSK_PJ_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_2_DISABLE = (0 << MSK_PJ_DBC_EN_2_bit);
    const uint32_t MSK_PJ_DBC_EN_2_ENABLE = (1 << MSK_PJ_DBC_EN_2_bit); 
              
    const uint32_t MSK_PJ_DBC_EN_1_bit = 9;
    const uint32_t MSK_PJ_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_1_DISABLE = (0 << MSK_PJ_DBC_EN_1_bit);
    const uint32_t MSK_PJ_DBC_EN_1_ENABLE = (1 << MSK_PJ_DBC_EN_1_bit); 
               
    const uint32_t MSK_PJ_DBC_EN_0_bit = 8;
    const uint32_t MSK_PJ_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_0_DISABLE = (0 << MSK_PJ_DBC_EN_0_bit);
    const uint32_t MSK_PJ_DBC_EN_0_ENABLE = (1 << MSK_PJ_DBC_EN_0_bit); 
 
    const uint32_t PJ_DBJC_EN_7_bit = 7;
    const uint32_t PJ_DBC_EN_7_bitWidth = 1;
    const uint32_t PJ_DBC_EN_7_LOW = (0 << PJ_DBC_EN_7_bit);
    const uint32_t PJ_DBC_EN_7_HIGH = (1 << PJ_DBC_EN_7_bit); 
 
    const uint32_t PJ_DBC_EN_6_bit = 6;
    const uint32_t PJ_DBC_EN_6_bitWidth = 1;
    const uint32_t PJ_DBC_EN_6_LOW = (0 << PJ_DBC_EN_6_bit);
    const uint32_t PJ_DBC_EN_6_HIGH = (1 << PJ_DBC_EN_6_bit); 
 
    const uint32_t PJ_DBC_EN_5_bit = 5;
    const uint32_t PJ_DBC_EN_5_bitWidth = 1;
    const uint32_t PJ_DBC_EN_5_LOW = (0 << PJ_DBC_EN_5_bit);
    const uint32_t PJ_DBC_EN_5_HIGH = (1 << PJ_DBC_EN_5_bit); 
 
    const uint32_t PJ_DBC_EN_4_bit = 4;
    const uint32_t PJ_DBC_EN_4_bitWidth = 1;
    const uint32_t PJ_DBC_EN_4_LOW = (0 << PJ_DBC_EN_4_bit);
    const uint32_t PJ_DBC_EN_4_HIGH = (1 << PJ_DBC_EN_4_bit); 
 
    const uint32_t PJ_DBC_EN_3_bit = 3;
    const uint32_t PJ_DBC_EN_3_bitWidth = 1;
    const uint32_t PJ_DBC_EN_3_LOW = (0 << PJ_DBC_EN_3_bit);
    const uint32_t PJ_DBC_EN_3_HIGH = (1 << PJ_DBC_EN_3_bit); 
 
    const uint32_t PJ_DBC_EN_2_bit = 2;
    const uint32_t PJ_DBC_EN_2_bitWidth = 1;
    const uint32_t PJ_DBC_EN_2_LOW = (0 << PJ_DBC_EN_2_bit);
    const uint32_t PJ_DBC_EN_2_HIGH = (1 << PJ_DBC_EN_2_bit); 
 
    const uint32_t PJ_DBC_EN_1_bit = 1;
    const uint32_t PJ_DBC_EN_1_bitWidth = 1;
    const uint32_t PJ_DBC_EN_1_LOW = (0 << PJ_DBC_EN_1_bit);
    const uint32_t PJ_DBC_EN_1_HIGH = (1 << PJ_DBC_EN_1_bit); 
 
    const uint32_t PJ_DBC_EN_0_bit = 0;
    const uint32_t PJ_DBC_EN_0_bitWidth = 1;
    const uint32_t PJ_DBC_EN_0_LOW = (0 << PJ_DBC_EN_0_bit);
    const uint32_t PJ_DBC_EN_0_HIGH = (1 << PJ_DBC_EN_0_bit); 
 
};

// 9.13.14 GPIO_DB_CTRL_P2_0
struct GPIO_DB_CTRL_PK
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0B8;

    const uint32_t MSK_PK_DBC_EN_7_bit = 15;
    const uint32_t MSK_PK_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_7_DISABLE = (0 << MSK_PK_DBC_EN_7_bit);
    const uint32_t MSK_PK_DBC_EN_7_ENABLE = (1 << MSK_PK_DBC_EN_7_bit); 
         
    const uint32_t MSK_PK_DBC_EN_6_bit = 14;
    const uint32_t MSK_PK_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_6_DISABLE = (0 << MSK_PK_DBC_EN_6_bit);
    const uint32_t MSK_PK_DBC_EN_6_ENABLE = (1 << MSK_PK_DBC_EN_6_bit); 
          
    const uint32_t MSK_PK_DBC_EN_5_bit = 13;
    const uint32_t MSK_PK_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_5_DISABLE = (0 << MSK_PK_DBC_EN_5_bit);
    const uint32_t MSK_PK_DBC_EN_5_ENABLE = (1 << MSK_PK_DBC_EN_5_bit); 
           
    const uint32_t MSK_PK_DBC_EN_4_bit = 12;
    const uint32_t MSK_PK_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_4_DISABLE = (0 << MSK_PK_DBC_EN_4_bit);
    const uint32_t MSK_PK_DBC_EN_4_ENABLE = (1 << MSK_PK_DBC_EN_4_bit); 
            
    const uint32_t MSK_PK_DBC_EN_3_bit = 11;
    const uint32_t MSK_PK_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_3_DISABLE = (0 << MSK_PK_DBC_EN_3_bit);
    const uint32_t MSK_PK_DBC_EN_3_ENABLE = (1 << MSK_PK_DBC_EN_3_bit); 
             
    const uint32_t MSK_PK_DBC_EN_2_bit = 10;
    const uint32_t MSK_PK_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_2_DISABLE = (0 << MSK_PK_DBC_EN_2_bit);
    const uint32_t MSK_PK_DBC_EN_2_ENABLE = (1 << MSK_PK_DBC_EN_2_bit); 
              
    const uint32_t MSK_PK_DBC_EN_1_bit = 9;
    const uint32_t MSK_PK_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_1_DISABLE = (0 << MSK_PK_DBC_EN_1_bit);
    const uint32_t MSK_PK_DBC_EN_1_ENABLE = (1 << MSK_PK_DBC_EN_1_bit); 
               
    const uint32_t MSK_PK_DBC_EN_0_bit = 8;
    const uint32_t MSK_PK_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_0_DISABLE = (0 << MSK_PK_DBC_EN_0_bit);
    const uint32_t MSK_PK_DBC_EN_0_ENABLE = (1 << MSK_PK_DBC_EN_0_bit); 
 
    const uint32_t PK_DBC_EN_7_bit = 7;
    const uint32_t PK_DBC_EN_7_bitWidth = 1;
    const uint32_t PK_DBC_EN_7_LOW = (0 << PK_DBC_EN_7_bit);
    const uint32_t PK_DBC_EN_7_HIGH = (1 << PK_DBC_EN_7_bit); 
 
    const uint32_t PK_DBC_EN_6_bit = 6;
    const uint32_t PK_DBC_EN_6_bitWidth = 1;
    const uint32_t PK_DBC_EN_6_LOW = (0 << PK_DBC_EN_6_bit);
    const uint32_t PK_DBC_EN_6_HIGH = (1 << PK_DBC_EN_6_bit); 
 
    const uint32_t PK_DBC_EN_5_bit = 5;
    const uint32_t PK_DBC_EN_5_bitWidth = 1;
    const uint32_t PK_DBC_EN_5_LOW = (0 << PK_DBC_EN_5_bit);
    const uint32_t PK_DBC_EN_5_HIGH = (1 << PK_DBC_EN_5_bit); 
 
    const uint32_t PK_DBC_EN_4_bit = 4;
    const uint32_t PK_DBC_EN_4_bitWidth = 1;
    const uint32_t PK_DBC_EN_4_LOW = (0 << PK_DBC_EN_4_bit);
    const uint32_t PK_DBC_EN_4_HIGH = (1 << PK_DBC_EN_4_bit); 
 
    const uint32_t PK_DBC_EN_3_bit = 3;
    const uint32_t PK_DBC_EN_3_bitWidth = 1;
    const uint32_t PK_DBC_EN_3_LOW = (0 << PK_DBC_EN_3_bit);
    const uint32_t PK_DBC_EN_3_HIGH = (1 << PK_DBC_EN_3_bit); 
 
    const uint32_t PK_DBC_EN_2_bit = 2;
    const uint32_t PK_DBC_EN_2_bitWidth = 1;
    const uint32_t PK_DBC_EN_2_LOW = (0 << PK_DBC_EN_2_bit);
    const uint32_t PK_DBC_EN_2_HIGH = (1 << PK_DBC_EN_2_bit); 
 
    const uint32_t PK_DBC_EN_1_bit = 1;
    const uint32_t PK_DBC_EN_1_bitWidth = 1;
    const uint32_t PK_DBC_EN_1_LOW = (0 << PK_DBC_EN_1_bit);
    const uint32_t PK_DBC_EN_1_HIGH = (1 << PK_DBC_EN_1_bit); 
 
    const uint32_t PK_DBC_EN_0_bit = 0;
    const uint32_t PK_DBC_EN_0_bitWidth = 1;
    const uint32_t PK_DBC_EN_0_LOW = (0 << PK_DBC_EN_0_bit);
    const uint32_t PK_DBC_EN_0_HIGH = (1 << PK_DBC_EN_0_bit); 
 
};

// 9.13.15 GPIO_DB_CTRL_P3_0
struct GPIO_DB_CTRL_PL
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0BC;

    const uint32_t MSK_PL_DBC_EN_7_bit = 15;
    const uint32_t MSK_PL_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_7_DISABLE = (0 << MSK_PL_DBC_EN_7_bit);
    const uint32_t MSK_PL_DBC_EN_7_ENABLE = (1 << MSK_PL_DBC_EN_7_bit); 
         
    const uint32_t MSK_PL_DBC_EN_6_bit = 14;
    const uint32_t MSK_PL_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_6_DISABLE = (0 << MSK_PL_DBC_EN_6_bit);
    const uint32_t MSK_PL_DBC_EN_6_ENABLE = (1 << MSK_PL_DBC_EN_6_bit); 
          
    const uint32_t MSK_PL_DBC_EN_5_bit = 13;
    const uint32_t MSK_PL_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_5_DISABLE = (0 << MSK_PL_DBC_EN_5_bit);
    const uint32_t MSK_PL_DBC_EN_5_ENABLE = (1 << MSK_PL_DBC_EN_5_bit); 
           
    const uint32_t MSK_PL_DBC_EN_4_bit = 12;
    const uint32_t MSK_PL_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_4_DISABLE = (0 << MSK_PL_DBC_EN_4_bit);
    const uint32_t MSK_PL_DBC_EN_4_ENABLE = (1 << MSK_PL_DBC_EN_4_bit); 
            
    const uint32_t MSK_PL_DBC_EN_3_bit = 11;
    const uint32_t MSK_PL_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_3_DISABLE = (0 << MSK_PL_DBC_EN_3_bit);
    const uint32_t MSK_PL_DBC_EN_3_ENABLE = (1 << MSK_PL_DBC_EN_3_bit); 
             
    const uint32_t MSK_PL_DBC_EN_2_bit = 10;
    const uint32_t MSK_PL_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_2_DISABLE = (0 << MSK_PL_DBC_EN_2_bit);
    const uint32_t MSK_PL_DBC_EN_2_ENABLE = (1 << MSK_PL_DBC_EN_2_bit); 
              
    const uint32_t MSK_PL_DBC_EN_1_bit = 9;
    const uint32_t MSK_PL_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_1_DISABLE = (0 << MSK_PL_DBC_EN_1_bit);
    const uint32_t MSK_PL_DBC_EN_1_ENABLE = (1 << MSK_PL_DBC_EN_1_bit); 
               
    const uint32_t MSK_PL_DBC_EN_0_bit = 8;
    const uint32_t MSK_PL_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_0_DISABLE = (0 << MSK_PL_DBC_EN_0_bit);
    const uint32_t MSK_PL_DBC_EN_0_ENABLE = (1 << MSK_PL_DBC_EN_0_bit); 
 
    const uint32_t PL_DBC_EN_7_bit = 7;
    const uint32_t PL_DBC_EN_7_bitWidth = 1;
    const uint32_t PL_DBC_EN_7_LOW = (0 << PL_DBC_EN_7_bit);
    const uint32_t PL_DBC_EN_7_HIGH = (1 << PL_DBC_EN_7_bit); 
 
    const uint32_t PL_DBC_EN_6_bit = 6;
    const uint32_t PL_DBC_EN_6_bitWidth = 1;
    const uint32_t PL_DBC_EN_6_LOW = (0 << PL_DBC_EN_6_bit);
    const uint32_t PL_DBC_EN_6_HIGH = (1 << PL_DBC_EN_6_bit); 
 
    const uint32_t PL_DBC_EN_5_bit = 5;
    const uint32_t PL_DBC_EN_5_bitWidth = 1;
    const uint32_t PL_DBC_EN_5_LOW = (0 << PL_DBC_EN_5_bit);
    const uint32_t PL_DBC_EN_5_HIGH = (1 << PL_DBC_EN_5_bit); 
 
    const uint32_t PL_DBC_EN_4_bit = 4;
    const uint32_t PL_DBC_EN_4_bitWidth = 1;
    const uint32_t PL_DBC_EN_4_LOW = (0 << PL_DBC_EN_4_bit);
    const uint32_t PL_DBC_EN_4_HIGH = (1 << PL_DBC_EN_4_bit); 
 
    const uint32_t PL_DBC_EN_3_bit = 3;
    const uint32_t PL_DBC_EN_3_bitWidth = 1;
    const uint32_t PL_DBC_EN_3_LOW = (0 << PL_DBC_EN_3_bit);
    const uint32_t PL_DBC_EN_3_HIGH = (1 << PL_DBC_EN_3_bit); 
 
    const uint32_t PL_DBC_EN_2_bit = 2;
    const uint32_t PL_DBC_EN_2_bitWidth = 1;
    const uint32_t PL_DBC_EN_2_LOW = (0 << PL_DBC_EN_2_bit);
    const uint32_t PL_DBC_EN_2_HIGH = (1 << PL_DBC_EN_2_bit); 
 
    const uint32_t PL_DBC_EN_1_bit = 1;
    const uint32_t PL_DBC_EN_1_bitWidth = 1;
    const uint32_t PL_DBC_EN_1_LOW = (0 << PL_DBC_EN_1_bit);
    const uint32_t PL_DBC_EN_1_HIGH = (1 << PL_DBC_EN_1_bit); 
 
    const uint32_t PL_DBC_EN_0_bit = 0;
    const uint32_t PL_DBC_EN_0_bitWidth = 1;
    const uint32_t PL_DBC_EN_0_LOW = (0 << PL_DBC_EN_0_bit);
    const uint32_t PL_DBC_EN_0_HIGH = (1 << PL_DBC_EN_0_bit); 
 
};

/**
 * 9.13.16 GPIO_MSK_INT_STA_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_STATUS_I
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0C0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_J
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0C4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_K
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0C8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_L
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0CC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.17 GPIO_MSK_INT_ENB_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_I
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0D0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_J
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0D4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_K
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0D8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_L
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0DC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.18 GPIO_MSK_INT_LVL_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_I
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0E0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_J
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0E4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_K
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0E8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_L
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0EC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

// 9.13.19 GPIO_DB_CNT_P0_0
struct GPIO_DB_CNT_PI
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0F0;

    const uint32_t PI_DBC_CNT_bit = 0;
    const uint32_t PI_DBC_CNT_bitWidth 8;
    const uint32_t PI_DBC_CNT_0 = (0 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_1 = (1 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_2 = (2 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_3 = (3 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_4 = (4 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_5 = (5 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_6 = (6 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_7 = (7 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_8 = (8 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_9 = (9 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_10 = (10 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_11 = (11 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_12 = (12 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_13 = (13 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_14 = (14 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_15 = (15 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_16 = (16 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_17 = (17 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_18 = (18 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_19 = (19 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_20 = (20 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_21 = (21 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_22 = (22 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_23 = (23 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_24 = (24 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_25 = (25 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_26 = (26 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_27 = (27 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_28 = (28 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_29 = (29 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_30 = (30 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_31 = (31 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_32 = (32 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_33 = (33 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_34 = (34 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_35 = (35 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_36 = (36 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_37 = (37 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_38 = (38 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_39 = (39 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_40 = (40 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_41 = (41 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_42 = (42 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_43 = (43 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_44 = (44 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_45 = (45 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_46 = (46 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_47 = (47 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_48 = (48 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_49 = (49 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_50 = (50 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_51 = (51 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_52 = (52 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_53 = (53 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_54 = (54 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_55 = (55 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_56 = (56 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_57 = (57 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_58 = (58 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_59 = (59 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_60 = (60 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_61 = (61 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_62 = (62 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_63 = (63 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_64 = (64 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_65 = (65 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_66 = (66 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_67 = (67 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_68 = (68 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_69 = (69 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_70 = (70 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_71 = (71 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_72 = (72 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_73 = (73 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_74 = (74 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_75 = (75 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_76 = (76 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_77 = (77 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_78 = (78 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_79 = (79 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_80 = (80 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_81 = (81 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_82 = (82 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_83 = (83 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_84 = (84 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_85 = (85 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_86 = (86 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_87 = (87 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_88 = (88 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_89 = (89 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_90 = (90 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_91 = (91 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_92 = (92 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_93 = (93 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_94 = (94 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_95 = (95 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_96 = (96 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_97 = (97 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_98 = (98 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_99 = (99 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_100 = (100 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_101 = (101 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_102 = (102 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_103 = (103 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_104 = (104 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_105 = (105 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_106 = (106 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_107 = (107 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_108 = (108 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_109 = (109 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_110 = (110 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_111 = (111 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_112 = (112 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_113 = (113 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_114 = (114 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_115 = (115 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_116 = (116 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_117 = (117 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_118 = (118 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_119 = (119 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_120 = (120 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_121 = (121 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_122 = (122 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_123 = (123 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_124 = (124 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_125 = (125 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_126 = (126 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_127 = (127 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_128 = (128 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_129 = (129 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_130 = (130 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_131 = (131 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_132 = (132 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_133 = (133 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_134 = (134 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_135 = (135 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_136 = (136 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_137 = (137 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_138 = (138 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_139 = (139 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_140 = (140 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_141 = (141 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_142 = (142 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_143 = (143 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_144 = (144 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_145 = (145 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_146 = (146 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_147 = (147 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_148 = (148 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_149 = (149 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_150 = (150 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_151 = (151 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_152 = (152 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_153 = (153 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_154 = (154 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_155 = (155 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_156 = (156 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_157 = (157 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_158 = (158 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_159 = (159 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_160 = (160 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_161 = (161 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_162 = (162 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_163 = (163 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_164 = (164 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_165 = (165 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_166 = (166 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_167 = (167 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_168 = (168 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_169 = (169 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_170 = (170 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_171 = (171 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_172 = (172 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_173 = (173 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_174 = (174 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_175 = (175 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_176 = (176 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_177 = (177 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_178 = (178 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_179 = (179 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_180 = (180 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_181 = (181 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_182 = (182 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_183 = (183 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_184 = (184 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_185 = (185 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_186 = (186 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_187 = (187 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_188 = (188 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_189 = (189 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_190 = (190 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_191 = (191 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_192 = (192 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_193 = (193 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_194 = (194 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_195 = (195 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_196 = (196 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_197 = (197 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_198 = (198 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_199 = (199 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_200 = (200 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_201 = (201 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_202 = (202 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_203 = (203 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_204 = (204 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_205 = (205 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_206 = (206 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_207 = (207 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_208 = (208 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_209 = (209 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_210 = (210 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_211 = (211 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_212 = (212 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_213 = (213 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_214 = (214 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_215 = (215 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_216 = (216 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_217 = (217 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_218 = (218 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_219 = (219 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_220 = (220 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_221 = (221 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_222 = (222 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_223 = (223 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_224 = (224 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_225 = (225 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_226 = (226 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_227 = (227 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_228 = (228 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_229 = (229 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_230 = (230 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_231 = (231 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_232 = (232 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_233 = (233 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_234 = (234 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_235 = (235 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_236 = (236 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_237 = (237 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_238 = (238 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_239 = (239 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_240 = (240 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_241 = (241 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_242 = (242 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_243 = (243 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_244 = (244 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_245 = (245 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_246 = (246 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_247 = (247 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_248 = (248 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_249 = (249 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_250 = (250 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_251 = (251 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_252 = (252 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_253 = (253 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_254 = (254 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_255 = (255 << PI_DBC_CNT_bit);

};

// 9.13.20 GPIO_DB_CNT_P1_0
struct GPIO_DB_CNT_PJ
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0F4;

    const uint32_t PJ_DBC_CNT_bit = 0;
    const uint32_t PJ_DBC_CNT_bitWidth 8;
    const uint32_t PJ_DBC_CNT_0 = (0 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_1 = (1 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_2 = (2 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_3 = (3 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_4 = (4 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_5 = (5 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_6 = (6 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_7 = (7 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_8 = (8 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_9 = (9 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_10 = (10 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_11 = (11 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_12 = (12 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_13 = (13 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_14 = (14 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_15 = (15 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_16 = (16 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_17 = (17 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_18 = (18 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_19 = (19 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_20 = (20 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_21 = (21 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_22 = (22 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_23 = (23 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_24 = (24 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_25 = (25 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_26 = (26 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_27 = (27 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_28 = (28 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_29 = (29 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_30 = (30 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_31 = (31 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_32 = (32 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_33 = (33 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_34 = (34 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_35 = (35 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_36 = (36 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_37 = (37 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_38 = (38 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_39 = (39 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_40 = (40 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_41 = (41 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_42 = (42 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_43 = (43 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_44 = (44 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_45 = (45 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_46 = (46 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_47 = (47 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_48 = (48 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_49 = (49 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_50 = (50 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_51 = (51 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_52 = (52 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_53 = (53 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_54 = (54 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_55 = (55 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_56 = (56 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_57 = (57 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_58 = (58 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_59 = (59 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_60 = (60 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_61 = (61 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_62 = (62 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_63 = (63 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_64 = (64 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_65 = (65 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_66 = (66 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_67 = (67 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_68 = (68 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_69 = (69 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_70 = (70 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_71 = (71 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_72 = (72 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_73 = (73 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_74 = (74 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_75 = (75 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_76 = (76 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_77 = (77 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_78 = (78 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_79 = (79 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_80 = (80 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_81 = (81 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_82 = (82 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_83 = (83 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_84 = (84 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_85 = (85 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_86 = (86 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_87 = (87 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_88 = (88 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_89 = (89 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_90 = (90 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_91 = (91 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_92 = (92 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_93 = (93 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_94 = (94 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_95 = (95 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_96 = (96 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_97 = (97 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_98 = (98 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_99 = (99 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_100 = (100 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_101 = (101 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_102 = (102 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_103 = (103 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_104 = (104 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_105 = (105 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_106 = (106 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_107 = (107 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_108 = (108 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_109 = (109 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_110 = (110 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_111 = (111 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_112 = (112 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_113 = (113 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_114 = (114 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_115 = (115 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_116 = (116 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_117 = (117 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_118 = (118 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_119 = (119 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_120 = (120 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_121 = (121 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_122 = (122 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_123 = (123 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_124 = (124 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_125 = (125 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_126 = (126 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_127 = (127 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_128 = (128 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_129 = (129 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_130 = (130 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_131 = (131 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_132 = (132 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_133 = (133 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_134 = (134 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_135 = (135 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_136 = (136 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_137 = (137 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_138 = (138 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_139 = (139 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_140 = (140 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_141 = (141 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_142 = (142 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_143 = (143 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_144 = (144 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_145 = (145 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_146 = (146 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_147 = (147 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_148 = (148 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_149 = (149 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_150 = (150 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_151 = (151 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_152 = (152 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_153 = (153 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_154 = (154 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_155 = (155 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_156 = (156 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_157 = (157 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_158 = (158 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_159 = (159 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_160 = (160 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_161 = (161 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_162 = (162 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_163 = (163 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_164 = (164 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_165 = (165 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_166 = (166 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_167 = (167 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_168 = (168 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_169 = (169 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_170 = (170 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_171 = (171 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_172 = (172 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_173 = (173 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_174 = (174 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_175 = (175 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_176 = (176 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_177 = (177 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_178 = (178 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_179 = (179 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_180 = (180 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_181 = (181 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_182 = (182 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_183 = (183 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_184 = (184 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_185 = (185 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_186 = (186 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_187 = (187 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_188 = (188 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_189 = (189 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_190 = (190 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_191 = (191 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_192 = (192 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_193 = (193 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_194 = (194 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_195 = (195 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_196 = (196 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_197 = (197 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_198 = (198 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_199 = (199 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_200 = (200 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_201 = (201 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_202 = (202 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_203 = (203 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_204 = (204 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_205 = (205 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_206 = (206 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_207 = (207 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_208 = (208 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_209 = (209 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_210 = (210 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_211 = (211 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_212 = (212 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_213 = (213 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_214 = (214 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_215 = (215 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_216 = (216 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_217 = (217 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_218 = (218 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_219 = (219 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_220 = (220 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_221 = (221 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_222 = (222 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_223 = (223 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_224 = (224 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_225 = (225 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_226 = (226 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_227 = (227 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_228 = (228 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_229 = (229 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_230 = (230 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_231 = (231 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_232 = (232 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_233 = (233 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_234 = (234 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_235 = (235 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_236 = (236 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_237 = (237 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_238 = (238 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_239 = (239 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_240 = (240 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_241 = (241 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_242 = (242 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_243 = (243 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_244 = (244 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_245 = (245 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_246 = (246 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_247 = (247 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_248 = (248 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_249 = (249 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_250 = (250 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_251 = (251 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_252 = (252 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_253 = (253 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_254 = (254 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_255 = (255 << PJ_DBC_CNT_bit);

};

// 9.13.21 GPIO_DB_CNT_P2_0
struct GPIO_DB_CNT_PK
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0F8;

    const uint32_t PK_DBC_CNT_bit = 0;
    const uint32_t PK_DBC_CNT_bitWidth 8;
    const uint32_t PK_DBC_CNT_0 = (0 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_1 = (1 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_2 = (2 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_3 = (3 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_4 = (4 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_5 = (5 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_6 = (6 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_7 = (7 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_8 = (8 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_9 = (9 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_10 = (10 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_11 = (11 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_12 = (12 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_13 = (13 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_14 = (14 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_15 = (15 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_16 = (16 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_17 = (17 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_18 = (18 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_19 = (19 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_20 = (20 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_21 = (21 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_22 = (22 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_23 = (23 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_24 = (24 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_25 = (25 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_26 = (26 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_27 = (27 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_28 = (28 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_29 = (29 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_30 = (30 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_31 = (31 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_32 = (32 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_33 = (33 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_34 = (34 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_35 = (35 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_36 = (36 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_37 = (37 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_38 = (38 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_39 = (39 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_40 = (40 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_41 = (41 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_42 = (42 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_43 = (43 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_44 = (44 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_45 = (45 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_46 = (46 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_47 = (47 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_48 = (48 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_49 = (49 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_50 = (50 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_51 = (51 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_52 = (52 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_53 = (53 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_54 = (54 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_55 = (55 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_56 = (56 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_57 = (57 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_58 = (58 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_59 = (59 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_60 = (60 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_61 = (61 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_62 = (62 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_63 = (63 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_64 = (64 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_65 = (65 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_66 = (66 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_67 = (67 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_68 = (68 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_69 = (69 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_70 = (70 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_71 = (71 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_72 = (72 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_73 = (73 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_74 = (74 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_75 = (75 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_76 = (76 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_77 = (77 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_78 = (78 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_79 = (79 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_80 = (80 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_81 = (81 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_82 = (82 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_83 = (83 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_84 = (84 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_85 = (85 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_86 = (86 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_87 = (87 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_88 = (88 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_89 = (89 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_90 = (90 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_91 = (91 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_92 = (92 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_93 = (93 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_94 = (94 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_95 = (95 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_96 = (96 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_97 = (97 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_98 = (98 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_99 = (99 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_100 = (100 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_101 = (101 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_102 = (102 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_103 = (103 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_104 = (104 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_105 = (105 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_106 = (106 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_107 = (107 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_108 = (108 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_109 = (109 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_110 = (110 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_111 = (111 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_112 = (112 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_113 = (113 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_114 = (114 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_115 = (115 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_116 = (116 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_117 = (117 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_118 = (118 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_119 = (119 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_120 = (120 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_121 = (121 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_122 = (122 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_123 = (123 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_124 = (124 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_125 = (125 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_126 = (126 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_127 = (127 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_128 = (128 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_129 = (129 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_130 = (130 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_131 = (131 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_132 = (132 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_133 = (133 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_134 = (134 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_135 = (135 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_136 = (136 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_137 = (137 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_138 = (138 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_139 = (139 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_140 = (140 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_141 = (141 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_142 = (142 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_143 = (143 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_144 = (144 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_145 = (145 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_146 = (146 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_147 = (147 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_148 = (148 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_149 = (149 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_150 = (150 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_151 = (151 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_152 = (152 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_153 = (153 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_154 = (154 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_155 = (155 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_156 = (156 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_157 = (157 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_158 = (158 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_159 = (159 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_160 = (160 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_161 = (161 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_162 = (162 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_163 = (163 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_164 = (164 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_165 = (165 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_166 = (166 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_167 = (167 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_168 = (168 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_169 = (169 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_170 = (170 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_171 = (171 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_172 = (172 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_173 = (173 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_174 = (174 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_175 = (175 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_176 = (176 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_177 = (177 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_178 = (178 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_179 = (179 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_180 = (180 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_181 = (181 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_182 = (182 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_183 = (183 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_184 = (184 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_185 = (185 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_186 = (186 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_187 = (187 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_188 = (188 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_189 = (189 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_190 = (190 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_191 = (191 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_192 = (192 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_193 = (193 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_194 = (194 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_195 = (195 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_196 = (196 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_197 = (197 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_198 = (198 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_199 = (199 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_200 = (200 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_201 = (201 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_202 = (202 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_203 = (203 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_204 = (204 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_205 = (205 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_206 = (206 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_207 = (207 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_208 = (208 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_209 = (209 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_210 = (210 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_211 = (211 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_212 = (212 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_213 = (213 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_214 = (214 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_215 = (215 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_216 = (216 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_217 = (217 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_218 = (218 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_219 = (219 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_220 = (220 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_221 = (221 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_222 = (222 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_223 = (223 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_224 = (224 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_225 = (225 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_226 = (226 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_227 = (227 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_228 = (228 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_229 = (229 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_230 = (230 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_231 = (231 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_232 = (232 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_233 = (233 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_234 = (234 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_235 = (235 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_236 = (236 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_237 = (237 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_238 = (238 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_239 = (239 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_240 = (240 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_241 = (241 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_242 = (242 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_243 = (243 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_244 = (244 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_245 = (245 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_246 = (246 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_247 = (247 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_248 = (248 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_249 = (249 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_250 = (250 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_251 = (251 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_252 = (252 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_253 = (253 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_254 = (254 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_255 = (255 << PK_DBC_CNT_bit);

};

// 9.13.22 GPIO_DB_CNT_P3_0
struct GPIO_DB_CNT_PL
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0FC;

    const uint32_t PL_DBC_CNT_bit = 0;
    const uint32_t PL_DBC_CNT_bitWidth 8;
    const uint32_t PL_DBC_CNT_0 = (0 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_1 = (1 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_2 = (2 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_3 = (3 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_4 = (4 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_5 = (5 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_6 = (6 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_7 = (7 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_8 = (8 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_9 = (9 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_10 = (10 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_11 = (11 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_12 = (12 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_13 = (13 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_14 = (14 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_15 = (15 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_16 = (16 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_17 = (17 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_18 = (18 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_19 = (19 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_20 = (20 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_21 = (21 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_22 = (22 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_23 = (23 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_24 = (24 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_25 = (25 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_26 = (26 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_27 = (27 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_28 = (28 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_29 = (29 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_30 = (30 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_31 = (31 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_32 = (32 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_33 = (33 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_34 = (34 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_35 = (35 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_36 = (36 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_37 = (37 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_38 = (38 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_39 = (39 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_40 = (40 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_41 = (41 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_42 = (42 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_43 = (43 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_44 = (44 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_45 = (45 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_46 = (46 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_47 = (47 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_48 = (48 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_49 = (49 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_50 = (50 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_51 = (51 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_52 = (52 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_53 = (53 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_54 = (54 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_55 = (55 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_56 = (56 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_57 = (57 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_58 = (58 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_59 = (59 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_60 = (60 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_61 = (61 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_62 = (62 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_63 = (63 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_64 = (64 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_65 = (65 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_66 = (66 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_67 = (67 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_68 = (68 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_69 = (69 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_70 = (70 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_71 = (71 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_72 = (72 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_73 = (73 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_74 = (74 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_75 = (75 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_76 = (76 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_77 = (77 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_78 = (78 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_79 = (79 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_80 = (80 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_81 = (81 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_82 = (82 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_83 = (83 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_84 = (84 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_85 = (85 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_86 = (86 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_87 = (87 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_88 = (88 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_89 = (89 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_90 = (90 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_91 = (91 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_92 = (92 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_93 = (93 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_94 = (94 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_95 = (95 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_96 = (96 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_97 = (97 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_98 = (98 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_99 = (99 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_100 = (100 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_101 = (101 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_102 = (102 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_103 = (103 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_104 = (104 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_105 = (105 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_106 = (106 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_107 = (107 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_108 = (108 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_109 = (109 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_110 = (110 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_111 = (111 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_112 = (112 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_113 = (113 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_114 = (114 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_115 = (115 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_116 = (116 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_117 = (117 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_118 = (118 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_119 = (119 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_120 = (120 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_121 = (121 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_122 = (122 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_123 = (123 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_124 = (124 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_125 = (125 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_126 = (126 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_127 = (127 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_128 = (128 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_129 = (129 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_130 = (130 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_131 = (131 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_132 = (132 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_133 = (133 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_134 = (134 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_135 = (135 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_136 = (136 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_137 = (137 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_138 = (138 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_139 = (139 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_140 = (140 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_141 = (141 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_142 = (142 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_143 = (143 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_144 = (144 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_145 = (145 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_146 = (146 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_147 = (147 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_148 = (148 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_149 = (149 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_150 = (150 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_151 = (151 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_152 = (152 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_153 = (153 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_154 = (154 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_155 = (155 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_156 = (156 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_157 = (157 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_158 = (158 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_159 = (159 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_160 = (160 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_161 = (161 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_162 = (162 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_163 = (163 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_164 = (164 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_165 = (165 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_166 = (166 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_167 = (167 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_168 = (168 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_169 = (169 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_170 = (170 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_171 = (171 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_172 = (172 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_173 = (173 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_174 = (174 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_175 = (175 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_176 = (176 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_177 = (177 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_178 = (178 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_179 = (179 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_180 = (180 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_181 = (181 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_182 = (182 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_183 = (183 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_184 = (184 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_185 = (185 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_186 = (186 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_187 = (187 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_188 = (188 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_189 = (189 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_190 = (190 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_191 = (191 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_192 = (192 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_193 = (193 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_194 = (194 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_195 = (195 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_196 = (196 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_197 = (197 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_198 = (198 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_199 = (199 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_200 = (200 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_201 = (201 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_202 = (202 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_203 = (203 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_204 = (204 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_205 = (205 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_206 = (206 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_207 = (207 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_208 = (208 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_209 = (209 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_210 = (210 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_211 = (211 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_212 = (212 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_213 = (213 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_214 = (214 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_215 = (215 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_216 = (216 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_217 = (217 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_218 = (218 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_219 = (219 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_220 = (220 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_221 = (221 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_222 = (222 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_223 = (223 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_224 = (224 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_225 = (225 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_226 = (226 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_227 = (227 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_228 = (228 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_229 = (229 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_230 = (230 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_231 = (231 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_232 = (232 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_233 = (233 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_234 = (234 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_235 = (235 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_236 = (236 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_237 = (237 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_238 = (238 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_239 = (239 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_240 = (240 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_241 = (241 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_242 = (242 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_243 = (243 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_244 = (244 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_245 = (245 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_246 = (246 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_247 = (247 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_248 = (248 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_249 = (249 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_250 = (250 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_251 = (251 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_252 = (252 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_253 = (253 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_254 = (254 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_255 = (255 << PL_DBC_CNT_bit);

};

// GPIO Controller 4 – Start Addr 6000:d300

/**
 * 9.13.1 GPIO_CNF_0 
 *
 * Designates whether each pin operates as a GPIO or as an SFIO. By default all 
 * pins come up in SFIO mode. These can be programmed to GPIO mode at any stage.
 *
 * Lock bits are used to control the access to the CNF and OE registers. When 
 * set, no one can write to the CNF and OE bits. They can be programmed ONLY 
 * during Boot and get reset by chip reset only.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_CNF_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x000;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x004;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x008;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x00C;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

/**
 * 9.13.2 GPIO_OE_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid.
 * 
 * The set of registers below are used to either drive the signal out or as an 
 * Input. This needs to be programmed depending upon whether the pin needs to 
 * be in either Input or Output.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OE_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x010;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x014;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x018;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x01C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

/**
 * 9.13.3 GPIO_OUT_0
 *
 * GPIO_CNF.x=1 (in GPIO mode) AND GPIO_OE.x=1 (GPIO output enabled) must be 
 * true for this to be valid. This register will take affect only in GPIO 
 * mode. This register is used to drive the value out on a given pin.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OUT_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x020;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x024;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x028;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x02C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * 9.13.4 GPIO_IN_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid. This 
 * is a read-only register used to read the value from the pin. This is an 
 * array of 4 identical register entries; the register fields below apply to each entry.
 */

struct GPIO_IN_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x030;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x034;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x038;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x03C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * All GPIO inputs can be independently programmed to generate an interrupt 
 * request.
 * 
 * In addition, the individual trigger level for interrupt on each input pin 
 * can be programmed as either active-on-high or active-on-low. For example, to 
 * program an active-on-high interrupt on bit 3 of GPIO-PORT_C, write '1' into 
 * bit 3 of GPIO_INT.LVL.C register (this sets the interrupt to be 
 * active-on-high), and then write '1' into bit 3 of GPIO_INT.ENB.C (this 
 * enables interrupt on the named bit).
 *
 * The interrupt flag status can be read in the appropriate bit of the 
 * GPIO_INT.STA.C register. Once the programmed interrupt occurs, status should 
 * be cleared by writing into the appropriate bit of the GPIO_INT.CLR.C 
 * register. Note that the interrupt thus generated is routed to the processor 
 * only if the corresponding bit for GPIO interrupts in the Secondary interrupt
 *  controller is enabled.
 */

/**
 * 9.13.5 GPIO_INT_STA_0
 *
 * GPIO mode (GPIO_CNF.x=1) and GPIO_INT.ENB.x=1 must be true for this condition 
 * to be valid. Every GPIO pin generates an Interrupt when switching from 
 * Low-High to High-Low. Interrupt status for each port is saved in an 
 * Interrupt status register.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_STATUS_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x040;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x044;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x048;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x04C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};


/**
 * 9.13.6 GPIO_INT_ENB_0
 *
 * Every bit of the GPIO pin has an enable which, when enabled, routes the 
 * Interrupt to the Interrupt controller. This is an array of 4 identical 
 * register entries; the register fields below apply to each entry.
 */

struct GPIO_INT_ENABLE_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x050;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x054;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x058;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x05C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

/**
 * 9.13.7 GPIO_INT_LVL_0
 *
 * The GPIO can detect an interrupt for any edge- or level-sensitive signal.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry
 */

struct GPIO_INT_LEVEL_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x060;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x064;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x068;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x06C;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};


/**
 * 9.13.8 GPIO_INT_CLR_0
 * 
 * This write-only register clears the Interrupts that are set. This is valid 
 * only in GPIO mode when GPIO_INT.ENB is set.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_CLEAR_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x070;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x074;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x078;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x07C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

/**
 * 9.13.9 GPIO_MSK_CNF_0
 *
 * Each register is provided with an individual 16-bit version for enabling 
 * Masked Writes to avoid a Read-Modify-Write operation by the firmware. The 
 * exception is for the interrupt clear register, whose functionality is 
 * combined in the interrupt status register. Individual pins only can be 
 * programmed by suitably enabling the write masks in the upper byte of these 
 * 16-bit registers.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_CNF_M
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x080;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_N
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x084;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_O
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x088;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_P
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x08C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.10 GPIO_MSK_OE_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OE_M
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x090;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_N
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x094;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_O
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x098;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_P
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x09C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.11 GPIO_MSK_OUT_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OUT_M
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0A0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_N
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0A4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_O
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0A8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_P
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0AC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.12 GPIO_DB_CTRL_P0_0
 */

struct GPIO_DB_CTRL_PM
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0B0;

    const uint32_t MSK_PM_DBC_EN_7_bit = 15;
    const uint32_t MSK_PM_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PM_DBC_EN_7_DISABLE = (0 << MSK_PM_DBC_EN_7_bit);
    const uint32_t MSK_PM_DBC_EN_7_ENABLE = (1 << MSK_PM_DBC_EN_7_bit); 
         
    const uint32_t MSK_PM_DBC_EN_6_bit = 14;
    const uint32_t MSK_PM_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PM_DBC_EN_6_DISABLE = (0 << MSK_PM_DBC_EN_6_bit);
    const uint32_t MSK_PM_DBC_EN_6_ENABLE = (1 << MSK_PM_DBC_EN_6_bit); 
          
    const uint32_t MSK_PM_DBC_EN_5_bit = 13;
    const uint32_t MSK_PM_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PM_DBC_EN_5_DISABLE = (0 << MSK_PM_DBC_EN_5_bit);
    const uint32_t MSK_PM_DBC_EN_5_ENABLE = (1 << MSK_PM_DBC_EN_5_bit); 
           
    const uint32_t MSK_PM_DBC_EN_4_bit = 12;
    const uint32_t MSK_PM_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PM_DBC_EN_4_DISABLE = (0 << MSK_PM_DBC_EN_4_bit);
    const uint32_t MSK_PM_DBC_EN_4_ENABLE = (1 << MSK_PM_DBC_EN_4_bit); 
            
    const uint32_t MSK_PM_DBC_EN_3_bit = 11;
    const uint32_t MSK_PM_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PM_DBC_EN_3_DISABLE = (0 << MSK_PM_DBC_EN_3_bit);
    const uint32_t MSK_PM_DBC_EN_3_ENABLE = (1 << MSK_PM_DBC_EN_3_bit); 
             
    const uint32_t MSK_PM_DBC_EN_2_bit = 10;
    const uint32_t MSK_PM_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PM_DBC_EN_2_DISABLE = (0 << MSK_PM_DBC_EN_2_bit);
    const uint32_t MSK_PM_DBC_EN_2_ENABLE = (1 << MSK_PM_DBC_EN_2_bit); 
              
    const uint32_t MSK_PM_DBC_EN_1_bit = 9;
    const uint32_t MSK_PM_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PM_DBC_EN_1_DISABLE = (0 << MSK_PM_DBC_EN_1_bit);
    const uint32_t MSK_PM_DBC_EN_1_ENABLE = (1 << MSK_PM_DBC_EN_1_bit); 
               
    const uint32_t MSK_PI_DBC_EN_0_bit = 8;
    const uint32_t MSK_PI_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_0_DISABLE = (0 << MSK_PM_DBC_EN_0_bit);
    const uint32_t MSK_PI_DBC_EN_0_ENABLE = (1 << MSK_PM_DBC_EN_0_bit); 
 
    const uint32_t PM_DBC_EN_7_bit = 7;
    const uint32_t PM_DBC_EN_7_bitWidth = 1;
    const uint32_t PM_DBC_EN_7_LOW = (0 << PM_DBC_EN_7_bit);
    const uint32_t PM_DBC_EN_7_HIGH = (1 << PM_DBC_EN_7_bit); 
 
    const uint32_t PM_DBC_EN_6_bit = 6;
    const uint32_t PM_DBC_EN_6_bitWidth = 1;
    const uint32_t PM_DBC_EN_6_LOW = (0 << PM_DBC_EN_6_bit);
    const uint32_t PM_DBC_EN_6_HIGH = (1 << PM_DBC_EN_6_bit); 
 
    const uint32_t PM_DBC_EN_5_bit = 5;
    const uint32_t PM_DBC_EN_5_bitWidth = 1;
    const uint32_t PM_DBC_EN_5_LOW = (0 << PM_DBC_EN_5_bit);
    const uint32_t PM_DBC_EN_5_HIGH = (1 << PM_DBC_EN_5_bit); 
 
    const uint32_t PM_DBC_EN_4_bit = 4;
    const uint32_t PM_DBC_EN_4_bitWidth = 1;
    const uint32_t PM_DBC_EN_4_LOW = (0 << PM_DBC_EN_4_bit);
    const uint32_t PM_DBC_EN_4_HIGH = (1 << PM_DBC_EN_4_bit); 
 
    const uint32_t PM_DBC_EN_3_bit = 3;
    const uint32_t PM_DBC_EN_3_bitWidth = 1;
    const uint32_t PM_DBC_EN_3_LOW = (0 << PM_DBC_EN_3_bit);
    const uint32_t PM_DBC_EN_3_HIGH = (1 << PM_DBC_EN_3_bit); 
 
    const uint32_t PM_DBC_EN_2_bit = 2;
    const uint32_t PM_DBC_EN_2_bitWidth = 1;
    const uint32_t PM_DBC_EN_2_LOW = (0 << PM_DBC_EN_2_bit);
    const uint32_t PM_DBC_EN_2_HIGH = (1 << PM_DBC_EN_2_bit); 
 
    const uint32_t PM_DBC_EN_1_bit = 1;
    const uint32_t PM_DBC_EN_1_bitWidth = 1;
    const uint32_t PM_DBC_EN_1_LOW = (0 << PM_DBC_EN_1_bit);
    const uint32_t PM_DBC_EN_1_HIGH = (1 << PM_DBC_EN_1_bit); 
 
    const uint32_t PM_DBC_EN_0_bit = 0;
    const uint32_t PM_DBC_EN_0_bitWidth = 1;
    const uint32_t PM_DBC_EN_0_LOW = (0 << PM_DBC_EN_0_bit);
    const uint32_t PM_DBC_EN_0_HIGH = (1 << PM_DBC_EN_0_bit); 
 
};

// 9.13.13 GPIO_DB_CTRL_P1_0
struct GPIO_DB_CTRL_PN
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0B4;

    const uint32_t MSK_PN_DBC_EN_7_bit = 15;
    const uint32_t MSK_PN_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_7_DISABLE = (0 << MSK_PN_DBC_EN_7_bit);
    const uint32_t MSK_PN_DBC_EN_7_ENABLE = (1 << MSK_PN_DBC_EN_7_bit); 
         
    const uint32_t MSK_PN_DBC_EN_6_bit = 14;
    const uint32_t MSK_PN_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_6_DISABLE = (0 << MSK_PN_DBC_EN_6_bit);
    const uint32_t MSK_PN_DBC_EN_6_ENABLE = (1 << MSK_PN_DBC_EN_6_bit); 
          
    const uint32_t MSK_PN_DBC_EN_5_bit = 13;
    const uint32_t MSK_PN_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_5_DISABLE = (0 << MSK_PN_DBC_EN_5_bit);
    const uint32_t MSK_PN_DBC_EN_5_ENABLE = (1 << MSK_PN_DBC_EN_5_bit); 
           
    const uint32_t MSK_PN_DBC_EN_4_bit = 12;
    const uint32_t MSK_PN_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_4_DISABLE = (0 << MSK_PN_DBC_EN_4_bit);
    const uint32_t MSK_PN_DBC_EN_4_ENABLE = (1 << MSK_PN_DBC_EN_4_bit); 
            
    const uint32_t MSK_PN_DBC_EN_3_bit = 11;
    const uint32_t MSK_PN_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_3_DISABLE = (0 << MSK_PN_DBC_EN_3_bit);
    const uint32_t MSK_PN_DBC_EN_3_ENABLE = (1 << MSK_PN_DBC_EN_3_bit); 
             
    const uint32_t MSK_PN_DBC_EN_2_bit = 10;
    const uint32_t MSK_PN_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_2_DISABLE = (0 << MSK_PN_DBC_EN_2_bit);
    const uint32_t MSK_PN_DBC_EN_2_ENABLE = (1 << MSK_PN_DBC_EN_2_bit); 
              
    const uint32_t MSK_PN_DBC_EN_1_bit = 9;
    const uint32_t MSK_PN_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_1_DISABLE = (0 << MSK_PN_DBC_EN_1_bit);
    const uint32_t MSK_PN_DBC_EN_1_ENABLE = (1 << MSK_PN_DBC_EN_1_bit); 
               
    const uint32_t MSK_PN_DBC_EN_0_bit = 8;
    const uint32_t MSK_PN_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_0_DISABLE = (0 << MSK_PN_DBC_EN_0_bit);
    const uint32_t MSK_PN_DBC_EN_0_ENABLE = (1 << MSK_PN_DBC_EN_0_bit); 
 
    const uint32_t PN_DBJC_EN_7_bit = 7;
    const uint32_t PN_DBC_EN_7_bitWidth = 1;
    const uint32_t PN_DBC_EN_7_LOW = (0 << PN_DBC_EN_7_bit);
    const uint32_t PN_DBC_EN_7_HIGH = (1 << PN_DBC_EN_7_bit); 
 
    const uint32_t PN_DBC_EN_6_bit = 6;
    const uint32_t PN_DBC_EN_6_bitWidth = 1;
    const uint32_t PN_DBC_EN_6_LOW = (0 << PN_DBC_EN_6_bit);
    const uint32_t PN_DBC_EN_6_HIGH = (1 << PN_DBC_EN_6_bit); 
 
    const uint32_t PN_DBC_EN_5_bit = 5;
    const uint32_t PN_DBC_EN_5_bitWidth = 1;
    const uint32_t PN_DBC_EN_5_LOW = (0 << PN_DBC_EN_5_bit);
    const uint32_t PN_DBC_EN_5_HIGH = (1 << PN_DBC_EN_5_bit); 
 
    const uint32_t PN_DBC_EN_4_bit = 4;
    const uint32_t PN_DBC_EN_4_bitWidth = 1;
    const uint32_t PN_DBC_EN_4_LOW = (0 << PN_DBC_EN_4_bit);
    const uint32_t PN_DBC_EN_4_HIGH = (1 << PN_DBC_EN_4_bit); 
 
    const uint32_t PN_DBC_EN_3_bit = 3;
    const uint32_t PN_DBC_EN_3_bitWidth = 1;
    const uint32_t PN_DBC_EN_3_LOW = (0 << PN_DBC_EN_3_bit);
    const uint32_t PN_DBC_EN_3_HIGH = (1 << PN_DBC_EN_3_bit); 
 
    const uint32_t PN_DBC_EN_2_bit = 2;
    const uint32_t PN_DBC_EN_2_bitWidth = 1;
    const uint32_t PN_DBC_EN_2_LOW = (0 << PN_DBC_EN_2_bit);
    const uint32_t PN_DBC_EN_2_HIGH = (1 << PN_DBC_EN_2_bit); 
 
    const uint32_t PN_DBC_EN_1_bit = 1;
    const uint32_t PN_DBC_EN_1_bitWidth = 1;
    const uint32_t PN_DBC_EN_1_LOW = (0 << PN_DBC_EN_1_bit);
    const uint32_t PN_DBC_EN_1_HIGH = (1 << PN_DBC_EN_1_bit); 
 
    const uint32_t PN_DBC_EN_0_bit = 0;
    const uint32_t PN_DBC_EN_0_bitWidth = 1;
    const uint32_t PN_DBC_EN_0_LOW = (0 << PN_DBC_EN_0_bit);
    const uint32_t PN_DBC_EN_0_HIGH = (1 << PN_DBC_EN_0_bit); 
 
};

// 9.13.14 GPIO_DB_CTRL_P2_0
struct GPIO_DB_CTRL_PO
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0B8;

    const uint32_t MSK_PO_DBC_EN_7_bit = 15;
    const uint32_t MSK_PO_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_7_DISABLE = (0 << MSK_PO_DBC_EN_7_bit);
    const uint32_t MSK_PO_DBC_EN_7_ENABLE = (1 << MSK_PO_DBC_EN_7_bit); 
         
    const uint32_t MSK_PO_DBC_EN_6_bit = 14;
    const uint32_t MSK_PO_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_6_DISABLE = (0 << MSK_PO_DBC_EN_6_bit);
    const uint32_t MSK_PO_DBC_EN_6_ENABLE = (1 << MSK_PO_DBC_EN_6_bit); 
          
    const uint32_t MSK_PO_DBC_EN_5_bit = 13;
    const uint32_t MSK_PO_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_5_DISABLE = (0 << MSK_PO_DBC_EN_5_bit);
    const uint32_t MSK_PO_DBC_EN_5_ENABLE = (1 << MSK_PO_DBC_EN_5_bit); 
           
    const uint32_t MSK_PO_DBC_EN_4_bit = 12;
    const uint32_t MSK_PO_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_4_DISABLE = (0 << MSK_PO_DBC_EN_4_bit);
    const uint32_t MSK_PO_DBC_EN_4_ENABLE = (1 << MSK_PO_DBC_EN_4_bit); 
            
    const uint32_t MSK_PO_DBC_EN_3_bit = 11;
    const uint32_t MSK_PO_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_3_DISABLE = (0 << MSK_PO_DBC_EN_3_bit);
    const uint32_t MSK_PO_DBC_EN_3_ENABLE = (1 << MSK_PO_DBC_EN_3_bit); 
             
    const uint32_t MSK_PO_DBC_EN_2_bit = 10;
    const uint32_t MSK_PO_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_2_DISABLE = (0 << MSK_PO_DBC_EN_2_bit);
    const uint32_t MSK_PO_DBC_EN_2_ENABLE = (1 << MSK_PO_DBC_EN_2_bit); 
              
    const uint32_t MSK_PO_DBC_EN_1_bit = 9;
    const uint32_t MSK_PO_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_1_DISABLE = (0 << MSK_PO_DBC_EN_1_bit);
    const uint32_t MSK_PO_DBC_EN_1_ENABLE = (1 << MSK_PO_DBC_EN_1_bit); 
               
    const uint32_t MSK_PO_DBC_EN_0_bit = 8;
    const uint32_t MSK_PO_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_0_DISABLE = (0 << MSK_PO_DBC_EN_0_bit);
    const uint32_t MSK_PO_DBC_EN_0_ENABLE = (1 << MSK_PO_DBC_EN_0_bit); 
 
    const uint32_t PO_DBC_EN_7_bit = 7;
    const uint32_t PO_DBC_EN_7_bitWidth = 1;
    const uint32_t PO_DBC_EN_7_LOW = (0 << PO_DBC_EN_7_bit);
    const uint32_t PO_DBC_EN_7_HIGH = (1 << PO_DBC_EN_7_bit); 
 
    const uint32_t PO_DBC_EN_6_bit = 6;
    const uint32_t PO_DBC_EN_6_bitWidth = 1;
    const uint32_t PO_DBC_EN_6_LOW = (0 << PO_DBC_EN_6_bit);
    const uint32_t PO_DBC_EN_6_HIGH = (1 << PO_DBC_EN_6_bit); 
 
    const uint32_t PO_DBC_EN_5_bit = 5;
    const uint32_t PO_DBC_EN_5_bitWidth = 1;
    const uint32_t PO_DBC_EN_5_LOW = (0 << PO_DBC_EN_5_bit);
    const uint32_t PO_DBC_EN_5_HIGH = (1 << PO_DBC_EN_5_bit); 
 
    const uint32_t PO_DBC_EN_4_bit = 4;
    const uint32_t PO_DBC_EN_4_bitWidth = 1;
    const uint32_t PO_DBC_EN_4_LOW = (0 << PO_DBC_EN_4_bit);
    const uint32_t PO_DBC_EN_4_HIGH = (1 << PO_DBC_EN_4_bit); 
 
    const uint32_t PO_DBC_EN_3_bit = 3;
    const uint32_t PO_DBC_EN_3_bitWidth = 1;
    const uint32_t PO_DBC_EN_3_LOW = (0 << PO_DBC_EN_3_bit);
    const uint32_t PO_DBC_EN_3_HIGH = (1 << PO_DBC_EN_3_bit); 
 
    const uint32_t PO_DBC_EN_2_bit = 2;
    const uint32_t PO_DBC_EN_2_bitWidth = 1;
    const uint32_t PO_DBC_EN_2_LOW = (0 << PO_DBC_EN_2_bit);
    const uint32_t PO_DBC_EN_2_HIGH = (1 << PO_DBC_EN_2_bit); 
 
    const uint32_t PO_DBC_EN_1_bit = 1;
    const uint32_t PO_DBC_EN_1_bitWidth = 1;
    const uint32_t PO_DBC_EN_1_LOW = (0 << PO_DBC_EN_1_bit);
    const uint32_t PO_DBC_EN_1_HIGH = (1 << PO_DBC_EN_1_bit); 
 
    const uint32_t PO_DBC_EN_0_bit = 0;
    const uint32_t PO_DBC_EN_0_bitWidth = 1;
    const uint32_t PO_DBC_EN_0_LOW = (0 << PO_DBC_EN_0_bit);
    const uint32_t PO_DBC_EN_0_HIGH = (1 << PO_DBC_EN_0_bit); 
 
};

// 9.13.15 GPIO_DB_CTRL_P3_0
struct GPIO_DB_CTRL_PP
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0BC;

    const uint32_t MSK_PP_DBC_EN_7_bit = 15;
    const uint32_t MSK_PP_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_7_DISABLE = (0 << MSK_PP_DBC_EN_7_bit);
    const uint32_t MSK_PP_DBC_EN_7_ENABLE = (1 << MSK_PP_DBC_EN_7_bit); 
         
    const uint32_t MSK_PP_DBC_EN_6_bit = 14;
    const uint32_t MSK_PP_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_6_DISABLE = (0 << MSK_PP_DBC_EN_6_bit);
    const uint32_t MSK_PP_DBC_EN_6_ENABLE = (1 << MSK_PP_DBC_EN_6_bit); 
          
    const uint32_t MSK_PP_DBC_EN_5_bit = 13;
    const uint32_t MSK_PP_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_5_DISABLE = (0 << MSK_PP_DBC_EN_5_bit);
    const uint32_t MSK_PP_DBC_EN_5_ENABLE = (1 << MSK_PP_DBC_EN_5_bit); 
           
    const uint32_t MSK_PP_DBC_EN_4_bit = 12;
    const uint32_t MSK_PP_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_4_DISABLE = (0 << MSK_PP_DBC_EN_4_bit);
    const uint32_t MSK_PP_DBC_EN_4_ENABLE = (1 << MSK_PP_DBC_EN_4_bit); 
            
    const uint32_t MSK_PP_DBC_EN_3_bit = 11;
    const uint32_t MSK_PP_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_3_DISABLE = (0 << MSK_PP_DBC_EN_3_bit);
    const uint32_t MSK_PP_DBC_EN_3_ENABLE = (1 << MSK_PP_DBC_EN_3_bit); 
             
    const uint32_t MSK_PP_DBC_EN_2_bit = 10;
    const uint32_t MSK_PP_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_2_DISABLE = (0 << MSK_PP_DBC_EN_2_bit);
    const uint32_t MSK_PP_DBC_EN_2_ENABLE = (1 << MSK_PP_DBC_EN_2_bit); 
              
    const uint32_t MSK_PP_DBC_EN_1_bit = 9;
    const uint32_t MSK_PP_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_1_DISABLE = (0 << MSK_PP_DBC_EN_1_bit);
    const uint32_t MSK_PP_DBC_EN_1_ENABLE = (1 << MSK_PP_DBC_EN_1_bit); 
               
    const uint32_t MSK_PP_DBC_EN_0_bit = 8;
    const uint32_t MSK_PP_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_0_DISABLE = (0 << MSK_PP_DBC_EN_0_bit);
    const uint32_t MSK_PP_DBC_EN_0_ENABLE = (1 << MSK_PP_DBC_EN_0_bit); 
 
    const uint32_t PP_DBC_EN_7_bit = 7;
    const uint32_t PP_DBC_EN_7_bitWidth = 1;
    const uint32_t PP_DBC_EN_7_LOW = (0 << PP_DBC_EN_7_bit);
    const uint32_t PP_DBC_EN_7_HIGH = (1 << PP_DBC_EN_7_bit); 
 
    const uint32_t PP_DBC_EN_6_bit = 6;
    const uint32_t PP_DBC_EN_6_bitWidth = 1;
    const uint32_t PP_DBC_EN_6_LOW = (0 << PP_DBC_EN_6_bit);
    const uint32_t PP_DBC_EN_6_HIGH = (1 << PP_DBC_EN_6_bit); 
 
    const uint32_t PP_DBC_EN_5_bit = 5;
    const uint32_t PP_DBC_EN_5_bitWidth = 1;
    const uint32_t PP_DBC_EN_5_LOW = (0 << PP_DBC_EN_5_bit);
    const uint32_t PP_DBC_EN_5_HIGH = (1 << PP_DBC_EN_5_bit); 
 
    const uint32_t PP_DBC_EN_4_bit = 4;
    const uint32_t PP_DBC_EN_4_bitWidth = 1;
    const uint32_t PP_DBC_EN_4_LOW = (0 << PP_DBC_EN_4_bit);
    const uint32_t PP_DBC_EN_4_HIGH = (1 << PP_DBC_EN_4_bit); 
 
    const uint32_t PP_DBC_EN_3_bit = 3;
    const uint32_t PP_DBC_EN_3_bitWidth = 1;
    const uint32_t PP_DBC_EN_3_LOW = (0 << PP_DBC_EN_3_bit);
    const uint32_t PP_DBC_EN_3_HIGH = (1 << PP_DBC_EN_3_bit); 
 
    const uint32_t PP_DBC_EN_2_bit = 2;
    const uint32_t PP_DBC_EN_2_bitWidth = 1;
    const uint32_t PP_DBC_EN_2_LOW = (0 << PP_DBC_EN_2_bit);
    const uint32_t PP_DBC_EN_2_HIGH = (1 << PP_DBC_EN_2_bit); 
 
    const uint32_t PP_DBC_EN_1_bit = 1;
    const uint32_t PP_DBC_EN_1_bitWidth = 1;
    const uint32_t PP_DBC_EN_1_LOW = (0 << PP_DBC_EN_1_bit);
    const uint32_t PP_DBC_EN_1_HIGH = (1 << PP_DBC_EN_1_bit); 
 
    const uint32_t PP_DBC_EN_0_bit = 0;
    const uint32_t PP_DBC_EN_0_bitWidth = 1;
    const uint32_t PP_DBC_EN_0_LOW = (0 << PP_DBC_EN_0_bit);
    const uint32_t PP_DBC_EN_0_HIGH = (1 << PP_DBC_EN_0_bit); 
 
};

/**
 * 9.13.16 GPIO_MSK_INT_STA_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_STATUS_M
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0C0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_N
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0C4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_O
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0C8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_P
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0CC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.17 GPIO_MSK_INT_ENB_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_M
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0D0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_N
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0D4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_O
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0D8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_P
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0DC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.18 GPIO_MSK_INT_LVL_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_M
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0E0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_N
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0E4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_O
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0E8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_P
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0EC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

// 9.13.19 GPIO_DB_CNT_P0_0
struct GPIO_DB_CNT_PM
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0F0;

    const uint32_t PM_DBC_CNT_bit = 0;
    const uint32_t PM_DBC_CNT_bitWidth 8;
    const uint32_t PM_DBC_CNT_0 = (0 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_1 = (1 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_2 = (2 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_3 = (3 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_4 = (4 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_5 = (5 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_6 = (6 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_7 = (7 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_8 = (8 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_9 = (9 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_10 = (10 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_11 = (11 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_12 = (12 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_13 = (13 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_14 = (14 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_15 = (15 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_16 = (16 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_17 = (17 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_18 = (18 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_19 = (19 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_20 = (20 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_21 = (21 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_22 = (22 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_23 = (23 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_24 = (24 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_25 = (25 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_26 = (26 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_27 = (27 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_28 = (28 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_29 = (29 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_30 = (30 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_31 = (31 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_32 = (32 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_33 = (33 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_34 = (34 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_35 = (35 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_36 = (36 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_37 = (37 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_38 = (38 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_39 = (39 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_40 = (40 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_41 = (41 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_42 = (42 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_43 = (43 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_44 = (44 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_45 = (45 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_46 = (46 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_47 = (47 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_48 = (48 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_49 = (49 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_50 = (50 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_51 = (51 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_52 = (52 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_53 = (53 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_54 = (54 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_55 = (55 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_56 = (56 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_57 = (57 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_58 = (58 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_59 = (59 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_60 = (60 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_61 = (61 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_62 = (62 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_63 = (63 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_64 = (64 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_65 = (65 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_66 = (66 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_67 = (67 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_68 = (68 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_69 = (69 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_70 = (70 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_71 = (71 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_72 = (72 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_73 = (73 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_74 = (74 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_75 = (75 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_76 = (76 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_77 = (77 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_78 = (78 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_79 = (79 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_80 = (80 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_81 = (81 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_82 = (82 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_83 = (83 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_84 = (84 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_85 = (85 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_86 = (86 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_87 = (87 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_88 = (88 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_89 = (89 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_90 = (90 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_91 = (91 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_92 = (92 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_93 = (93 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_94 = (94 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_95 = (95 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_96 = (96 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_97 = (97 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_98 = (98 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_99 = (99 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_100 = (100 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_101 = (101 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_102 = (102 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_103 = (103 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_104 = (104 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_105 = (105 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_106 = (106 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_107 = (107 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_108 = (108 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_109 = (109 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_110 = (110 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_111 = (111 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_112 = (112 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_113 = (113 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_114 = (114 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_115 = (115 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_116 = (116 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_117 = (117 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_118 = (118 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_119 = (119 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_120 = (120 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_121 = (121 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_122 = (122 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_123 = (123 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_124 = (124 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_125 = (125 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_126 = (126 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_127 = (127 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_128 = (128 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_129 = (129 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_130 = (130 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_131 = (131 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_132 = (132 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_133 = (133 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_134 = (134 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_135 = (135 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_136 = (136 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_137 = (137 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_138 = (138 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_139 = (139 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_140 = (140 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_141 = (141 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_142 = (142 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_143 = (143 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_144 = (144 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_145 = (145 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_146 = (146 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_147 = (147 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_148 = (148 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_149 = (149 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_150 = (150 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_151 = (151 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_152 = (152 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_153 = (153 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_154 = (154 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_155 = (155 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_156 = (156 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_157 = (157 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_158 = (158 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_159 = (159 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_160 = (160 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_161 = (161 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_162 = (162 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_163 = (163 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_164 = (164 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_165 = (165 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_166 = (166 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_167 = (167 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_168 = (168 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_169 = (169 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_170 = (170 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_171 = (171 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_172 = (172 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_173 = (173 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_174 = (174 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_175 = (175 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_176 = (176 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_177 = (177 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_178 = (178 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_179 = (179 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_180 = (180 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_181 = (181 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_182 = (182 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_183 = (183 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_184 = (184 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_185 = (185 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_186 = (186 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_187 = (187 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_188 = (188 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_189 = (189 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_190 = (190 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_191 = (191 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_192 = (192 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_193 = (193 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_194 = (194 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_195 = (195 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_196 = (196 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_197 = (197 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_198 = (198 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_199 = (199 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_200 = (200 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_201 = (201 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_202 = (202 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_203 = (203 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_204 = (204 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_205 = (205 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_206 = (206 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_207 = (207 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_208 = (208 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_209 = (209 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_210 = (210 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_211 = (211 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_212 = (212 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_213 = (213 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_214 = (214 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_215 = (215 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_216 = (216 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_217 = (217 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_218 = (218 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_219 = (219 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_220 = (220 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_221 = (221 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_222 = (222 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_223 = (223 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_224 = (224 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_225 = (225 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_226 = (226 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_227 = (227 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_228 = (228 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_229 = (229 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_230 = (230 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_231 = (231 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_232 = (232 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_233 = (233 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_234 = (234 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_235 = (235 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_236 = (236 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_237 = (237 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_238 = (238 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_239 = (239 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_240 = (240 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_241 = (241 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_242 = (242 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_243 = (243 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_244 = (244 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_245 = (245 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_246 = (246 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_247 = (247 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_248 = (248 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_249 = (249 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_250 = (250 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_251 = (251 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_252 = (252 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_253 = (253 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_254 = (254 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_255 = (255 << PM_DBC_CNT_bit);

};

// 9.13.20 GPIO_DB_CNT_P1_0
struct GPIO_DB_CNT_PN
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0F4;

    const uint32_t PN_DBC_CNT_bit = 0;
    const uint32_t PN_DBC_CNT_bitWidth 8;
    const uint32_t PN_DBC_CNT_0 = (0 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_1 = (1 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_2 = (2 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_3 = (3 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_4 = (4 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_5 = (5 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_6 = (6 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_7 = (7 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_8 = (8 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_9 = (9 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_10 = (10 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_11 = (11 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_12 = (12 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_13 = (13 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_14 = (14 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_15 = (15 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_16 = (16 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_17 = (17 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_18 = (18 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_19 = (19 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_20 = (20 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_21 = (21 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_22 = (22 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_23 = (23 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_24 = (24 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_25 = (25 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_26 = (26 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_27 = (27 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_28 = (28 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_29 = (29 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_30 = (30 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_31 = (31 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_32 = (32 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_33 = (33 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_34 = (34 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_35 = (35 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_36 = (36 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_37 = (37 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_38 = (38 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_39 = (39 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_40 = (40 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_41 = (41 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_42 = (42 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_43 = (43 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_44 = (44 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_45 = (45 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_46 = (46 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_47 = (47 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_48 = (48 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_49 = (49 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_50 = (50 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_51 = (51 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_52 = (52 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_53 = (53 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_54 = (54 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_55 = (55 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_56 = (56 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_57 = (57 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_58 = (58 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_59 = (59 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_60 = (60 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_61 = (61 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_62 = (62 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_63 = (63 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_64 = (64 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_65 = (65 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_66 = (66 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_67 = (67 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_68 = (68 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_69 = (69 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_70 = (70 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_71 = (71 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_72 = (72 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_73 = (73 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_74 = (74 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_75 = (75 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_76 = (76 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_77 = (77 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_78 = (78 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_79 = (79 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_80 = (80 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_81 = (81 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_82 = (82 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_83 = (83 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_84 = (84 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_85 = (85 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_86 = (86 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_87 = (87 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_88 = (88 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_89 = (89 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_90 = (90 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_91 = (91 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_92 = (92 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_93 = (93 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_94 = (94 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_95 = (95 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_96 = (96 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_97 = (97 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_98 = (98 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_99 = (99 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_100 = (100 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_101 = (101 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_102 = (102 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_103 = (103 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_104 = (104 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_105 = (105 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_106 = (106 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_107 = (107 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_108 = (108 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_109 = (109 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_110 = (110 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_111 = (111 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_112 = (112 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_113 = (113 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_114 = (114 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_115 = (115 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_116 = (116 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_117 = (117 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_118 = (118 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_119 = (119 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_120 = (120 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_121 = (121 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_122 = (122 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_123 = (123 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_124 = (124 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_125 = (125 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_126 = (126 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_127 = (127 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_128 = (128 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_129 = (129 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_130 = (130 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_131 = (131 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_132 = (132 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_133 = (133 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_134 = (134 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_135 = (135 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_136 = (136 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_137 = (137 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_138 = (138 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_139 = (139 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_140 = (140 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_141 = (141 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_142 = (142 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_143 = (143 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_144 = (144 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_145 = (145 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_146 = (146 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_147 = (147 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_148 = (148 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_149 = (149 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_150 = (150 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_151 = (151 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_152 = (152 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_153 = (153 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_154 = (154 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_155 = (155 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_156 = (156 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_157 = (157 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_158 = (158 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_159 = (159 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_160 = (160 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_161 = (161 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_162 = (162 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_163 = (163 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_164 = (164 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_165 = (165 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_166 = (166 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_167 = (167 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_168 = (168 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_169 = (169 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_170 = (170 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_171 = (171 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_172 = (172 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_173 = (173 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_174 = (174 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_175 = (175 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_176 = (176 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_177 = (177 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_178 = (178 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_179 = (179 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_180 = (180 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_181 = (181 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_182 = (182 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_183 = (183 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_184 = (184 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_185 = (185 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_186 = (186 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_187 = (187 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_188 = (188 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_189 = (189 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_190 = (190 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_191 = (191 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_192 = (192 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_193 = (193 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_194 = (194 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_195 = (195 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_196 = (196 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_197 = (197 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_198 = (198 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_199 = (199 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_200 = (200 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_201 = (201 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_202 = (202 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_203 = (203 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_204 = (204 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_205 = (205 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_206 = (206 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_207 = (207 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_208 = (208 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_209 = (209 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_210 = (210 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_211 = (211 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_212 = (212 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_213 = (213 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_214 = (214 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_215 = (215 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_216 = (216 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_217 = (217 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_218 = (218 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_219 = (219 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_220 = (220 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_221 = (221 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_222 = (222 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_223 = (223 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_224 = (224 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_225 = (225 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_226 = (226 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_227 = (227 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_228 = (228 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_229 = (229 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_230 = (230 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_231 = (231 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_232 = (232 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_233 = (233 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_234 = (234 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_235 = (235 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_236 = (236 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_237 = (237 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_238 = (238 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_239 = (239 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_240 = (240 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_241 = (241 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_242 = (242 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_243 = (243 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_244 = (244 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_245 = (245 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_246 = (246 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_247 = (247 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_248 = (248 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_249 = (249 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_250 = (250 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_251 = (251 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_252 = (252 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_253 = (253 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_254 = (254 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_255 = (255 << PN_DBC_CNT_bit);

};

// 9.13.21 GPIO_DB_CNT_P2_0
struct GPIO_DB_CNT_PO
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0F8;

    const uint32_t PO_DBC_CNT_bit = 0;
    const uint32_t PO_DBC_CNT_bitWidth 8;
    const uint32_t PO_DBC_CNT_0 = (0 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_1 = (1 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_2 = (2 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_3 = (3 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_4 = (4 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_5 = (5 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_6 = (6 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_7 = (7 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_8 = (8 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_9 = (9 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_10 = (10 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_11 = (11 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_12 = (12 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_13 = (13 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_14 = (14 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_15 = (15 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_16 = (16 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_17 = (17 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_18 = (18 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_19 = (19 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_20 = (20 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_21 = (21 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_22 = (22 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_23 = (23 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_24 = (24 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_25 = (25 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_26 = (26 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_27 = (27 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_28 = (28 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_29 = (29 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_30 = (30 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_31 = (31 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_32 = (32 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_33 = (33 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_34 = (34 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_35 = (35 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_36 = (36 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_37 = (37 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_38 = (38 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_39 = (39 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_40 = (40 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_41 = (41 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_42 = (42 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_43 = (43 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_44 = (44 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_45 = (45 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_46 = (46 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_47 = (47 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_48 = (48 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_49 = (49 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_50 = (50 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_51 = (51 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_52 = (52 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_53 = (53 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_54 = (54 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_55 = (55 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_56 = (56 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_57 = (57 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_58 = (58 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_59 = (59 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_60 = (60 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_61 = (61 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_62 = (62 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_63 = (63 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_64 = (64 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_65 = (65 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_66 = (66 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_67 = (67 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_68 = (68 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_69 = (69 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_70 = (70 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_71 = (71 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_72 = (72 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_73 = (73 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_74 = (74 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_75 = (75 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_76 = (76 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_77 = (77 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_78 = (78 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_79 = (79 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_80 = (80 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_81 = (81 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_82 = (82 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_83 = (83 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_84 = (84 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_85 = (85 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_86 = (86 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_87 = (87 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_88 = (88 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_89 = (89 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_90 = (90 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_91 = (91 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_92 = (92 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_93 = (93 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_94 = (94 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_95 = (95 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_96 = (96 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_97 = (97 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_98 = (98 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_99 = (99 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_100 = (100 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_101 = (101 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_102 = (102 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_103 = (103 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_104 = (104 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_105 = (105 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_106 = (106 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_107 = (107 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_108 = (108 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_109 = (109 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_110 = (110 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_111 = (111 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_112 = (112 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_113 = (113 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_114 = (114 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_115 = (115 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_116 = (116 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_117 = (117 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_118 = (118 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_119 = (119 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_120 = (120 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_121 = (121 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_122 = (122 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_123 = (123 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_124 = (124 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_125 = (125 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_126 = (126 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_127 = (127 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_128 = (128 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_129 = (129 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_130 = (130 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_131 = (131 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_132 = (132 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_133 = (133 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_134 = (134 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_135 = (135 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_136 = (136 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_137 = (137 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_138 = (138 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_139 = (139 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_140 = (140 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_141 = (141 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_142 = (142 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_143 = (143 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_144 = (144 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_145 = (145 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_146 = (146 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_147 = (147 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_148 = (148 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_149 = (149 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_150 = (150 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_151 = (151 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_152 = (152 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_153 = (153 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_154 = (154 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_155 = (155 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_156 = (156 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_157 = (157 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_158 = (158 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_159 = (159 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_160 = (160 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_161 = (161 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_162 = (162 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_163 = (163 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_164 = (164 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_165 = (165 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_166 = (166 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_167 = (167 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_168 = (168 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_169 = (169 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_170 = (170 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_171 = (171 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_172 = (172 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_173 = (173 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_174 = (174 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_175 = (175 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_176 = (176 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_177 = (177 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_178 = (178 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_179 = (179 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_180 = (180 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_181 = (181 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_182 = (182 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_183 = (183 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_184 = (184 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_185 = (185 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_186 = (186 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_187 = (187 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_188 = (188 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_189 = (189 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_190 = (190 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_191 = (191 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_192 = (192 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_193 = (193 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_194 = (194 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_195 = (195 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_196 = (196 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_197 = (197 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_198 = (198 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_199 = (199 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_200 = (200 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_201 = (201 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_202 = (202 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_203 = (203 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_204 = (204 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_205 = (205 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_206 = (206 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_207 = (207 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_208 = (208 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_209 = (209 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_210 = (210 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_211 = (211 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_212 = (212 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_213 = (213 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_214 = (214 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_215 = (215 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_216 = (216 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_217 = (217 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_218 = (218 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_219 = (219 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_220 = (220 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_221 = (221 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_222 = (222 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_223 = (223 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_224 = (224 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_225 = (225 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_226 = (226 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_227 = (227 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_228 = (228 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_229 = (229 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_230 = (230 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_231 = (231 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_232 = (232 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_233 = (233 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_234 = (234 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_235 = (235 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_236 = (236 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_237 = (237 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_238 = (238 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_239 = (239 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_240 = (240 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_241 = (241 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_242 = (242 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_243 = (243 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_244 = (244 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_245 = (245 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_246 = (246 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_247 = (247 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_248 = (248 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_249 = (249 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_250 = (250 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_251 = (251 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_252 = (252 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_253 = (253 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_254 = (254 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_255 = (255 << PO_DBC_CNT_bit);

};

// 9.13.22 GPIO_DB_CNT_P3_0
struct GPIO_DB_CNT_PP
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0FC;

    const uint32_t PP_DBC_CNT_bit = 0;
    const uint32_t PP_DBC_CNT_bitWidth 8;
    const uint32_t PP_DBC_CNT_0 = (0 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_1 = (1 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_2 = (2 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_3 = (3 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_4 = (4 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_5 = (5 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_6 = (6 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_7 = (7 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_8 = (8 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_9 = (9 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_10 = (10 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_11 = (11 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_12 = (12 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_13 = (13 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_14 = (14 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_15 = (15 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_16 = (16 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_17 = (17 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_18 = (18 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_19 = (19 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_20 = (20 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_21 = (21 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_22 = (22 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_23 = (23 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_24 = (24 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_25 = (25 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_26 = (26 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_27 = (27 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_28 = (28 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_29 = (29 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_30 = (30 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_31 = (31 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_32 = (32 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_33 = (33 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_34 = (34 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_35 = (35 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_36 = (36 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_37 = (37 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_38 = (38 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_39 = (39 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_40 = (40 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_41 = (41 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_42 = (42 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_43 = (43 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_44 = (44 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_45 = (45 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_46 = (46 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_47 = (47 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_48 = (48 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_49 = (49 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_50 = (50 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_51 = (51 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_52 = (52 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_53 = (53 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_54 = (54 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_55 = (55 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_56 = (56 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_57 = (57 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_58 = (58 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_59 = (59 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_60 = (60 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_61 = (61 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_62 = (62 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_63 = (63 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_64 = (64 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_65 = (65 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_66 = (66 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_67 = (67 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_68 = (68 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_69 = (69 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_70 = (70 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_71 = (71 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_72 = (72 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_73 = (73 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_74 = (74 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_75 = (75 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_76 = (76 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_77 = (77 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_78 = (78 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_79 = (79 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_80 = (80 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_81 = (81 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_82 = (82 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_83 = (83 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_84 = (84 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_85 = (85 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_86 = (86 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_87 = (87 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_88 = (88 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_89 = (89 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_90 = (90 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_91 = (91 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_92 = (92 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_93 = (93 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_94 = (94 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_95 = (95 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_96 = (96 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_97 = (97 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_98 = (98 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_99 = (99 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_100 = (100 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_101 = (101 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_102 = (102 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_103 = (103 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_104 = (104 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_105 = (105 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_106 = (106 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_107 = (107 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_108 = (108 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_109 = (109 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_110 = (110 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_111 = (111 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_112 = (112 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_113 = (113 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_114 = (114 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_115 = (115 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_116 = (116 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_117 = (117 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_118 = (118 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_119 = (119 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_120 = (120 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_121 = (121 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_122 = (122 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_123 = (123 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_124 = (124 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_125 = (125 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_126 = (126 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_127 = (127 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_128 = (128 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_129 = (129 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_130 = (130 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_131 = (131 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_132 = (132 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_133 = (133 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_134 = (134 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_135 = (135 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_136 = (136 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_137 = (137 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_138 = (138 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_139 = (139 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_140 = (140 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_141 = (141 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_142 = (142 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_143 = (143 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_144 = (144 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_145 = (145 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_146 = (146 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_147 = (147 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_148 = (148 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_149 = (149 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_150 = (150 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_151 = (151 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_152 = (152 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_153 = (153 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_154 = (154 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_155 = (155 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_156 = (156 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_157 = (157 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_158 = (158 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_159 = (159 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_160 = (160 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_161 = (161 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_162 = (162 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_163 = (163 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_164 = (164 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_165 = (165 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_166 = (166 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_167 = (167 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_168 = (168 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_169 = (169 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_170 = (170 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_171 = (171 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_172 = (172 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_173 = (173 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_174 = (174 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_175 = (175 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_176 = (176 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_177 = (177 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_178 = (178 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_179 = (179 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_180 = (180 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_181 = (181 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_182 = (182 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_183 = (183 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_184 = (184 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_185 = (185 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_186 = (186 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_187 = (187 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_188 = (188 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_189 = (189 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_190 = (190 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_191 = (191 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_192 = (192 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_193 = (193 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_194 = (194 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_195 = (195 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_196 = (196 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_197 = (197 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_198 = (198 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_199 = (199 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_200 = (200 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_201 = (201 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_202 = (202 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_203 = (203 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_204 = (204 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_205 = (205 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_206 = (206 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_207 = (207 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_208 = (208 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_209 = (209 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_210 = (210 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_211 = (211 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_212 = (212 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_213 = (213 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_214 = (214 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_215 = (215 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_216 = (216 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_217 = (217 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_218 = (218 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_219 = (219 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_220 = (220 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_221 = (221 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_222 = (222 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_223 = (223 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_224 = (224 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_225 = (225 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_226 = (226 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_227 = (227 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_228 = (228 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_229 = (229 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_230 = (230 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_231 = (231 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_232 = (232 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_233 = (233 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_234 = (234 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_235 = (235 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_236 = (236 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_237 = (237 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_238 = (238 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_239 = (239 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_240 = (240 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_241 = (241 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_242 = (242 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_243 = (243 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_244 = (244 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_245 = (245 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_246 = (246 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_247 = (247 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_248 = (248 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_249 = (249 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_250 = (250 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_251 = (251 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_252 = (252 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_253 = (253 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_254 = (254 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_255 = (255 << PP_DBC_CNT_bit);

};

// I left off here 4/8/21
// GPIO Controller 5 – Start Addr 6000:d400

/**
 * 9.13.1 GPIO_CNF_0 
 *
 * Designates whether each pin operates as a GPIO or as an SFIO. By default all 
 * pins come up in SFIO mode. These can be programmed to GPIO mode at any stage.
 *
 * Lock bits are used to control the access to the CNF and OE registers. When 
 * set, no one can write to the CNF and OE bits. They can be programmed ONLY 
 * during Boot and get reset by chip reset only.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_CNF_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x000;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x004;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x008;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_D_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x00C;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

/**
 * 9.13.2 GPIO_OE_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid.
 * 
 * The set of registers below are used to either drive the signal out or as an 
 * Input. This needs to be programmed depending upon whether the pin needs to 
 * be in either Input or Output.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OE_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x010;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x014;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x018;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_D_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x01C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

/**
 * 9.13.3 GPIO_OUT_0
 *
 * GPIO_CNF.x=1 (in GPIO mode) AND GPIO_OE.x=1 (GPIO output enabled) must be 
 * true for this to be valid. This register will take affect only in GPIO 
 * mode. This register is used to drive the value out on a given pin.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OUT_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x020;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x024;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x028;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_D_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x02C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * 9.13.4 GPIO_IN_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid. This 
 * is a read-only register used to read the value from the pin. This is an 
 * array of 4 identical register entries; the register fields below apply to each entry.
 */

struct GPIO_IN_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x030;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x034;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x038;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x03C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * All GPIO inputs can be independently programmed to generate an interrupt 
 * request.
 * 
 * In addition, the individual trigger level for interrupt on each input pin 
 * can be programmed as either active-on-high or active-on-low. For example, to 
 * program an active-on-high interrupt on bit 3 of GPIO-PORT_C, write '1' into 
 * bit 3 of GPIO_INT.LVL.C register (this sets the interrupt to be 
 * active-on-high), and then write '1' into bit 3 of GPIO_INT.ENB.C (this 
 * enables interrupt on the named bit).
 *
 * The interrupt flag status can be read in the appropriate bit of the 
 * GPIO_INT.STA.C register. Once the programmed interrupt occurs, status should 
 * be cleared by writing into the appropriate bit of the GPIO_INT.CLR.C 
 * register. Note that the interrupt thus generated is routed to the processor 
 * only if the corresponding bit for GPIO interrupts in the Secondary interrupt
 *  controller is enabled.
 */

/**
 * 9.13.5 GPIO_INT_STA_0
 *
 * GPIO mode (GPIO_CNF.x=1) and GPIO_INT.ENB.x=1 must be true for this condition 
 * to be valid. Every GPIO pin generates an Interrupt when switching from 
 * Low-High to High-Low. Interrupt status for each port is saved in an 
 * Interrupt status register.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_STATUS_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x040;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x044;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x048;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_D_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x04C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};


/**
 * 9.13.6 GPIO_INT_ENB_0
 *
 * Every bit of the GPIO pin has an enable which, when enabled, routes the 
 * Interrupt to the Interrupt controller. This is an array of 4 identical 
 * register entries; the register fields below apply to each entry.
 */

struct GPIO_INT_ENABLE_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x050;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x054;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x058;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_D_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x05C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

/**
 * 9.13.7 GPIO_INT_LVL_0
 *
 * The GPIO can detect an interrupt for any edge- or level-sensitive signal.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry
 */

struct GPIO_INT_LEVEL_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x060;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x064;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x068;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_D_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x06C;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};


/**
 * 9.13.8 GPIO_INT_CLR_0
 * 
 * This write-only register clears the Interrupts that are set. This is valid 
 * only in GPIO mode when GPIO_INT.ENB is set.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_CLEAR_A_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x070;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_B_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x074;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_C_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x078;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_D_RMW
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x07C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

/**
 * 9.13.9 GPIO_MSK_CNF_0
 *
 * Each register is provided with an individual 16-bit version for enabling 
 * Masked Writes to avoid a Read-Modify-Write operation by the firmware. The 
 * exception is for the interrupt clear register, whose functionality is 
 * combined in the interrupt status register. Individual pins only can be 
 * programmed by suitably enabling the write masks in the upper byte of these 
 * 16-bit registers.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_CNF_A
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x080;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_B
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x084;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_C
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x088;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_D
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x08C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.10 GPIO_MSK_OE_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OE_A
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x090;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_B
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x094;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_C
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x098;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_D
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x09C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.11 GPIO_MSK_OUT_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OUT_A
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0A0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_B
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0A4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_C
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0A8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_D
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0AC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.12 GPIO_DB_CTRL_P0_0
 */

struct GPIO_DB_CTRL_PA
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0B0;

    const uint32_t MSK_PA_DBC_EN_7_bit = 15;
    const uint32_t MSK_PA_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_7_DISABLE = (0 << MSK_PA_DBC_EN_7_bit);
    const uint32_t MSK_PA_DBC_EN_7_ENABLE = (1 << MSK_PA_DBC_EN_7_bit); 
         
    const uint32_t MSK_PA_DBC_EN_6_bit = 14;
    const uint32_t MSK_PA_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_6_DISABLE = (0 << MSK_PA_DBC_EN_6_bit);
    const uint32_t MSK_PA_DBC_EN_6_ENABLE = (1 << MSK_PA_DBC_EN_6_bit); 
          
    const uint32_t MSK_PA_DBC_EN_5_bit = 13;
    const uint32_t MSK_PA_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_5_DISABLE = (0 << MSK_PA_DBC_EN_5_bit);
    const uint32_t MSK_PA_DBC_EN_5_ENABLE = (1 << MSK_PA_DBC_EN_5_bit); 
           
    const uint32_t MSK_PA_DBC_EN_4_bit = 12;
    const uint32_t MSK_PA_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_4_DISABLE = (0 << MSK_PA_DBC_EN_4_bit);
    const uint32_t MSK_PA_DBC_EN_4_ENABLE = (1 << MSK_PA_DBC_EN_4_bit); 
            
    const uint32_t MSK_PA_DBC_EN_3_bit = 11;
    const uint32_t MSK_PA_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_3_DISABLE = (0 << MSK_PA_DBC_EN_3_bit);
    const uint32_t MSK_PA_DBC_EN_3_ENABLE = (1 << MSK_PA_DBC_EN_3_bit); 
             
    const uint32_t MSK_PA_DBC_EN_2_bit = 10;
    const uint32_t MSK_PA_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_2_DISABLE = (0 << MSK_PA_DBC_EN_2_bit);
    const uint32_t MSK_PA_DBC_EN_2_ENABLE = (1 << MSK_PA_DBC_EN_2_bit); 
              
    const uint32_t MSK_PA_DBC_EN_1_bit = 9;
    const uint32_t MSK_PA_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_1_DISABLE = (0 << MSK_PA_DBC_EN_1_bit);
    const uint32_t MSK_PA_DBC_EN_1_ENABLE = (1 << MSK_PA_DBC_EN_1_bit); 
               
    const uint32_t MSK_PA_DBC_EN_0_bit = 8;
    const uint32_t MSK_PA_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PA_DBC_EN_0_DISABLE = (0 << MSK_PA_DBC_EN_0_bit);
    const uint32_t MSK_PA_DBC_EN_0_ENABLE = (1 << MSK_PA_DBC_EN_0_bit); 
 
    const uint32_t PA_DBC_EN_7_bit = 7;
    const uint32_t PA_DBC_EN_7_bitWidth = 1;
    const uint32_t PA_DBC_EN_7_LOW = (0 << PA_DBC_EN_7_bit);
    const uint32_t PA_DBC_EN_7_HIGH = (1 << PA_DBC_EN_7_bit); 
 
    const uint32_t PA_DBC_EN_6_bit = 6;
    const uint32_t PA_DBC_EN_6_bitWidth = 1;
    const uint32_t PA_DBC_EN_6_LOW = (0 << PA_DBC_EN_6_bit);
    const uint32_t PA_DBC_EN_6_HIGH = (1 << PA_DBC_EN_6_bit); 
 
    const uint32_t PA_DBC_EN_5_bit = 5;
    const uint32_t PA_DBC_EN_5_bitWidth = 1;
    const uint32_t PA_DBC_EN_5_LOW = (0 << PA_DBC_EN_5_bit);
    const uint32_t PA_DBC_EN_5_HIGH = (1 << PA_DBC_EN_5_bit); 
 
    const uint32_t PA_DBC_EN_4_bit = 4;
    const uint32_t PA_DBC_EN_4_bitWidth = 1;
    const uint32_t PA_DBC_EN_4_LOW = (0 << PA_DBC_EN_4_bit);
    const uint32_t PA_DBC_EN_4_HIGH = (1 << PA_DBC_EN_4_bit); 
 
    const uint32_t PA_DBC_EN_3_bit = 3;
    const uint32_t PA_DBC_EN_3_bitWidth = 1;
    const uint32_t PA_DBC_EN_3_LOW = (0 << PA_DBC_EN_3_bit);
    const uint32_t PA_DBC_EN_3_HIGH = (1 << PA_DBC_EN_3_bit); 
 
    const uint32_t PA_DBC_EN_2_bit = 2;
    const uint32_t PA_DBC_EN_2_bitWidth = 1;
    const uint32_t PA_DBC_EN_2_LOW = (0 << PA_DBC_EN_2_bit);
    const uint32_t PA_DBC_EN_2_HIGH = (1 << PA_DBC_EN_2_bit); 
 
    const uint32_t PA_DBC_EN_1_bit = 1;
    const uint32_t PA_DBC_EN_1_bitWidth = 1;
    const uint32_t PA_DBC_EN_1_LOW = (0 << PA_DBC_EN_1_bit);
    const uint32_t PA_DBC_EN_1_HIGH = (1 << PA_DBC_EN_1_bit); 
 
    const uint32_t PA_DBC_EN_0_bit = 0;
    const uint32_t PA_DBC_EN_0_bitWidth = 1;
    const uint32_t PA_DBC_EN_0_LOW = (0 << PA_DBC_EN_0_bit);
    const uint32_t PA_DBC_EN_0_HIGH = (1 << PA_DBC_EN_0_bit); 
 
};

// 9.13.13 GPIO_DB_CTRL_P1_0
struct GPIO_DB_CTRL_PB
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0B4;

    const uint32_t MSK_PB_DBC_EN_7_bit = 15;
    const uint32_t MSK_PB_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_7_DISABLE = (0 << MSK_PB_DBC_EN_7_bit);
    const uint32_t MSK_PB_DBC_EN_7_ENABLE = (1 << MSK_PB_DBC_EN_7_bit); 
         
    const uint32_t MSK_PB_DBC_EN_6_bit = 14;
    const uint32_t MSK_PB_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_6_DISABLE = (0 << MSK_PB_DBC_EN_6_bit);
    const uint32_t MSK_PB_DBC_EN_6_ENABLE = (1 << MSK_PB_DBC_EN_6_bit); 
          
    const uint32_t MSK_PB_DBC_EN_5_bit = 13;
    const uint32_t MSK_PB_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_5_DISABLE = (0 << MSK_PB_DBC_EN_5_bit);
    const uint32_t MSK_PB_DBC_EN_5_ENABLE = (1 << MSK_PB_DBC_EN_5_bit); 
           
    const uint32_t MSK_PB_DBC_EN_4_bit = 12;
    const uint32_t MSK_PB_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_4_DISABLE = (0 << MSK_PB_DBC_EN_4_bit);
    const uint32_t MSK_PB_DBC_EN_4_ENABLE = (1 << MSK_PB_DBC_EN_4_bit); 
            
    const uint32_t MSK_PB_DBC_EN_3_bit = 11;
    const uint32_t MSK_PB_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_3_DISABLE = (0 << MSK_PB_DBC_EN_3_bit);
    const uint32_t MSK_PB_DBC_EN_3_ENABLE = (1 << MSK_PB_DBC_EN_3_bit); 
             
    const uint32_t MSK_PB_DBC_EN_2_bit = 10;
    const uint32_t MSK_PB_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_2_DISABLE = (0 << MSK_PB_DBC_EN_2_bit);
    const uint32_t MSK_PB_DBC_EN_2_ENABLE = (1 << MSK_PB_DBC_EN_2_bit); 
              
    const uint32_t MSK_PB_DBC_EN_1_bit = 9;
    const uint32_t MSK_PB_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_1_DISABLE = (0 << MSK_PB_DBC_EN_1_bit);
    const uint32_t MSK_PB_DBC_EN_1_ENABLE = (1 << MSK_PB_DBC_EN_1_bit); 
               
    const uint32_t MSK_PB_DBC_EN_0_bit = 8;
    const uint32_t MSK_PB_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PB_DBC_EN_0_DISABLE = (0 << MSK_PB_DBC_EN_0_bit);
    const uint32_t MSK_PB_DBC_EN_0_ENABLE = (1 << MSK_PB_DBC_EN_0_bit); 
 
    const uint32_t PB_DBC_EN_7_bit = 7;
    const uint32_t PB_DBC_EN_7_bitWidth = 1;
    const uint32_t PB_DBC_EN_7_LOW = (0 << PB_DBC_EN_7_bit);
    const uint32_t PB_DBC_EN_7_HIGH = (1 << PB_DBC_EN_7_bit); 
 
    const uint32_t PB_DBC_EN_6_bit = 6;
    const uint32_t PB_DBC_EN_6_bitWidth = 1;
    const uint32_t PB_DBC_EN_6_LOW = (0 << PB_DBC_EN_6_bit);
    const uint32_t PB_DBC_EN_6_HIGH = (1 << PB_DBC_EN_6_bit); 
 
    const uint32_t PB_DBC_EN_5_bit = 5;
    const uint32_t PB_DBC_EN_5_bitWidth = 1;
    const uint32_t PB_DBC_EN_5_LOW = (0 << PB_DBC_EN_5_bit);
    const uint32_t PB_DBC_EN_5_HIGH = (1 << PB_DBC_EN_5_bit); 
 
    const uint32_t PB_DBC_EN_4_bit = 4;
    const uint32_t PB_DBC_EN_4_bitWidth = 1;
    const uint32_t PB_DBC_EN_4_LOW = (0 << PB_DBC_EN_4_bit);
    const uint32_t PB_DBC_EN_4_HIGH = (1 << PB_DBC_EN_4_bit); 
 
    const uint32_t PB_DBC_EN_3_bit = 3;
    const uint32_t PB_DBC_EN_3_bitWidth = 1;
    const uint32_t PB_DBC_EN_3_LOW = (0 << PB_DBC_EN_3_bit);
    const uint32_t PB_DBC_EN_3_HIGH = (1 << PB_DBC_EN_3_bit); 
 
    const uint32_t PB_DBC_EN_2_bit = 2;
    const uint32_t PB_DBC_EN_2_bitWidth = 1;
    const uint32_t PB_DBC_EN_2_LOW = (0 << PB_DBC_EN_2_bit);
    const uint32_t PB_DBC_EN_2_HIGH = (1 << PB_DBC_EN_2_bit); 
 
    const uint32_t PB_DBC_EN_1_bit = 1;
    const uint32_t PB_DBC_EN_1_bitWidth = 1;
    const uint32_t PB_DBC_EN_1_LOW = (0 << PB_DBC_EN_1_bit);
    const uint32_t PB_DBC_EN_1_HIGH = (1 << PB_DBC_EN_1_bit); 
 
    const uint32_t PB_DBC_EN_0_bit = 0;
    const uint32_t PB_DBC_EN_0_bitWidth = 1;
    const uint32_t PB_DBC_EN_0_LOW = (0 << PB_DBC_EN_0_bit);
    const uint32_t PB_DBC_EN_0_HIGH = (1 << PB_DBC_EN_0_bit); 
 
};

// 9.13.14 GPIO_DB_CTRL_P2_0
struct GPIO_DB_CTRL_PC
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0B8;

    const uint32_t MSK_PC_DBC_EN_7_bit = 15;
    const uint32_t MSK_PC_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_7_DISABLE = (0 << MSK_PC_DBC_EN_7_bit);
    const uint32_t MSK_PC_DBC_EN_7_ENABLE = (1 << MSK_PC_DBC_EN_7_bit); 
         
    const uint32_t MSK_PC_DBC_EN_6_bit = 14;
    const uint32_t MSK_PC_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_6_DISABLE = (0 << MSK_PC_DBC_EN_6_bit);
    const uint32_t MSK_PC_DBC_EN_6_ENABLE = (1 << MSK_PC_DBC_EN_6_bit); 
          
    const uint32_t MSK_PC_DBC_EN_5_bit = 13;
    const uint32_t MSK_PC_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_5_DISABLE = (0 << MSK_PC_DBC_EN_5_bit);
    const uint32_t MSK_PC_DBC_EN_5_ENABLE = (1 << MSK_PC_DBC_EN_5_bit); 
           
    const uint32_t MSK_PC_DBC_EN_4_bit = 12;
    const uint32_t MSK_PC_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_4_DISABLE = (0 << MSK_PC_DBC_EN_4_bit);
    const uint32_t MSK_PC_DBC_EN_4_ENABLE = (1 << MSK_PC_DBC_EN_4_bit); 
            
    const uint32_t MSK_PC_DBC_EN_3_bit = 11;
    const uint32_t MSK_PC_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_3_DISABLE = (0 << MSK_PC_DBC_EN_3_bit);
    const uint32_t MSK_PC_DBC_EN_3_ENABLE = (1 << MSK_PC_DBC_EN_3_bit); 
             
    const uint32_t MSK_PC_DBC_EN_2_bit = 10;
    const uint32_t MSK_PC_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_2_DISABLE = (0 << MSK_PC_DBC_EN_2_bit);
    const uint32_t MSK_PC_DBC_EN_2_ENABLE = (1 << MSK_PC_DBC_EN_2_bit); 
              
    const uint32_t MSK_PC_DBC_EN_1_bit = 9;
    const uint32_t MSK_PC_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_1_DISABLE = (0 << MSK_PC_DBC_EN_1_bit);
    const uint32_t MSK_PC_DBC_EN_1_ENABLE = (1 << MSK_PC_DBC_EN_1_bit); 
               
    const uint32_t MSK_PC_DBC_EN_0_bit = 8;
    const uint32_t MSK_PC_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PC_DBC_EN_0_DISABLE = (0 << MSK_PC_DBC_EN_0_bit);
    const uint32_t MSK_PC_DBC_EN_0_ENABLE = (1 << MSK_PC_DBC_EN_0_bit); 
 
    const uint32_t PC_DBC_EN_7_bit = 7;
    const uint32_t PC_DBC_EN_7_bitWidth = 1;
    const uint32_t PC_DBC_EN_7_LOW = (0 << PC_DBC_EN_7_bit);
    const uint32_t PC_DBC_EN_7_HIGH = (1 << PC_DBC_EN_7_bit); 
 
    const uint32_t PC_DBC_EN_6_bit = 6;
    const uint32_t PC_DBC_EN_6_bitWidth = 1;
    const uint32_t PC_DBC_EN_6_LOW = (0 << PC_DBC_EN_6_bit);
    const uint32_t PC_DBC_EN_6_HIGH = (1 << PC_DBC_EN_6_bit); 
 
    const uint32_t PC_DBC_EN_5_bit = 5;
    const uint32_t PC_DBC_EN_5_bitWidth = 1;
    const uint32_t PC_DBC_EN_5_LOW = (0 << PC_DBC_EN_5_bit);
    const uint32_t PC_DBC_EN_5_HIGH = (1 << PC_DBC_EN_5_bit); 
 
    const uint32_t PC_DBC_EN_4_bit = 4;
    const uint32_t PC_DBC_EN_4_bitWidth = 1;
    const uint32_t PC_DBC_EN_4_LOW = (0 << PC_DBC_EN_4_bit);
    const uint32_t PC_DBC_EN_4_HIGH = (1 << PC_DBC_EN_4_bit); 
 
    const uint32_t PC_DBC_EN_3_bit = 3;
    const uint32_t PC_DBC_EN_3_bitWidth = 1;
    const uint32_t PC_DBC_EN_3_LOW = (0 << PC_DBC_EN_3_bit);
    const uint32_t PC_DBC_EN_3_HIGH = (1 << PC_DBC_EN_3_bit); 
 
    const uint32_t PC_DBC_EN_2_bit = 2;
    const uint32_t PC_DBC_EN_2_bitWidth = 1;
    const uint32_t PC_DBC_EN_2_LOW = (0 << PC_DBC_EN_2_bit);
    const uint32_t PC_DBC_EN_2_HIGH = (1 << PC_DBC_EN_2_bit); 
 
    const uint32_t PC_DBC_EN_1_bit = 1;
    const uint32_t PC_DBC_EN_1_bitWidth = 1;
    const uint32_t PC_DBC_EN_1_LOW = (0 << PC_DBC_EN_1_bit);
    const uint32_t PC_DBC_EN_1_HIGH = (1 << PC_DBC_EN_1_bit); 
 
    const uint32_t PC_DBC_EN_0_bit = 0;
    const uint32_t PC_DBC_EN_0_bitWidth = 1;
    const uint32_t PC_DBC_EN_0_LOW = (0 << PC_DBC_EN_0_bit);
    const uint32_t PC_DBC_EN_0_HIGH = (1 << PC_DBC_EN_0_bit); 
 
};

// 9.13.15 GPIO_DB_CTRL_P3_0
struct GPIO_DB_CTRL_PD
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0BC;

    const uint32_t MSK_PD_DBC_EN_7_bit = 15;
    const uint32_t MSK_PD_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_7_DISABLE = (0 << MSK_PD_DBC_EN_7_bit);
    const uint32_t MSK_PD_DBC_EN_7_ENABLE = (1 << MSK_PD_DBC_EN_7_bit); 
         
    const uint32_t MSK_PD_DBC_EN_6_bit = 14;
    const uint32_t MSK_PD_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_6_DISABLE = (0 << MSK_PD_DBC_EN_6_bit);
    const uint32_t MSK_PD_DBC_EN_6_ENABLE = (1 << MSK_PD_DBC_EN_6_bit); 
          
    const uint32_t MSK_PD_DBC_EN_5_bit = 13;
    const uint32_t MSK_PD_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_5_DISABLE = (0 << MSK_PD_DBC_EN_5_bit);
    const uint32_t MSK_PD_DBC_EN_5_ENABLE = (1 << MSK_PD_DBC_EN_5_bit); 
           
    const uint32_t MSK_PD_DBC_EN_4_bit = 12;
    const uint32_t MSK_PD_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_4_DISABLE = (0 << MSK_PD_DBC_EN_4_bit);
    const uint32_t MSK_PD_DBC_EN_4_ENABLE = (1 << MSK_PD_DBC_EN_4_bit); 
            
    const uint32_t MSK_PD_DBC_EN_3_bit = 11;
    const uint32_t MSK_PD_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_3_DISABLE = (0 << MSK_PD_DBC_EN_3_bit);
    const uint32_t MSK_PD_DBC_EN_3_ENABLE = (1 << MSK_PD_DBC_EN_3_bit); 
             
    const uint32_t MSK_PD_DBC_EN_2_bit = 10;
    const uint32_t MSK_PD_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_2_DISABLE = (0 << MSK_PD_DBC_EN_2_bit);
    const uint32_t MSK_PD_DBC_EN_2_ENABLE = (1 << MSK_PD_DBC_EN_2_bit); 
              
    const uint32_t MSK_PD_DBC_EN_1_bit = 9;
    const uint32_t MSK_PD_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_1_DISABLE = (0 << MSK_PD_DBC_EN_1_bit);
    const uint32_t MSK_PD_DBC_EN_1_ENABLE = (1 << MSK_PD_DBC_EN_1_bit); 
               
    const uint32_t MSK_PD_DBC_EN_0_bit = 8;
    const uint32_t MSK_PD_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PD_DBC_EN_0_DISABLE = (0 << MSK_PD_DBC_EN_0_bit);
    const uint32_t MSK_PD_DBC_EN_0_ENABLE = (1 << MSK_PD_DBC_EN_0_bit); 
 
    const uint32_t PD_DBC_EN_7_bit = 7;
    const uint32_t PD_DBC_EN_7_bitWidth = 1;
    const uint32_t PD_DBC_EN_7_LOW = (0 << PD_DBC_EN_7_bit);
    const uint32_t PD_DBC_EN_7_HIGH = (1 << PD_DBC_EN_7_bit); 
 
    const uint32_t PD_DBC_EN_6_bit = 6;
    const uint32_t PD_DBC_EN_6_bitWidth = 1;
    const uint32_t PD_DBC_EN_6_LOW = (0 << PD_DBC_EN_6_bit);
    const uint32_t PD_DBC_EN_6_HIGH = (1 << PD_DBC_EN_6_bit); 
 
    const uint32_t PD_DBC_EN_5_bit = 5;
    const uint32_t PD_DBC_EN_5_bitWidth = 1;
    const uint32_t PD_DBC_EN_5_LOW = (0 << PD_DBC_EN_5_bit);
    const uint32_t PD_DBC_EN_5_HIGH = (1 << PD_DBC_EN_5_bit); 
 
    const uint32_t PD_DBC_EN_4_bit = 4;
    const uint32_t PD_DBC_EN_4_bitWidth = 1;
    const uint32_t PD_DBC_EN_4_LOW = (0 << PD_DBC_EN_4_bit);
    const uint32_t PD_DBC_EN_4_HIGH = (1 << PD_DBC_EN_4_bit); 
 
    const uint32_t PD_DBC_EN_3_bit = 3;
    const uint32_t PD_DBC_EN_3_bitWidth = 1;
    const uint32_t PD_DBC_EN_3_LOW = (0 << PD_DBC_EN_3_bit);
    const uint32_t PD_DBC_EN_3_HIGH = (1 << PD_DBC_EN_3_bit); 
 
    const uint32_t PD_DBC_EN_2_bit = 2;
    const uint32_t PD_DBC_EN_2_bitWidth = 1;
    const uint32_t PD_DBC_EN_2_LOW = (0 << PD_DBC_EN_2_bit);
    const uint32_t PD_DBC_EN_2_HIGH = (1 << PD_DBC_EN_2_bit); 
 
    const uint32_t PD_DBC_EN_1_bit = 1;
    const uint32_t PD_DBC_EN_1_bitWidth = 1;
    const uint32_t PD_DBC_EN_1_LOW = (0 << PD_DBC_EN_1_bit);
    const uint32_t PD_DBC_EN_1_HIGH = (1 << PD_DBC_EN_1_bit); 
 
    const uint32_t PD_DBC_EN_0_bit = 0;
    const uint32_t PD_DBC_EN_0_bitWidth = 1;
    const uint32_t PD_DBC_EN_0_LOW = (0 << PD_DBC_EN_0_bit);
    const uint32_t PD_DBC_EN_0_HIGH = (1 << PD_DBC_EN_0_bit); 
 
};

/**
 * 9.13.16 GPIO_MSK_INT_STA_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_STATUS_A
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0C0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_B
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0C4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_C
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0C8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_D
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0CC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.17 GPIO_MSK_INT_ENB_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_A
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0D0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_B
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0D4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_C
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0D8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_D
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0DC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.18 GPIO_MSK_INT_LVL_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_A
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0E0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_B
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0E4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_C
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0E8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_D
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0EC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

// 9.13.19 GPIO_DB_CNT_P0_0
struct GPIO_DB_CNT_PA
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0F0;

    const uint32_t PA_DBC_CNT_bit = 0;
    const uint32_t PA_DBC_CNT_bitWidth 8;
    const uint32_t PA_DBC_CNT_0 = (0 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_1 = (1 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_2 = (2 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_3 = (3 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_4 = (4 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_5 = (5 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_6 = (6 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_7 = (7 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_8 = (8 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_9 = (9 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_10 = (10 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_11 = (11 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_12 = (12 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_13 = (13 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_14 = (14 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_15 = (15 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_16 = (16 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_17 = (17 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_18 = (18 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_19 = (19 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_20 = (20 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_21 = (21 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_22 = (22 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_23 = (23 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_24 = (24 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_25 = (25 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_26 = (26 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_27 = (27 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_28 = (28 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_29 = (29 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_30 = (30 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_31 = (31 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_32 = (32 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_33 = (33 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_34 = (34 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_35 = (35 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_36 = (36 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_37 = (37 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_38 = (38 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_39 = (39 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_40 = (40 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_41 = (41 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_42 = (42 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_43 = (43 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_44 = (44 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_45 = (45 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_46 = (46 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_47 = (47 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_48 = (48 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_49 = (49 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_50 = (50 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_51 = (51 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_52 = (52 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_53 = (53 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_54 = (54 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_55 = (55 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_56 = (56 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_57 = (57 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_58 = (58 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_59 = (59 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_60 = (60 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_61 = (61 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_62 = (62 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_63 = (63 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_64 = (64 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_65 = (65 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_66 = (66 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_67 = (67 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_68 = (68 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_69 = (69 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_70 = (70 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_71 = (71 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_72 = (72 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_73 = (73 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_74 = (74 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_75 = (75 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_76 = (76 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_77 = (77 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_78 = (78 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_79 = (79 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_80 = (80 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_81 = (81 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_82 = (82 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_83 = (83 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_84 = (84 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_85 = (85 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_86 = (86 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_87 = (87 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_88 = (88 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_89 = (89 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_90 = (90 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_91 = (91 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_92 = (92 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_93 = (93 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_94 = (94 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_95 = (95 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_96 = (96 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_97 = (97 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_98 = (98 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_99 = (99 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_100 = (100 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_101 = (101 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_102 = (102 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_103 = (103 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_104 = (104 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_105 = (105 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_106 = (106 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_107 = (107 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_108 = (108 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_109 = (109 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_110 = (110 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_111 = (111 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_112 = (112 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_113 = (113 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_114 = (114 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_115 = (115 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_116 = (116 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_117 = (117 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_118 = (118 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_119 = (119 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_120 = (120 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_121 = (121 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_122 = (122 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_123 = (123 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_124 = (124 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_125 = (125 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_126 = (126 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_127 = (127 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_128 = (128 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_129 = (129 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_130 = (130 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_131 = (131 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_132 = (132 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_133 = (133 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_134 = (134 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_135 = (135 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_136 = (136 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_137 = (137 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_138 = (138 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_139 = (139 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_140 = (140 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_141 = (141 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_142 = (142 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_143 = (143 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_144 = (144 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_145 = (145 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_146 = (146 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_147 = (147 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_148 = (148 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_149 = (149 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_150 = (150 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_151 = (151 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_152 = (152 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_153 = (153 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_154 = (154 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_155 = (155 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_156 = (156 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_157 = (157 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_158 = (158 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_159 = (159 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_160 = (160 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_161 = (161 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_162 = (162 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_163 = (163 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_164 = (164 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_165 = (165 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_166 = (166 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_167 = (167 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_168 = (168 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_169 = (169 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_170 = (170 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_171 = (171 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_172 = (172 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_173 = (173 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_174 = (174 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_175 = (175 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_176 = (176 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_177 = (177 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_178 = (178 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_179 = (179 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_180 = (180 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_181 = (181 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_182 = (182 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_183 = (183 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_184 = (184 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_185 = (185 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_186 = (186 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_187 = (187 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_188 = (188 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_189 = (189 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_190 = (190 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_191 = (191 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_192 = (192 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_193 = (193 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_194 = (194 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_195 = (195 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_196 = (196 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_197 = (197 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_198 = (198 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_199 = (199 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_200 = (200 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_201 = (201 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_202 = (202 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_203 = (203 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_204 = (204 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_205 = (205 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_206 = (206 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_207 = (207 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_208 = (208 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_209 = (209 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_210 = (210 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_211 = (211 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_212 = (212 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_213 = (213 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_214 = (214 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_215 = (215 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_216 = (216 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_217 = (217 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_218 = (218 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_219 = (219 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_220 = (220 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_221 = (221 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_222 = (222 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_223 = (223 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_224 = (224 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_225 = (225 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_226 = (226 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_227 = (227 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_228 = (228 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_229 = (229 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_230 = (230 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_231 = (231 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_232 = (232 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_233 = (233 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_234 = (234 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_235 = (235 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_236 = (236 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_237 = (237 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_238 = (238 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_239 = (239 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_240 = (240 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_241 = (241 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_242 = (242 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_243 = (243 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_244 = (244 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_245 = (245 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_246 = (246 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_247 = (247 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_248 = (248 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_249 = (249 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_250 = (250 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_251 = (251 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_252 = (252 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_253 = (253 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_254 = (254 << PA_DBC_CNT_bit);
    const uint32_t PA_DBC_CNT_255 = (255 << PA_DBC_CNT_bit);

};

// 9.13.20 GPIO_DB_CNT_P1_0
struct GPIO_DB_CNT_PB
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0F4;

    const uint32_t PB_DBC_CNT_bit = 0;
    const uint32_t PB_DBC_CNT_bitWidth 8;
    const uint32_t PB_DBC_CNT_0 = (0 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_1 = (1 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_2 = (2 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_3 = (3 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_4 = (4 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_5 = (5 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_6 = (6 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_7 = (7 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_8 = (8 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_9 = (9 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_10 = (10 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_11 = (11 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_12 = (12 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_13 = (13 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_14 = (14 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_15 = (15 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_16 = (16 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_17 = (17 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_18 = (18 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_19 = (19 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_20 = (20 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_21 = (21 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_22 = (22 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_23 = (23 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_24 = (24 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_25 = (25 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_26 = (26 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_27 = (27 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_28 = (28 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_29 = (29 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_30 = (30 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_31 = (31 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_32 = (32 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_33 = (33 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_34 = (34 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_35 = (35 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_36 = (36 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_37 = (37 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_38 = (38 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_39 = (39 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_40 = (40 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_41 = (41 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_42 = (42 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_43 = (43 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_44 = (44 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_45 = (45 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_46 = (46 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_47 = (47 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_48 = (48 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_49 = (49 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_50 = (50 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_51 = (51 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_52 = (52 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_53 = (53 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_54 = (54 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_55 = (55 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_56 = (56 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_57 = (57 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_58 = (58 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_59 = (59 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_60 = (60 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_61 = (61 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_62 = (62 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_63 = (63 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_64 = (64 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_65 = (65 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_66 = (66 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_67 = (67 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_68 = (68 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_69 = (69 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_70 = (70 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_71 = (71 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_72 = (72 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_73 = (73 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_74 = (74 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_75 = (75 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_76 = (76 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_77 = (77 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_78 = (78 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_79 = (79 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_80 = (80 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_81 = (81 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_82 = (82 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_83 = (83 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_84 = (84 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_85 = (85 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_86 = (86 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_87 = (87 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_88 = (88 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_89 = (89 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_90 = (90 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_91 = (91 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_92 = (92 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_93 = (93 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_94 = (94 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_95 = (95 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_96 = (96 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_97 = (97 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_98 = (98 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_99 = (99 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_100 = (100 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_101 = (101 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_102 = (102 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_103 = (103 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_104 = (104 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_105 = (105 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_106 = (106 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_107 = (107 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_108 = (108 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_109 = (109 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_110 = (110 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_111 = (111 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_112 = (112 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_113 = (113 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_114 = (114 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_115 = (115 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_116 = (116 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_117 = (117 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_118 = (118 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_119 = (119 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_120 = (120 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_121 = (121 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_122 = (122 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_123 = (123 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_124 = (124 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_125 = (125 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_126 = (126 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_127 = (127 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_128 = (128 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_129 = (129 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_130 = (130 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_131 = (131 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_132 = (132 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_133 = (133 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_134 = (134 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_135 = (135 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_136 = (136 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_137 = (137 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_138 = (138 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_139 = (139 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_140 = (140 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_141 = (141 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_142 = (142 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_143 = (143 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_144 = (144 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_145 = (145 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_146 = (146 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_147 = (147 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_148 = (148 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_149 = (149 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_150 = (150 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_151 = (151 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_152 = (152 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_153 = (153 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_154 = (154 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_155 = (155 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_156 = (156 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_157 = (157 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_158 = (158 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_159 = (159 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_160 = (160 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_161 = (161 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_162 = (162 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_163 = (163 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_164 = (164 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_165 = (165 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_166 = (166 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_167 = (167 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_168 = (168 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_169 = (169 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_170 = (170 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_171 = (171 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_172 = (172 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_173 = (173 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_174 = (174 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_175 = (175 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_176 = (176 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_177 = (177 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_178 = (178 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_179 = (179 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_180 = (180 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_181 = (181 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_182 = (182 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_183 = (183 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_184 = (184 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_185 = (185 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_186 = (186 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_187 = (187 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_188 = (188 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_189 = (189 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_190 = (190 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_191 = (191 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_192 = (192 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_193 = (193 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_194 = (194 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_195 = (195 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_196 = (196 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_197 = (197 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_198 = (198 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_199 = (199 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_200 = (200 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_201 = (201 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_202 = (202 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_203 = (203 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_204 = (204 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_205 = (205 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_206 = (206 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_207 = (207 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_208 = (208 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_209 = (209 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_210 = (210 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_211 = (211 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_212 = (212 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_213 = (213 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_214 = (214 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_215 = (215 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_216 = (216 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_217 = (217 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_218 = (218 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_219 = (219 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_220 = (220 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_221 = (221 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_222 = (222 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_223 = (223 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_224 = (224 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_225 = (225 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_226 = (226 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_227 = (227 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_228 = (228 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_229 = (229 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_230 = (230 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_231 = (231 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_232 = (232 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_233 = (233 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_234 = (234 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_235 = (235 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_236 = (236 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_237 = (237 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_238 = (238 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_239 = (239 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_240 = (240 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_241 = (241 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_242 = (242 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_243 = (243 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_244 = (244 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_245 = (245 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_246 = (246 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_247 = (247 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_248 = (248 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_249 = (249 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_250 = (250 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_251 = (251 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_252 = (252 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_253 = (253 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_254 = (254 << PB_DBC_CNT_bit);
    const uint32_t PB_DBC_CNT_255 = (255 << PB_DBC_CNT_bit);

};

// 9.13.21 GPIO_DB_CNT_P2_0
struct GPIO_DB_CNT_PC
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0F8;

    const uint32_t PC_DBC_CNT_bit = 0;
    const uint32_t PC_DBC_CNT_bitWidth 8;
    const uint32_t PC_DBC_CNT_0 = (0 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_1 = (1 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_2 = (2 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_3 = (3 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_4 = (4 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_5 = (5 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_6 = (6 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_7 = (7 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_8 = (8 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_9 = (9 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_10 = (10 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_11 = (11 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_12 = (12 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_13 = (13 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_14 = (14 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_15 = (15 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_16 = (16 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_17 = (17 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_18 = (18 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_19 = (19 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_20 = (20 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_21 = (21 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_22 = (22 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_23 = (23 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_24 = (24 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_25 = (25 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_26 = (26 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_27 = (27 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_28 = (28 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_29 = (29 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_30 = (30 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_31 = (31 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_32 = (32 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_33 = (33 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_34 = (34 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_35 = (35 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_36 = (36 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_37 = (37 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_38 = (38 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_39 = (39 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_40 = (40 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_41 = (41 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_42 = (42 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_43 = (43 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_44 = (44 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_45 = (45 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_46 = (46 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_47 = (47 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_48 = (48 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_49 = (49 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_50 = (50 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_51 = (51 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_52 = (52 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_53 = (53 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_54 = (54 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_55 = (55 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_56 = (56 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_57 = (57 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_58 = (58 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_59 = (59 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_60 = (60 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_61 = (61 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_62 = (62 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_63 = (63 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_64 = (64 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_65 = (65 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_66 = (66 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_67 = (67 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_68 = (68 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_69 = (69 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_70 = (70 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_71 = (71 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_72 = (72 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_73 = (73 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_74 = (74 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_75 = (75 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_76 = (76 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_77 = (77 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_78 = (78 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_79 = (79 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_80 = (80 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_81 = (81 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_82 = (82 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_83 = (83 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_84 = (84 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_85 = (85 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_86 = (86 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_87 = (87 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_88 = (88 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_89 = (89 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_90 = (90 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_91 = (91 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_92 = (92 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_93 = (93 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_94 = (94 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_95 = (95 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_96 = (96 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_97 = (97 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_98 = (98 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_99 = (99 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_100 = (100 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_101 = (101 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_102 = (102 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_103 = (103 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_104 = (104 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_105 = (105 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_106 = (106 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_107 = (107 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_108 = (108 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_109 = (109 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_110 = (110 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_111 = (111 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_112 = (112 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_113 = (113 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_114 = (114 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_115 = (115 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_116 = (116 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_117 = (117 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_118 = (118 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_119 = (119 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_120 = (120 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_121 = (121 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_122 = (122 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_123 = (123 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_124 = (124 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_125 = (125 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_126 = (126 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_127 = (127 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_128 = (128 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_129 = (129 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_130 = (130 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_131 = (131 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_132 = (132 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_133 = (133 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_134 = (134 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_135 = (135 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_136 = (136 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_137 = (137 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_138 = (138 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_139 = (139 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_140 = (140 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_141 = (141 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_142 = (142 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_143 = (143 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_144 = (144 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_145 = (145 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_146 = (146 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_147 = (147 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_148 = (148 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_149 = (149 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_150 = (150 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_151 = (151 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_152 = (152 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_153 = (153 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_154 = (154 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_155 = (155 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_156 = (156 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_157 = (157 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_158 = (158 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_159 = (159 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_160 = (160 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_161 = (161 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_162 = (162 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_163 = (163 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_164 = (164 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_165 = (165 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_166 = (166 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_167 = (167 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_168 = (168 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_169 = (169 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_170 = (170 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_171 = (171 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_172 = (172 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_173 = (173 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_174 = (174 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_175 = (175 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_176 = (176 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_177 = (177 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_178 = (178 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_179 = (179 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_180 = (180 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_181 = (181 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_182 = (182 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_183 = (183 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_184 = (184 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_185 = (185 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_186 = (186 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_187 = (187 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_188 = (188 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_189 = (189 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_190 = (190 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_191 = (191 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_192 = (192 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_193 = (193 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_194 = (194 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_195 = (195 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_196 = (196 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_197 = (197 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_198 = (198 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_199 = (199 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_200 = (200 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_201 = (201 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_202 = (202 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_203 = (203 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_204 = (204 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_205 = (205 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_206 = (206 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_207 = (207 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_208 = (208 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_209 = (209 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_210 = (210 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_211 = (211 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_212 = (212 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_213 = (213 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_214 = (214 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_215 = (215 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_216 = (216 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_217 = (217 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_218 = (218 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_219 = (219 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_220 = (220 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_221 = (221 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_222 = (222 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_223 = (223 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_224 = (224 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_225 = (225 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_226 = (226 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_227 = (227 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_228 = (228 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_229 = (229 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_230 = (230 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_231 = (231 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_232 = (232 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_233 = (233 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_234 = (234 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_235 = (235 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_236 = (236 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_237 = (237 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_238 = (238 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_239 = (239 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_240 = (240 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_241 = (241 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_242 = (242 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_243 = (243 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_244 = (244 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_245 = (245 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_246 = (246 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_247 = (247 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_248 = (248 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_249 = (249 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_250 = (250 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_251 = (251 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_252 = (252 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_253 = (253 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_254 = (254 << PC_DBC_CNT_bit);
    const uint32_t PC_DBC_CNT_255 = (255 << PC_DBC_CNT_bit);

};

// 9.13.22 GPIO_DB_CNT_P3_0
struct GPIO_DB_CNT_PD
{
    const uint32_t address = 0x60000000 + 0xD000 + 0x0FC;

    const uint32_t PD_DBC_CNT_bit = 0;
    const uint32_t PD_DBC_CNT_bitWidth 8;
    const uint32_t PD_DBC_CNT_0 = (0 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_1 = (1 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_2 = (2 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_3 = (3 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_4 = (4 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_5 = (5 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_6 = (6 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_7 = (7 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_8 = (8 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_9 = (9 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_10 = (10 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_11 = (11 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_12 = (12 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_13 = (13 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_14 = (14 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_15 = (15 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_16 = (16 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_17 = (17 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_18 = (18 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_19 = (19 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_20 = (20 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_21 = (21 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_22 = (22 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_23 = (23 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_24 = (24 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_25 = (25 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_26 = (26 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_27 = (27 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_28 = (28 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_29 = (29 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_30 = (30 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_31 = (31 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_32 = (32 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_33 = (33 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_34 = (34 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_35 = (35 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_36 = (36 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_37 = (37 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_38 = (38 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_39 = (39 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_40 = (40 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_41 = (41 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_42 = (42 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_43 = (43 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_44 = (44 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_45 = (45 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_46 = (46 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_47 = (47 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_48 = (48 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_49 = (49 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_50 = (50 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_51 = (51 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_52 = (52 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_53 = (53 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_54 = (54 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_55 = (55 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_56 = (56 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_57 = (57 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_58 = (58 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_59 = (59 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_60 = (60 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_61 = (61 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_62 = (62 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_63 = (63 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_64 = (64 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_65 = (65 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_66 = (66 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_67 = (67 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_68 = (68 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_69 = (69 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_70 = (70 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_71 = (71 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_72 = (72 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_73 = (73 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_74 = (74 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_75 = (75 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_76 = (76 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_77 = (77 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_78 = (78 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_79 = (79 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_80 = (80 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_81 = (81 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_82 = (82 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_83 = (83 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_84 = (84 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_85 = (85 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_86 = (86 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_87 = (87 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_88 = (88 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_89 = (89 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_90 = (90 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_91 = (91 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_92 = (92 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_93 = (93 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_94 = (94 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_95 = (95 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_96 = (96 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_97 = (97 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_98 = (98 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_99 = (99 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_100 = (100 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_101 = (101 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_102 = (102 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_103 = (103 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_104 = (104 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_105 = (105 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_106 = (106 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_107 = (107 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_108 = (108 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_109 = (109 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_110 = (110 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_111 = (111 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_112 = (112 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_113 = (113 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_114 = (114 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_115 = (115 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_116 = (116 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_117 = (117 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_118 = (118 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_119 = (119 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_120 = (120 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_121 = (121 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_122 = (122 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_123 = (123 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_124 = (124 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_125 = (125 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_126 = (126 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_127 = (127 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_128 = (128 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_129 = (129 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_130 = (130 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_131 = (131 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_132 = (132 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_133 = (133 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_134 = (134 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_135 = (135 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_136 = (136 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_137 = (137 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_138 = (138 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_139 = (139 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_140 = (140 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_141 = (141 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_142 = (142 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_143 = (143 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_144 = (144 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_145 = (145 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_146 = (146 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_147 = (147 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_148 = (148 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_149 = (149 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_150 = (150 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_151 = (151 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_152 = (152 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_153 = (153 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_154 = (154 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_155 = (155 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_156 = (156 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_157 = (157 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_158 = (158 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_159 = (159 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_160 = (160 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_161 = (161 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_162 = (162 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_163 = (163 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_164 = (164 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_165 = (165 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_166 = (166 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_167 = (167 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_168 = (168 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_169 = (169 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_170 = (170 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_171 = (171 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_172 = (172 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_173 = (173 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_174 = (174 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_175 = (175 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_176 = (176 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_177 = (177 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_178 = (178 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_179 = (179 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_180 = (180 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_181 = (181 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_182 = (182 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_183 = (183 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_184 = (184 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_185 = (185 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_186 = (186 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_187 = (187 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_188 = (188 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_189 = (189 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_190 = (190 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_191 = (191 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_192 = (192 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_193 = (193 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_194 = (194 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_195 = (195 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_196 = (196 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_197 = (197 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_198 = (198 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_199 = (199 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_200 = (200 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_201 = (201 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_202 = (202 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_203 = (203 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_204 = (204 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_205 = (205 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_206 = (206 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_207 = (207 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_208 = (208 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_209 = (209 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_210 = (210 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_211 = (211 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_212 = (212 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_213 = (213 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_214 = (214 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_215 = (215 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_216 = (216 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_217 = (217 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_218 = (218 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_219 = (219 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_220 = (220 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_221 = (221 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_222 = (222 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_223 = (223 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_224 = (224 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_225 = (225 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_226 = (226 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_227 = (227 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_228 = (228 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_229 = (229 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_230 = (230 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_231 = (231 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_232 = (232 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_233 = (233 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_234 = (234 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_235 = (235 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_236 = (236 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_237 = (237 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_238 = (238 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_239 = (239 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_240 = (240 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_241 = (241 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_242 = (242 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_243 = (243 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_244 = (244 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_245 = (245 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_246 = (246 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_247 = (247 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_248 = (248 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_249 = (249 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_250 = (250 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_251 = (251 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_252 = (252 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_253 = (253 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_254 = (254 << PD_DBC_CNT_bit);
    const uint32_t PD_DBC_CNT_255 = (255 << PD_DBC_CNT_bit);

};

// GPIO Controller 6 – Start Addr 6000:d500

/**
 * 9.13.1 GPIO_CNF_0 
 *
 * Designates whether each pin operates as a GPIO or as an SFIO. By default all 
 * pins come up in SFIO mode. These can be programmed to GPIO mode at any stage.
 *
 * Lock bits are used to control the access to the CNF and OE registers. When 
 * set, no one can write to the CNF and OE bits. They can be programmed ONLY 
 * during Boot and get reset by chip reset only.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_CNF_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x000;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x004;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x008;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x00C;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

/**
 * 9.13.2 GPIO_OE_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid.
 * 
 * The set of registers below are used to either drive the signal out or as an 
 * Input. This needs to be programmed depending upon whether the pin needs to 
 * be in either Input or Output.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OE_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x010;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x014;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x018;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x01C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

/**
 * 9.13.3 GPIO_OUT_0
 *
 * GPIO_CNF.x=1 (in GPIO mode) AND GPIO_OE.x=1 (GPIO output enabled) must be 
 * true for this to be valid. This register will take affect only in GPIO 
 * mode. This register is used to drive the value out on a given pin.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OUT_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x020;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x024;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x028;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x02C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * 9.13.4 GPIO_IN_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid. This 
 * is a read-only register used to read the value from the pin. This is an 
 * array of 4 identical register entries; the register fields below apply to each entry.
 */

struct GPIO_IN_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x030;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x034;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x038;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x03C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * All GPIO inputs can be independently programmed to generate an interrupt 
 * request.
 * 
 * In addition, the individual trigger level for interrupt on each input pin 
 * can be programmed as either active-on-high or active-on-low. For example, to 
 * program an active-on-high interrupt on bit 3 of GPIO-PORT_C, write '1' into 
 * bit 3 of GPIO_INT.LVL.C register (this sets the interrupt to be 
 * active-on-high), and then write '1' into bit 3 of GPIO_INT.ENB.C (this 
 * enables interrupt on the named bit).
 *
 * The interrupt flag status can be read in the appropriate bit of the 
 * GPIO_INT.STA.C register. Once the programmed interrupt occurs, status should 
 * be cleared by writing into the appropriate bit of the GPIO_INT.CLR.C 
 * register. Note that the interrupt thus generated is routed to the processor 
 * only if the corresponding bit for GPIO interrupts in the Secondary interrupt
 *  controller is enabled.
 */

/**
 * 9.13.5 GPIO_INT_STA_0
 *
 * GPIO mode (GPIO_CNF.x=1) and GPIO_INT.ENB.x=1 must be true for this condition 
 * to be valid. Every GPIO pin generates an Interrupt when switching from 
 * Low-High to High-Low. Interrupt status for each port is saved in an 
 * Interrupt status register.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_STATUS_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x040;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x044;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x048;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x04C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};


/**
 * 9.13.6 GPIO_INT_ENB_0
 *
 * Every bit of the GPIO pin has an enable which, when enabled, routes the 
 * Interrupt to the Interrupt controller. This is an array of 4 identical 
 * register entries; the register fields below apply to each entry.
 */

struct GPIO_INT_ENABLE_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x050;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x054;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x058;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x05C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

/**
 * 9.13.7 GPIO_INT_LVL_0
 *
 * The GPIO can detect an interrupt for any edge- or level-sensitive signal.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry
 */

struct GPIO_INT_LEVEL_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x060;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x064;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x068;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x06C;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};


/**
 * 9.13.8 GPIO_INT_CLR_0
 * 
 * This write-only register clears the Interrupts that are set. This is valid 
 * only in GPIO mode when GPIO_INT.ENB is set.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_CLEAR_E_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x070;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_F_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x074;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_G_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x078;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_H_RMW
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x07C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

/**
 * 9.13.9 GPIO_MSK_CNF_0
 *
 * Each register is provided with an individual 16-bit version for enabling 
 * Masked Writes to avoid a Read-Modify-Write operation by the firmware. The 
 * exception is for the interrupt clear register, whose functionality is 
 * combined in the interrupt status register. Individual pins only can be 
 * programmed by suitably enabling the write masks in the upper byte of these 
 * 16-bit registers.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_CNF_E
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x080;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_F
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x084;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_G
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x088;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_H
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x08C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.10 GPIO_MSK_OE_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OE_E
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x090;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_F
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x094;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_G
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x098;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_H
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x09C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.11 GPIO_MSK_OUT_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OUT_E
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0A0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_F
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0A4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_G
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0A8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_H
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0AC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.12 GPIO_DB_CTRL_P0_0
 */

struct GPIO_DB_CTRL_PE
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0B0;

    const uint32_t MSK_PE_DBC_EN_7_bit = 15;
    const uint32_t MSK_PE_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_7_DISABLE = (0 << MSK_PE_DBC_EN_7_bit);
    const uint32_t MSK_PE_DBC_EN_7_ENABLE = (1 << MSK_PE_DBC_EN_7_bit); 
         
    const uint32_t MSK_PE_DBC_EN_6_bit = 14;
    const uint32_t MSK_PE_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_6_DISABLE = (0 << MSK_PE_DBC_EN_6_bit);
    const uint32_t MSK_PE_DBC_EN_6_ENABLE = (1 << MSK_PE_DBC_EN_6_bit); 
          
    const uint32_t MSK_PE_DBC_EN_5_bit = 13;
    const uint32_t MSK_PE_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_5_DISABLE = (0 << MSK_PE_DBC_EN_5_bit);
    const uint32_t MSK_PE_DBC_EN_5_ENABLE = (1 << MSK_PE_DBC_EN_5_bit); 
           
    const uint32_t MSK_PE_DBC_EN_4_bit = 12;
    const uint32_t MSK_PE_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_4_DISABLE = (0 << MSK_PE_DBC_EN_4_bit);
    const uint32_t MSK_PE_DBC_EN_4_ENABLE = (1 << MSK_PE_DBC_EN_4_bit); 
            
    const uint32_t MSK_PE_DBC_EN_3_bit = 11;
    const uint32_t MSK_PE_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_3_DISABLE = (0 << MSK_PE_DBC_EN_3_bit);
    const uint32_t MSK_PE_DBC_EN_3_ENABLE = (1 << MSK_PE_DBC_EN_3_bit); 
             
    const uint32_t MSK_PE_DBC_EN_2_bit = 10;
    const uint32_t MSK_PE_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_2_DISABLE = (0 << MSK_PE_DBC_EN_2_bit);
    const uint32_t MSK_PE_DBC_EN_2_ENABLE = (1 << MSK_PE_DBC_EN_2_bit); 
              
    const uint32_t MSK_PE_DBC_EN_1_bit = 9;
    const uint32_t MSK_PE_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_1_DISABLE = (0 << MSK_PE_DBC_EN_1_bit);
    const uint32_t MSK_PE_DBC_EN_1_ENABLE = (1 << MSK_PE_DBC_EN_1_bit); 
               
    const uint32_t MSK_PE_DBC_EN_0_bit = 8;
    const uint32_t MSK_PE_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PE_DBC_EN_0_DISABLE = (0 << MSK_PE_DBC_EN_0_bit);
    const uint32_t MSK_PE_DBC_EN_0_ENABLE = (1 << MSK_PE_DBC_EN_0_bit); 
 
    const uint32_t PE_DBC_EN_7_bit = 7;
    const uint32_t PE_DBC_EN_7_bitWidth = 1;
    const uint32_t PE_DBC_EN_7_LOW = (0 << PE_DBC_EN_7_bit);
    const uint32_t PE_DBC_EN_7_HIGH = (1 << PE_DBC_EN_7_bit); 
 
    const uint32_t PE_DBC_EN_6_bit = 6;
    const uint32_t PE_DBC_EN_6_bitWidth = 1;
    const uint32_t PE_DBC_EN_6_LOW = (0 << PE_DBC_EN_6_bit);
    const uint32_t PE_DBC_EN_6_HIGH = (1 << PE_DBC_EN_6_bit); 
 
    const uint32_t PE_DBC_EN_5_bit = 5;
    const uint32_t PE_DBC_EN_5_bitWidth = 1;
    const uint32_t PE_DBC_EN_5_LOW = (0 << PE_DBC_EN_5_bit);
    const uint32_t PE_DBC_EN_5_HIGH = (1 << PE_DBC_EN_5_bit); 
 
    const uint32_t PE_DBC_EN_4_bit = 4;
    const uint32_t PE_DBC_EN_4_bitWidth = 1;
    const uint32_t PE_DBC_EN_4_LOW = (0 << PE_DBC_EN_4_bit);
    const uint32_t PE_DBC_EN_4_HIGH = (1 << PE_DBC_EN_4_bit); 
 
    const uint32_t PE_DBC_EN_3_bit = 3;
    const uint32_t PE_DBC_EN_3_bitWidth = 1;
    const uint32_t PE_DBC_EN_3_LOW = (0 << PE_DBC_EN_3_bit);
    const uint32_t PE_DBC_EN_3_HIGH = (1 << PE_DBC_EN_3_bit); 
 
    const uint32_t PE_DBC_EN_2_bit = 2;
    const uint32_t PE_DBC_EN_2_bitWidth = 1;
    const uint32_t PE_DBC_EN_2_LOW = (0 << PE_DBC_EN_2_bit);
    const uint32_t PE_DBC_EN_2_HIGH = (1 << PE_DBC_EN_2_bit); 
 
    const uint32_t PE_DBC_EN_1_bit = 1;
    const uint32_t PE_DBC_EN_1_bitWidth = 1;
    const uint32_t PE_DBC_EN_1_LOW = (0 << PE_DBC_EN_1_bit);
    const uint32_t PE_DBC_EN_1_HIGH = (1 << PE_DBC_EN_1_bit); 
 
    const uint32_t PE_DBC_EN_0_bit = 0;
    const uint32_t PE_DBC_EN_0_bitWidth = 1;
    const uint32_t PE_DBC_EN_0_LOW = (0 << PE_DBC_EN_0_bit);
    const uint32_t PE_DBC_EN_0_HIGH = (1 << PE_DBC_EN_0_bit); 
 
};

// 9.13.13 GPIO_DB_CTRL_P1_0
struct GPIO_DB_CTRL_PF
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0B4;

    const uint32_t MSK_PF_DBC_EN_7_bit = 15;
    const uint32_t MSK_PF_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_7_DISABLE = (0 << MSK_PF_DBC_EN_7_bit);
    const uint32_t MSK_PF_DBC_EN_7_ENABLE = (1 << MSK_PF_DBC_EN_7_bit); 
         
    const uint32_t MSK_PF_DBC_EN_6_bit = 14;
    const uint32_t MSK_PF_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_6_DISABLE = (0 << MSK_PF_DBC_EN_6_bit);
    const uint32_t MSK_PF_DBC_EN_6_ENABLE = (1 << MSK_PF_DBC_EN_6_bit); 
          
    const uint32_t MSK_PF_DBC_EN_5_bit = 13;
    const uint32_t MSK_PF_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_5_DISABLE = (0 << MSK_PF_DBC_EN_5_bit);
    const uint32_t MSK_PF_DBC_EN_5_ENABLE = (1 << MSK_PF_DBC_EN_5_bit); 
           
    const uint32_t MSK_PF_DBC_EN_4_bit = 12;
    const uint32_t MSK_PF_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_4_DISABLE = (0 << MSK_PF_DBC_EN_4_bit);
    const uint32_t MSK_PF_DBC_EN_4_ENABLE = (1 << MSK_PF_DBC_EN_4_bit); 
            
    const uint32_t MSK_PF_DBC_EN_3_bit = 11;
    const uint32_t MSK_PF_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_3_DISABLE = (0 << MSK_PF_DBC_EN_3_bit);
    const uint32_t MSK_PF_DBC_EN_3_ENABLE = (1 << MSK_PF_DBC_EN_3_bit); 
             
    const uint32_t MSK_PF_DBC_EN_2_bit = 10;
    const uint32_t MSK_PF_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_2_DISABLE = (0 << MSK_PF_DBC_EN_2_bit);
    const uint32_t MSK_PF_DBC_EN_2_ENABLE = (1 << MSK_PF_DBC_EN_2_bit); 
              
    const uint32_t MSK_PF_DBC_EN_1_bit = 9;
    const uint32_t MSK_PF_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_1_DISABLE = (0 << MSK_PF_DBC_EN_1_bit);
    const uint32_t MSK_PF_DBC_EN_1_ENABLE = (1 << MSK_PF_DBC_EN_1_bit); 
               
    const uint32_t MSK_PF_DBC_EN_0_bit = 8;
    const uint32_t MSK_PF_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PF_DBC_EN_0_DISABLE = (0 << MSK_PF_DBC_EN_0_bit);
    const uint32_t MSK_PF_DBC_EN_0_ENABLE = (1 << MSK_PF_DBC_EN_0_bit); 
 
    const uint32_t PF_DBC_EN_7_bit = 7;
    const uint32_t PF_DBC_EN_7_bitWidth = 1;
    const uint32_t PF_DBC_EN_7_LOW = (0 << PF_DBC_EN_7_bit);
    const uint32_t PF_DBC_EN_7_HIGH = (1 << PF_DBC_EN_7_bit); 
 
    const uint32_t PF_DBC_EN_6_bit = 6;
    const uint32_t PF_DBC_EN_6_bitWidth = 1;
    const uint32_t PF_DBC_EN_6_LOW = (0 << PF_DBC_EN_6_bit);
    const uint32_t PF_DBC_EN_6_HIGH = (1 << PF_DBC_EN_6_bit); 
 
    const uint32_t PF_DBC_EN_5_bit = 5;
    const uint32_t PF_DBC_EN_5_bitWidth = 1;
    const uint32_t PF_DBC_EN_5_LOW = (0 << PF_DBC_EN_5_bit);
    const uint32_t PF_DBC_EN_5_HIGH = (1 << PF_DBC_EN_5_bit); 
 
    const uint32_t PF_DBC_EN_4_bit = 4;
    const uint32_t PF_DBC_EN_4_bitWidth = 1;
    const uint32_t PF_DBC_EN_4_LOW = (0 << PF_DBC_EN_4_bit);
    const uint32_t PF_DBC_EN_4_HIGH = (1 << PF_DBC_EN_4_bit); 
 
    const uint32_t PF_DBC_EN_3_bit = 3;
    const uint32_t PF_DBC_EN_3_bitWidth = 1;
    const uint32_t PF_DBC_EN_3_LOW = (0 << PF_DBC_EN_3_bit);
    const uint32_t PF_DBC_EN_3_HIGH = (1 << PF_DBC_EN_3_bit); 
 
    const uint32_t PF_DBC_EN_2_bit = 2;
    const uint32_t PF_DBC_EN_2_bitWidth = 1;
    const uint32_t PF_DBC_EN_2_LOW = (0 << PF_DBC_EN_2_bit);
    const uint32_t PF_DBC_EN_2_HIGH = (1 << PF_DBC_EN_2_bit); 
 
    const uint32_t PF_DBC_EN_1_bit = 1;
    const uint32_t PF_DBC_EN_1_bitWidth = 1;
    const uint32_t PF_DBC_EN_1_LOW = (0 << PF_DBC_EN_1_bit);
    const uint32_t PF_DBC_EN_1_HIGH = (1 << PF_DBC_EN_1_bit); 
 
    const uint32_t PF_DBC_EN_0_bit = 0;
    const uint32_t PF_DBC_EN_0_bitWidth = 1;
    const uint32_t PF_DBC_EN_0_LOW = (0 << PF_DBC_EN_0_bit);
    const uint32_t PF_DBC_EN_0_HIGH = (1 << PF_DBC_EN_0_bit); 
 
};

// 9.13.14 GPIO_DB_CTRL_P2_0
struct GPIO_DB_CTRL_PG
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0B8;

    const uint32_t MSK_PG_DBC_EN_7_bit = 15;
    const uint32_t MSK_PG_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_7_DISABLE = (0 << MSK_PG_DBC_EN_7_bit);
    const uint32_t MSK_PG_DBC_EN_7_ENABLE = (1 << MSK_PG_DBC_EN_7_bit); 
         
    const uint32_t MSK_PG_DBC_EN_6_bit = 14;
    const uint32_t MSK_PG_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_6_DISABLE = (0 << MSK_PG_DBC_EN_6_bit);
    const uint32_t MSK_PG_DBC_EN_6_ENABLE = (1 << MSK_PG_DBC_EN_6_bit); 
          
    const uint32_t MSK_PG_DBC_EN_5_bit = 13;
    const uint32_t MSK_PG_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_5_DISABLE = (0 << MSK_PG_DBC_EN_5_bit);
    const uint32_t MSK_PG_DBC_EN_5_ENABLE = (1 << MSK_PG_DBC_EN_5_bit); 
           
    const uint32_t MSK_PG_DBC_EN_4_bit = 12;
    const uint32_t MSK_PG_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_4_DISABLE = (0 << MSK_PG_DBC_EN_4_bit);
    const uint32_t MSK_PG_DBC_EN_4_ENABLE = (1 << MSK_PG_DBC_EN_4_bit); 
            
    const uint32_t MSK_PG_DBC_EN_3_bit = 11;
    const uint32_t MSK_PG_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_3_DISABLE = (0 << MSK_PG_DBC_EN_3_bit);
    const uint32_t MSK_PG_DBC_EN_3_ENABLE = (1 << MSK_PG_DBC_EN_3_bit); 
             
    const uint32_t MSK_PG_DBC_EN_2_bit = 10;
    const uint32_t MSK_PG_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_2_DISABLE = (0 << MSK_PG_DBC_EN_2_bit);
    const uint32_t MSK_PG_DBC_EN_2_ENABLE = (1 << MSK_PG_DBC_EN_2_bit); 
              
    const uint32_t MSK_PG_DBC_EN_1_bit = 9;
    const uint32_t MSK_PG_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_1_DISABLE = (0 << MSK_PG_DBC_EN_1_bit);
    const uint32_t MSK_PG_DBC_EN_1_ENABLE = (1 << MSK_PG_DBC_EN_1_bit); 
               
    const uint32_t MSK_PG_DBC_EN_0_bit = 8;
    const uint32_t MSK_PG_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PG_DBC_EN_0_DISABLE = (0 << MSK_PG_DBC_EN_0_bit);
    const uint32_t MSK_PG_DBC_EN_0_ENABLE = (1 << MSK_PG_DBC_EN_0_bit); 
 
    const uint32_t PG_DBC_EN_7_bit = 7;
    const uint32_t PG_DBC_EN_7_bitWidth = 1;
    const uint32_t PG_DBC_EN_7_LOW = (0 << PG_DBC_EN_7_bit);
    const uint32_t PG_DBC_EN_7_HIGH = (1 << PG_DBC_EN_7_bit); 
 
    const uint32_t PG_DBC_EN_6_bit = 6;
    const uint32_t PG_DBC_EN_6_bitWidth = 1;
    const uint32_t PG_DBC_EN_6_LOW = (0 << PG_DBC_EN_6_bit);
    const uint32_t PG_DBC_EN_6_HIGH = (1 << PG_DBC_EN_6_bit); 
 
    const uint32_t PG_DBC_EN_5_bit = 5;
    const uint32_t PG_DBC_EN_5_bitWidth = 1;
    const uint32_t PG_DBC_EN_5_LOW = (0 << PG_DBC_EN_5_bit);
    const uint32_t PG_DBC_EN_5_HIGH = (1 << PG_DBC_EN_5_bit); 
 
    const uint32_t PG_DBC_EN_4_bit = 4;
    const uint32_t PG_DBC_EN_4_bitWidth = 1;
    const uint32_t PG_DBC_EN_4_LOW = (0 << PG_DBC_EN_4_bit);
    const uint32_t PG_DBC_EN_4_HIGH = (1 << PG_DBC_EN_4_bit); 
 
    const uint32_t PG_DBC_EN_3_bit = 3;
    const uint32_t PG_DBC_EN_3_bitWidth = 1;
    const uint32_t PG_DBC_EN_3_LOW = (0 << PG_DBC_EN_3_bit);
    const uint32_t PG_DBC_EN_3_HIGH = (1 << PG_DBC_EN_3_bit); 
 
    const uint32_t PG_DBC_EN_2_bit = 2;
    const uint32_t PG_DBC_EN_2_bitWidth = 1;
    const uint32_t PG_DBC_EN_2_LOW = (0 << PG_DBC_EN_2_bit);
    const uint32_t PG_DBC_EN_2_HIGH = (1 << PG_DBC_EN_2_bit); 
 
    const uint32_t PG_DBC_EN_1_bit = 1;
    const uint32_t PG_DBC_EN_1_bitWidth = 1;
    const uint32_t PG_DBC_EN_1_LOW = (0 << PG_DBC_EN_1_bit);
    const uint32_t PG_DBC_EN_1_HIGH = (1 << PG_DBC_EN_1_bit); 
 
    const uint32_t PG_DBC_EN_0_bit = 0;
    const uint32_t PG_DBC_EN_0_bitWidth = 1;
    const uint32_t PG_DBC_EN_0_LOW = (0 << PG_DBC_EN_0_bit);
    const uint32_t PG_DBC_EN_0_HIGH = (1 << PG_DBC_EN_0_bit); 
 
};

// 9.13.15 GPIO_DB_CTRL_P3_0
struct GPIO_DB_CTRL_PH
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0BC;

    const uint32_t MSK_PH_DBC_EN_7_bit = 15;
    const uint32_t MSK_PH_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_7_DISABLE = (0 << MSK_PH_DBC_EN_7_bit);
    const uint32_t MSK_PH_DBC_EN_7_ENABLE = (1 << MSK_PH_DBC_EN_7_bit); 
         
    const uint32_t MSK_PH_DBC_EN_6_bit = 14;
    const uint32_t MSK_PH_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_6_DISABLE = (0 << MSK_PH_DBC_EN_6_bit);
    const uint32_t MSK_PH_DBC_EN_6_ENABLE = (1 << MSK_PH_DBC_EN_6_bit); 
          
    const uint32_t MSK_PH_DBC_EN_5_bit = 13;
    const uint32_t MSK_PH_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_5_DISABLE = (0 << MSK_PH_DBC_EN_5_bit);
    const uint32_t MSK_PH_DBC_EN_5_ENABLE = (1 << MSK_PH_DBC_EN_5_bit); 
           
    const uint32_t MSK_PH_DBC_EN_4_bit = 12;
    const uint32_t MSK_PH_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_4_DISABLE = (0 << MSK_PH_DBC_EN_4_bit);
    const uint32_t MSK_PH_DBC_EN_4_ENABLE = (1 << MSK_PH_DBC_EN_4_bit); 
            
    const uint32_t MSK_PH_DBC_EN_3_bit = 11;
    const uint32_t MSK_PH_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_3_DISABLE = (0 << MSK_PH_DBC_EN_3_bit);
    const uint32_t MSK_PH_DBC_EN_3_ENABLE = (1 << MSK_PH_DBC_EN_3_bit); 
             
    const uint32_t MSK_PH_DBC_EN_2_bit = 10;
    const uint32_t MSK_PH_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_2_DISABLE = (0 << MSK_PH_DBC_EN_2_bit);
    const uint32_t MSK_PH_DBC_EN_2_ENABLE = (1 << MSK_PH_DBC_EN_2_bit); 
              
    const uint32_t MSK_PH_DBC_EN_1_bit = 9;
    const uint32_t MSK_PH_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_1_DISABLE = (0 << MSK_PH_DBC_EN_1_bit);
    const uint32_t MSK_PH_DBC_EN_1_ENABLE = (1 << MSK_PH_DBC_EN_1_bit); 
               
    const uint32_t MSK_PH_DBC_EN_0_bit = 8;
    const uint32_t MSK_PH_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PH_DBC_EN_0_DISABLE = (0 << MSK_PH_DBC_EN_0_bit);
    const uint32_t MSK_PH_DBC_EN_0_ENABLE = (1 << MSK_PH_DBC_EN_0_bit); 
 
    const uint32_t PH_DBC_EN_7_bit = 7;
    const uint32_t PH_DBC_EN_7_bitWidth = 1;
    const uint32_t PH_DBC_EN_7_LOW = (0 << PH_DBC_EN_7_bit);
    const uint32_t PH_DBC_EN_7_HIGH = (1 << PH_DBC_EN_7_bit); 
 
    const uint32_t PH_DBC_EN_6_bit = 6;
    const uint32_t PH_DBC_EN_6_bitWidth = 1;
    const uint32_t PH_DBC_EN_6_LOW = (0 << PH_DBC_EN_6_bit);
    const uint32_t PH_DBC_EN_6_HIGH = (1 << PH_DBC_EN_6_bit); 
 
    const uint32_t PH_DBC_EN_5_bit = 5;
    const uint32_t PH_DBC_EN_5_bitWidth = 1;
    const uint32_t PH_DBC_EN_5_LOW = (0 << PH_DBC_EN_5_bit);
    const uint32_t PH_DBC_EN_5_HIGH = (1 << PH_DBC_EN_5_bit); 
 
    const uint32_t PH_DBC_EN_4_bit = 4;
    const uint32_t PH_DBC_EN_4_bitWidth = 1;
    const uint32_t PH_DBC_EN_4_LOW = (0 << PH_DBC_EN_4_bit);
    const uint32_t PH_DBC_EN_4_HIGH = (1 << PH_DBC_EN_4_bit); 
 
    const uint32_t PH_DBC_EN_3_bit = 3;
    const uint32_t PH_DBC_EN_3_bitWidth = 1;
    const uint32_t PH_DBC_EN_3_LOW = (0 << PH_DBC_EN_3_bit);
    const uint32_t PH_DBC_EN_3_HIGH = (1 << PH_DBC_EN_3_bit); 
 
    const uint32_t PH_DBC_EN_2_bit = 2;
    const uint32_t PH_DBC_EN_2_bitWidth = 1;
    const uint32_t PH_DBC_EN_2_LOW = (0 << PH_DBC_EN_2_bit);
    const uint32_t PH_DBC_EN_2_HIGH = (1 << PH_DBC_EN_2_bit); 
 
    const uint32_t PH_DBC_EN_1_bit = 1;
    const uint32_t PH_DBC_EN_1_bitWidth = 1;
    const uint32_t PH_DBC_EN_1_LOW = (0 << PH_DBC_EN_1_bit);
    const uint32_t PH_DBC_EN_1_HIGH = (1 << PH_DBC_EN_1_bit); 
 
    const uint32_t PH_DBC_EN_0_bit = 0;
    const uint32_t PH_DBC_EN_0_bitWidth = 1;
    const uint32_t PH_DBC_EN_0_LOW = (0 << PH_DBC_EN_0_bit);
    const uint32_t PH_DBC_EN_0_HIGH = (1 << PH_DBC_EN_0_bit); 
 
};

/**
 * 9.13.16 GPIO_MSK_INT_STA_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_STATUS_E
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0C0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_F
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0C4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_G
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0C8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_H
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0CC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.17 GPIO_MSK_INT_ENB_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_E
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0D0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_F
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0D4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_G
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0D8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_H
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0DC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.18 GPIO_MSK_INT_LVL_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_E
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0E0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_F
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0E4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_G
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0E8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_H
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0EC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

// 9.13.19 GPIO_DB_CNT_P0_0
struct GPIO_DB_CNT_PE
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0F0;

    const uint32_t PE_DBC_CNT_bit = 0;
    const uint32_t PE_DBC_CNT_bitWidth 8;
    const uint32_t PE_DBC_CNT_0 = (0 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_1 = (1 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_2 = (2 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_3 = (3 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_4 = (4 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_5 = (5 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_6 = (6 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_7 = (7 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_8 = (8 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_9 = (9 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_10 = (10 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_11 = (11 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_12 = (12 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_13 = (13 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_14 = (14 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_15 = (15 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_16 = (16 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_17 = (17 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_18 = (18 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_19 = (19 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_20 = (20 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_21 = (21 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_22 = (22 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_23 = (23 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_24 = (24 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_25 = (25 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_26 = (26 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_27 = (27 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_28 = (28 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_29 = (29 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_30 = (30 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_31 = (31 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_32 = (32 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_33 = (33 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_34 = (34 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_35 = (35 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_36 = (36 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_37 = (37 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_38 = (38 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_39 = (39 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_40 = (40 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_41 = (41 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_42 = (42 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_43 = (43 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_44 = (44 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_45 = (45 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_46 = (46 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_47 = (47 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_48 = (48 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_49 = (49 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_50 = (50 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_51 = (51 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_52 = (52 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_53 = (53 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_54 = (54 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_55 = (55 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_56 = (56 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_57 = (57 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_58 = (58 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_59 = (59 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_60 = (60 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_61 = (61 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_62 = (62 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_63 = (63 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_64 = (64 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_65 = (65 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_66 = (66 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_67 = (67 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_68 = (68 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_69 = (69 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_70 = (70 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_71 = (71 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_72 = (72 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_73 = (73 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_74 = (74 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_75 = (75 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_76 = (76 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_77 = (77 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_78 = (78 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_79 = (79 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_80 = (80 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_81 = (81 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_82 = (82 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_83 = (83 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_84 = (84 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_85 = (85 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_86 = (86 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_87 = (87 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_88 = (88 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_89 = (89 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_90 = (90 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_91 = (91 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_92 = (92 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_93 = (93 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_94 = (94 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_95 = (95 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_96 = (96 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_97 = (97 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_98 = (98 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_99 = (99 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_100 = (100 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_101 = (101 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_102 = (102 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_103 = (103 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_104 = (104 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_105 = (105 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_106 = (106 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_107 = (107 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_108 = (108 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_109 = (109 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_110 = (110 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_111 = (111 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_112 = (112 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_113 = (113 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_114 = (114 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_115 = (115 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_116 = (116 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_117 = (117 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_118 = (118 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_119 = (119 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_120 = (120 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_121 = (121 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_122 = (122 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_123 = (123 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_124 = (124 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_125 = (125 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_126 = (126 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_127 = (127 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_128 = (128 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_129 = (129 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_130 = (130 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_131 = (131 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_132 = (132 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_133 = (133 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_134 = (134 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_135 = (135 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_136 = (136 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_137 = (137 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_138 = (138 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_139 = (139 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_140 = (140 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_141 = (141 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_142 = (142 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_143 = (143 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_144 = (144 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_145 = (145 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_146 = (146 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_147 = (147 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_148 = (148 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_149 = (149 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_150 = (150 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_151 = (151 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_152 = (152 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_153 = (153 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_154 = (154 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_155 = (155 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_156 = (156 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_157 = (157 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_158 = (158 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_159 = (159 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_160 = (160 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_161 = (161 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_162 = (162 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_163 = (163 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_164 = (164 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_165 = (165 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_166 = (166 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_167 = (167 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_168 = (168 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_169 = (169 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_170 = (170 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_171 = (171 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_172 = (172 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_173 = (173 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_174 = (174 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_175 = (175 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_176 = (176 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_177 = (177 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_178 = (178 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_179 = (179 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_180 = (180 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_181 = (181 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_182 = (182 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_183 = (183 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_184 = (184 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_185 = (185 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_186 = (186 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_187 = (187 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_188 = (188 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_189 = (189 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_190 = (190 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_191 = (191 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_192 = (192 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_193 = (193 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_194 = (194 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_195 = (195 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_196 = (196 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_197 = (197 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_198 = (198 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_199 = (199 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_200 = (200 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_201 = (201 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_202 = (202 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_203 = (203 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_204 = (204 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_205 = (205 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_206 = (206 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_207 = (207 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_208 = (208 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_209 = (209 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_210 = (210 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_211 = (211 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_212 = (212 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_213 = (213 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_214 = (214 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_215 = (215 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_216 = (216 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_217 = (217 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_218 = (218 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_219 = (219 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_220 = (220 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_221 = (221 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_222 = (222 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_223 = (223 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_224 = (224 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_225 = (225 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_226 = (226 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_227 = (227 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_228 = (228 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_229 = (229 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_230 = (230 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_231 = (231 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_232 = (232 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_233 = (233 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_234 = (234 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_235 = (235 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_236 = (236 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_237 = (237 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_238 = (238 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_239 = (239 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_240 = (240 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_241 = (241 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_242 = (242 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_243 = (243 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_244 = (244 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_245 = (245 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_246 = (246 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_247 = (247 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_248 = (248 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_249 = (249 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_250 = (250 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_251 = (251 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_252 = (252 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_253 = (253 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_254 = (254 << PE_DBC_CNT_bit);
    const uint32_t PE_DBC_CNT_255 = (255 << PE_DBC_CNT_bit);

};

// 9.13.20 GPIO_DB_CNT_P1_0
struct GPIO_DB_CNT_PF
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0F4;

    const uint32_t PF_DBC_CNT_bit = 0;
    const uint32_t PF_DBC_CNT_bitWidth 8;
    const uint32_t PF_DBC_CNT_0 = (0 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_1 = (1 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_2 = (2 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_3 = (3 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_4 = (4 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_5 = (5 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_6 = (6 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_7 = (7 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_8 = (8 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_9 = (9 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_10 = (10 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_11 = (11 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_12 = (12 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_13 = (13 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_14 = (14 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_15 = (15 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_16 = (16 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_17 = (17 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_18 = (18 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_19 = (19 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_20 = (20 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_21 = (21 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_22 = (22 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_23 = (23 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_24 = (24 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_25 = (25 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_26 = (26 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_27 = (27 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_28 = (28 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_29 = (29 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_30 = (30 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_31 = (31 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_32 = (32 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_33 = (33 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_34 = (34 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_35 = (35 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_36 = (36 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_37 = (37 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_38 = (38 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_39 = (39 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_40 = (40 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_41 = (41 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_42 = (42 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_43 = (43 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_44 = (44 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_45 = (45 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_46 = (46 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_47 = (47 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_48 = (48 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_49 = (49 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_50 = (50 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_51 = (51 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_52 = (52 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_53 = (53 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_54 = (54 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_55 = (55 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_56 = (56 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_57 = (57 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_58 = (58 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_59 = (59 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_60 = (60 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_61 = (61 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_62 = (62 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_63 = (63 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_64 = (64 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_65 = (65 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_66 = (66 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_67 = (67 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_68 = (68 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_69 = (69 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_70 = (70 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_71 = (71 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_72 = (72 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_73 = (73 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_74 = (74 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_75 = (75 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_76 = (76 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_77 = (77 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_78 = (78 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_79 = (79 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_80 = (80 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_81 = (81 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_82 = (82 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_83 = (83 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_84 = (84 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_85 = (85 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_86 = (86 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_87 = (87 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_88 = (88 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_89 = (89 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_90 = (90 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_91 = (91 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_92 = (92 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_93 = (93 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_94 = (94 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_95 = (95 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_96 = (96 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_97 = (97 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_98 = (98 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_99 = (99 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_100 = (100 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_101 = (101 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_102 = (102 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_103 = (103 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_104 = (104 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_105 = (105 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_106 = (106 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_107 = (107 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_108 = (108 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_109 = (109 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_110 = (110 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_111 = (111 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_112 = (112 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_113 = (113 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_114 = (114 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_115 = (115 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_116 = (116 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_117 = (117 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_118 = (118 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_119 = (119 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_120 = (120 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_121 = (121 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_122 = (122 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_123 = (123 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_124 = (124 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_125 = (125 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_126 = (126 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_127 = (127 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_128 = (128 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_129 = (129 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_130 = (130 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_131 = (131 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_132 = (132 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_133 = (133 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_134 = (134 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_135 = (135 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_136 = (136 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_137 = (137 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_138 = (138 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_139 = (139 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_140 = (140 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_141 = (141 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_142 = (142 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_143 = (143 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_144 = (144 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_145 = (145 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_146 = (146 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_147 = (147 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_148 = (148 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_149 = (149 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_150 = (150 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_151 = (151 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_152 = (152 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_153 = (153 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_154 = (154 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_155 = (155 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_156 = (156 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_157 = (157 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_158 = (158 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_159 = (159 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_160 = (160 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_161 = (161 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_162 = (162 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_163 = (163 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_164 = (164 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_165 = (165 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_166 = (166 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_167 = (167 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_168 = (168 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_169 = (169 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_170 = (170 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_171 = (171 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_172 = (172 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_173 = (173 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_174 = (174 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_175 = (175 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_176 = (176 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_177 = (177 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_178 = (178 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_179 = (179 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_180 = (180 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_181 = (181 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_182 = (182 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_183 = (183 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_184 = (184 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_185 = (185 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_186 = (186 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_187 = (187 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_188 = (188 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_189 = (189 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_190 = (190 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_191 = (191 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_192 = (192 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_193 = (193 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_194 = (194 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_195 = (195 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_196 = (196 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_197 = (197 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_198 = (198 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_199 = (199 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_200 = (200 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_201 = (201 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_202 = (202 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_203 = (203 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_204 = (204 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_205 = (205 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_206 = (206 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_207 = (207 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_208 = (208 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_209 = (209 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_210 = (210 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_211 = (211 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_212 = (212 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_213 = (213 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_214 = (214 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_215 = (215 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_216 = (216 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_217 = (217 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_218 = (218 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_219 = (219 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_220 = (220 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_221 = (221 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_222 = (222 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_223 = (223 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_224 = (224 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_225 = (225 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_226 = (226 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_227 = (227 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_228 = (228 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_229 = (229 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_230 = (230 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_231 = (231 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_232 = (232 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_233 = (233 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_234 = (234 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_235 = (235 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_236 = (236 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_237 = (237 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_238 = (238 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_239 = (239 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_240 = (240 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_241 = (241 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_242 = (242 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_243 = (243 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_244 = (244 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_245 = (245 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_246 = (246 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_247 = (247 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_248 = (248 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_249 = (249 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_250 = (250 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_251 = (251 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_252 = (252 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_253 = (253 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_254 = (254 << PF_DBC_CNT_bit);
    const uint32_t PF_DBC_CNT_255 = (255 << PF_DBC_CNT_bit);

};

// 9.13.21 GPIO_DB_CNT_P2_0
struct GPIO_DB_CNT_PG
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0F8;

    const uint32_t PG_DBC_CNT_bit = 0;
    const uint32_t PG_DBC_CNT_bitWidth 8;
    const uint32_t PG_DBC_CNT_0 = (0 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_1 = (1 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_2 = (2 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_3 = (3 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_4 = (4 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_5 = (5 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_6 = (6 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_7 = (7 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_8 = (8 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_9 = (9 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_10 = (10 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_11 = (11 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_12 = (12 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_13 = (13 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_14 = (14 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_15 = (15 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_16 = (16 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_17 = (17 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_18 = (18 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_19 = (19 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_20 = (20 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_21 = (21 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_22 = (22 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_23 = (23 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_24 = (24 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_25 = (25 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_26 = (26 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_27 = (27 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_28 = (28 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_29 = (29 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_30 = (30 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_31 = (31 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_32 = (32 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_33 = (33 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_34 = (34 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_35 = (35 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_36 = (36 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_37 = (37 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_38 = (38 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_39 = (39 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_40 = (40 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_41 = (41 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_42 = (42 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_43 = (43 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_44 = (44 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_45 = (45 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_46 = (46 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_47 = (47 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_48 = (48 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_49 = (49 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_50 = (50 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_51 = (51 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_52 = (52 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_53 = (53 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_54 = (54 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_55 = (55 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_56 = (56 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_57 = (57 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_58 = (58 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_59 = (59 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_60 = (60 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_61 = (61 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_62 = (62 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_63 = (63 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_64 = (64 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_65 = (65 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_66 = (66 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_67 = (67 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_68 = (68 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_69 = (69 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_70 = (70 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_71 = (71 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_72 = (72 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_73 = (73 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_74 = (74 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_75 = (75 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_76 = (76 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_77 = (77 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_78 = (78 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_79 = (79 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_80 = (80 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_81 = (81 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_82 = (82 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_83 = (83 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_84 = (84 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_85 = (85 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_86 = (86 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_87 = (87 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_88 = (88 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_89 = (89 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_90 = (90 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_91 = (91 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_92 = (92 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_93 = (93 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_94 = (94 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_95 = (95 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_96 = (96 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_97 = (97 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_98 = (98 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_99 = (99 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_100 = (100 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_101 = (101 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_102 = (102 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_103 = (103 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_104 = (104 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_105 = (105 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_106 = (106 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_107 = (107 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_108 = (108 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_109 = (109 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_110 = (110 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_111 = (111 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_112 = (112 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_113 = (113 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_114 = (114 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_115 = (115 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_116 = (116 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_117 = (117 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_118 = (118 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_119 = (119 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_120 = (120 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_121 = (121 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_122 = (122 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_123 = (123 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_124 = (124 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_125 = (125 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_126 = (126 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_127 = (127 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_128 = (128 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_129 = (129 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_130 = (130 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_131 = (131 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_132 = (132 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_133 = (133 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_134 = (134 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_135 = (135 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_136 = (136 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_137 = (137 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_138 = (138 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_139 = (139 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_140 = (140 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_141 = (141 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_142 = (142 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_143 = (143 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_144 = (144 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_145 = (145 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_146 = (146 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_147 = (147 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_148 = (148 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_149 = (149 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_150 = (150 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_151 = (151 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_152 = (152 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_153 = (153 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_154 = (154 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_155 = (155 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_156 = (156 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_157 = (157 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_158 = (158 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_159 = (159 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_160 = (160 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_161 = (161 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_162 = (162 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_163 = (163 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_164 = (164 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_165 = (165 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_166 = (166 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_167 = (167 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_168 = (168 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_169 = (169 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_170 = (170 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_171 = (171 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_172 = (172 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_173 = (173 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_174 = (174 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_175 = (175 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_176 = (176 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_177 = (177 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_178 = (178 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_179 = (179 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_180 = (180 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_181 = (181 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_182 = (182 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_183 = (183 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_184 = (184 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_185 = (185 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_186 = (186 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_187 = (187 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_188 = (188 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_189 = (189 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_190 = (190 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_191 = (191 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_192 = (192 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_193 = (193 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_194 = (194 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_195 = (195 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_196 = (196 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_197 = (197 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_198 = (198 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_199 = (199 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_200 = (200 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_201 = (201 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_202 = (202 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_203 = (203 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_204 = (204 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_205 = (205 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_206 = (206 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_207 = (207 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_208 = (208 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_209 = (209 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_210 = (210 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_211 = (211 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_212 = (212 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_213 = (213 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_214 = (214 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_215 = (215 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_216 = (216 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_217 = (217 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_218 = (218 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_219 = (219 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_220 = (220 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_221 = (221 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_222 = (222 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_223 = (223 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_224 = (224 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_225 = (225 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_226 = (226 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_227 = (227 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_228 = (228 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_229 = (229 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_230 = (230 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_231 = (231 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_232 = (232 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_233 = (233 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_234 = (234 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_235 = (235 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_236 = (236 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_237 = (237 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_238 = (238 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_239 = (239 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_240 = (240 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_241 = (241 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_242 = (242 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_243 = (243 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_244 = (244 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_245 = (245 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_246 = (246 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_247 = (247 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_248 = (248 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_249 = (249 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_250 = (250 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_251 = (251 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_252 = (252 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_253 = (253 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_254 = (254 << PG_DBC_CNT_bit);
    const uint32_t PG_DBC_CNT_255 = (255 << PG_DBC_CNT_bit);

};

// 9.13.22 GPIO_DB_CNT_P3_0
struct GPIO_DB_CNT_PF
{
    const uint32_t address = 0x60000000 + 0xD100 + 0x0FC;

    const uint32_t PH_DBC_CNT_bit = 0;
    const uint32_t PH_DBC_CNT_bitWidth 8;
    const uint32_t PH_DBC_CNT_0 = (0 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_1 = (1 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_2 = (2 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_3 = (3 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_4 = (4 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_5 = (5 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_6 = (6 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_7 = (7 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_8 = (8 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_9 = (9 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_10 = (10 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_11 = (11 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_12 = (12 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_13 = (13 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_14 = (14 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_15 = (15 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_16 = (16 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_17 = (17 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_18 = (18 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_19 = (19 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_20 = (20 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_21 = (21 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_22 = (22 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_23 = (23 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_24 = (24 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_25 = (25 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_26 = (26 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_27 = (27 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_28 = (28 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_29 = (29 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_30 = (30 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_31 = (31 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_32 = (32 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_33 = (33 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_34 = (34 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_35 = (35 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_36 = (36 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_37 = (37 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_38 = (38 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_39 = (39 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_40 = (40 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_41 = (41 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_42 = (42 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_43 = (43 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_44 = (44 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_45 = (45 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_46 = (46 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_47 = (47 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_48 = (48 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_49 = (49 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_50 = (50 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_51 = (51 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_52 = (52 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_53 = (53 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_54 = (54 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_55 = (55 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_56 = (56 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_57 = (57 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_58 = (58 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_59 = (59 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_60 = (60 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_61 = (61 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_62 = (62 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_63 = (63 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_64 = (64 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_65 = (65 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_66 = (66 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_67 = (67 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_68 = (68 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_69 = (69 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_70 = (70 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_71 = (71 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_72 = (72 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_73 = (73 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_74 = (74 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_75 = (75 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_76 = (76 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_77 = (77 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_78 = (78 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_79 = (79 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_80 = (80 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_81 = (81 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_82 = (82 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_83 = (83 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_84 = (84 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_85 = (85 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_86 = (86 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_87 = (87 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_88 = (88 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_89 = (89 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_90 = (90 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_91 = (91 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_92 = (92 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_93 = (93 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_94 = (94 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_95 = (95 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_96 = (96 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_97 = (97 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_98 = (98 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_99 = (99 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_100 = (100 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_101 = (101 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_102 = (102 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_103 = (103 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_104 = (104 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_105 = (105 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_106 = (106 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_107 = (107 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_108 = (108 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_109 = (109 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_110 = (110 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_111 = (111 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_112 = (112 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_113 = (113 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_114 = (114 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_115 = (115 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_116 = (116 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_117 = (117 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_118 = (118 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_119 = (119 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_120 = (120 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_121 = (121 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_122 = (122 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_123 = (123 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_124 = (124 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_125 = (125 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_126 = (126 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_127 = (127 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_128 = (128 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_129 = (129 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_130 = (130 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_131 = (131 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_132 = (132 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_133 = (133 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_134 = (134 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_135 = (135 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_136 = (136 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_137 = (137 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_138 = (138 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_139 = (139 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_140 = (140 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_141 = (141 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_142 = (142 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_143 = (143 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_144 = (144 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_145 = (145 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_146 = (146 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_147 = (147 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_148 = (148 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_149 = (149 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_150 = (150 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_151 = (151 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_152 = (152 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_153 = (153 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_154 = (154 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_155 = (155 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_156 = (156 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_157 = (157 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_158 = (158 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_159 = (159 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_160 = (160 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_161 = (161 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_162 = (162 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_163 = (163 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_164 = (164 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_165 = (165 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_166 = (166 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_167 = (167 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_168 = (168 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_169 = (169 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_170 = (170 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_171 = (171 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_172 = (172 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_173 = (173 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_174 = (174 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_175 = (175 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_176 = (176 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_177 = (177 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_178 = (178 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_179 = (179 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_180 = (180 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_181 = (181 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_182 = (182 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_183 = (183 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_184 = (184 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_185 = (185 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_186 = (186 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_187 = (187 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_188 = (188 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_189 = (189 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_190 = (190 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_191 = (191 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_192 = (192 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_193 = (193 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_194 = (194 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_195 = (195 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_196 = (196 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_197 = (197 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_198 = (198 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_199 = (199 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_200 = (200 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_201 = (201 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_202 = (202 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_203 = (203 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_204 = (204 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_205 = (205 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_206 = (206 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_207 = (207 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_208 = (208 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_209 = (209 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_210 = (210 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_211 = (211 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_212 = (212 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_213 = (213 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_214 = (214 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_215 = (215 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_216 = (216 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_217 = (217 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_218 = (218 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_219 = (219 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_220 = (220 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_221 = (221 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_222 = (222 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_223 = (223 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_224 = (224 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_225 = (225 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_226 = (226 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_227 = (227 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_228 = (228 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_229 = (229 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_230 = (230 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_231 = (231 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_232 = (232 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_233 = (233 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_234 = (234 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_235 = (235 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_236 = (236 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_237 = (237 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_238 = (238 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_239 = (239 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_240 = (240 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_241 = (241 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_242 = (242 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_243 = (243 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_244 = (244 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_245 = (245 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_246 = (246 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_247 = (247 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_248 = (248 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_249 = (249 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_250 = (250 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_251 = (251 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_252 = (252 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_253 = (253 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_254 = (254 << PH_DBC_CNT_bit);
    const uint32_t PH_DBC_CNT_255 = (255 << PH_DBC_CNT_bit);

};


// GPIO Controller 7 – Start Addr 6000:d600

/**
 * 9.13.1 GPIO_CNF_0 
 *
 * Designates whether each pin operates as a GPIO or as an SFIO. By default all 
 * pins come up in SFIO mode. These can be programmed to GPIO mode at any stage.
 *
 * Lock bits are used to control the access to the CNF and OE registers. When 
 * set, no one can write to the CNF and OE bits. They can be programmed ONLY 
 * during Boot and get reset by chip reset only.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_CNF_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x000;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x004;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x008;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x00C;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

/**
 * 9.13.2 GPIO_OE_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid.
 * 
 * The set of registers below are used to either drive the signal out or as an 
 * Input. This needs to be programmed depending upon whether the pin needs to 
 * be in either Input or Output.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OE_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x010;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x014;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x018;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x01C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

/**
 * 9.13.3 GPIO_OUT_0
 *
 * GPIO_CNF.x=1 (in GPIO mode) AND GPIO_OE.x=1 (GPIO output enabled) must be 
 * true for this to be valid. This register will take affect only in GPIO 
 * mode. This register is used to drive the value out on a given pin.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OUT_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x020;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x024;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x028;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x02C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * 9.13.4 GPIO_IN_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid. This 
 * is a read-only register used to read the value from the pin. This is an 
 * array of 4 identical register entries; the register fields below apply to each entry.
 */

struct GPIO_IN_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x030;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x034;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x038;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x03C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * All GPIO inputs can be independently programmed to generate an interrupt 
 * request.
 * 
 * In addition, the individual trigger level for interrupt on each input pin 
 * can be programmed as either active-on-high or active-on-low. For example, to 
 * program an active-on-high interrupt on bit 3 of GPIO-PORT_C, write '1' into 
 * bit 3 of GPIO_INT.LVL.C register (this sets the interrupt to be 
 * active-on-high), and then write '1' into bit 3 of GPIO_INT.ENB.C (this 
 * enables interrupt on the named bit).
 *
 * The interrupt flag status can be read in the appropriate bit of the 
 * GPIO_INT.STA.C register. Once the programmed interrupt occurs, status should 
 * be cleared by writing into the appropriate bit of the GPIO_INT.CLR.C 
 * register. Note that the interrupt thus generated is routed to the processor 
 * only if the corresponding bit for GPIO interrupts in the Secondary interrupt
 *  controller is enabled.
 */

/**
 * 9.13.5 GPIO_INT_STA_0
 *
 * GPIO mode (GPIO_CNF.x=1) and GPIO_INT.ENB.x=1 must be true for this condition 
 * to be valid. Every GPIO pin generates an Interrupt when switching from 
 * Low-High to High-Low. Interrupt status for each port is saved in an 
 * Interrupt status register.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_STATUS_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x040;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x044;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x048;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x04C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};


/**
 * 9.13.6 GPIO_INT_ENB_0
 *
 * Every bit of the GPIO pin has an enable which, when enabled, routes the 
 * Interrupt to the Interrupt controller. This is an array of 4 identical 
 * register entries; the register fields below apply to each entry.
 */

struct GPIO_INT_ENABLE_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x050;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x054;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x058;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x05C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

/**
 * 9.13.7 GPIO_INT_LVL_0
 *
 * The GPIO can detect an interrupt for any edge- or level-sensitive signal.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry
 */

struct GPIO_INT_LEVEL_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x060;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x064;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x068;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x06C;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};


/**
 * 9.13.8 GPIO_INT_CLR_0
 * 
 * This write-only register clears the Interrupts that are set. This is valid 
 * only in GPIO mode when GPIO_INT.ENB is set.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_CLEAR_I_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x070;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_J_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x074;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_K_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x078;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_L_RMW
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x07C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

/**
 * 9.13.9 GPIO_MSK_CNF_0
 *
 * Each register is provided with an individual 16-bit version for enabling 
 * Masked Writes to avoid a Read-Modify-Write operation by the firmware. The 
 * exception is for the interrupt clear register, whose functionality is 
 * combined in the interrupt status register. Individual pins only can be 
 * programmed by suitably enabling the write masks in the upper byte of these 
 * 16-bit registers.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_CNF_I
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x080;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_J
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x084;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_K
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x088;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_L
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x08C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.10 GPIO_MSK_OE_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OE_I
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x090;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_J
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x094;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_K
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x098;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_L
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x09C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.11 GPIO_MSK_OUT_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OUT_I
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0A0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_J
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0A4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_K
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0A8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_L
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0AC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.12 GPIO_DB_CTRL_P0_0
 */

struct GPIO_DB_CTRL_PI
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0B0;

    const uint32_t MSK_PI_DBC_EN_7_bit = 15;
    const uint32_t MSK_PI_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_7_DISABLE = (0 << MSK_PI_DBC_EN_7_bit);
    const uint32_t MSK_PI_DBC_EN_7_ENABLE = (1 << MSK_PI_DBC_EN_7_bit); 
         
    const uint32_t MSK_PI_DBC_EN_6_bit = 14;
    const uint32_t MSK_PI_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_6_DISABLE = (0 << MSK_PI_DBC_EN_6_bit);
    const uint32_t MSK_PI_DBC_EN_6_ENABLE = (1 << MSK_PI_DBC_EN_6_bit); 
          
    const uint32_t MSK_PI_DBC_EN_5_bit = 13;
    const uint32_t MSK_PI_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_5_DISABLE = (0 << MSK_PI_DBC_EN_5_bit);
    const uint32_t MSK_PI_DBC_EN_5_ENABLE = (1 << MSK_PI_DBC_EN_5_bit); 
           
    const uint32_t MSK_PI_DBC_EN_4_bit = 12;
    const uint32_t MSK_PI_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_4_DISABLE = (0 << MSK_PI_DBC_EN_4_bit);
    const uint32_t MSK_PI_DBC_EN_4_ENABLE = (1 << MSK_PI_DBC_EN_4_bit); 
            
    const uint32_t MSK_PI_DBC_EN_3_bit = 11;
    const uint32_t MSK_PI_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_3_DISABLE = (0 << MSK_PI_DBC_EN_3_bit);
    const uint32_t MSK_PI_DBC_EN_3_ENABLE = (1 << MSK_PI_DBC_EN_3_bit); 
             
    const uint32_t MSK_PI_DBC_EN_2_bit = 10;
    const uint32_t MSK_PI_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_2_DISABLE = (0 << MSK_PI_DBC_EN_2_bit);
    const uint32_t MSK_PI_DBC_EN_2_ENABLE = (1 << MSK_PI_DBC_EN_2_bit); 
              
    const uint32_t MSK_PI_DBC_EN_1_bit = 9;
    const uint32_t MSK_PI_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_1_DISABLE = (0 << MSK_PI_DBC_EN_1_bit);
    const uint32_t MSK_PI_DBC_EN_1_ENABLE = (1 << MSK_PI_DBC_EN_1_bit); 
               
    const uint32_t MSK_PI_DBC_EN_0_bit = 8;
    const uint32_t MSK_PI_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_0_DISABLE = (0 << MSK_PI_DBC_EN_0_bit);
    const uint32_t MSK_PI_DBC_EN_0_ENABLE = (1 << MSK_PI_DBC_EN_0_bit); 
 
    const uint32_t PI_DBC_EN_7_bit = 7;
    const uint32_t PI_DBC_EN_7_bitWidth = 1;
    const uint32_t PI_DBC_EN_7_LOW = (0 << PI_DBC_EN_7_bit);
    const uint32_t PI_DBC_EN_7_HIGH = (1 << PI_DBC_EN_7_bit); 
 
    const uint32_t PI_DBC_EN_6_bit = 6;
    const uint32_t PI_DBC_EN_6_bitWidth = 1;
    const uint32_t PI_DBC_EN_6_LOW = (0 << PI_DBC_EN_6_bit);
    const uint32_t PI_DBC_EN_6_HIGH = (1 << PI_DBC_EN_6_bit); 
 
    const uint32_t PI_DBC_EN_5_bit = 5;
    const uint32_t PI_DBC_EN_5_bitWidth = 1;
    const uint32_t PI_DBC_EN_5_LOW = (0 << PI_DBC_EN_5_bit);
    const uint32_t PI_DBC_EN_5_HIGH = (1 << PI_DBC_EN_5_bit); 
 
    const uint32_t PI_DBC_EN_4_bit = 4;
    const uint32_t PI_DBC_EN_4_bitWidth = 1;
    const uint32_t PI_DBC_EN_4_LOW = (0 << PI_DBC_EN_4_bit);
    const uint32_t PI_DBC_EN_4_HIGH = (1 << PI_DBC_EN_4_bit); 
 
    const uint32_t PI_DBC_EN_3_bit = 3;
    const uint32_t PI_DBC_EN_3_bitWidth = 1;
    const uint32_t PI_DBC_EN_3_LOW = (0 << PI_DBC_EN_3_bit);
    const uint32_t PI_DBC_EN_3_HIGH = (1 << PI_DBC_EN_3_bit); 
 
    const uint32_t PI_DBC_EN_2_bit = 2;
    const uint32_t PI_DBC_EN_2_bitWidth = 1;
    const uint32_t PI_DBC_EN_2_LOW = (0 << PI_DBC_EN_2_bit);
    const uint32_t PI_DBC_EN_2_HIGH = (1 << PI_DBC_EN_2_bit); 
 
    const uint32_t PI_DBC_EN_1_bit = 1;
    const uint32_t PI_DBC_EN_1_bitWidth = 1;
    const uint32_t PI_DBC_EN_1_LOW = (0 << PI_DBC_EN_1_bit);
    const uint32_t PI_DBC_EN_1_HIGH = (1 << PI_DBC_EN_1_bit); 
 
    const uint32_t PI_DBC_EN_0_bit = 0;
    const uint32_t PI_DBC_EN_0_bitWidth = 1;
    const uint32_t PI_DBC_EN_0_LOW = (0 << PI_DBC_EN_0_bit);
    const uint32_t PI_DBC_EN_0_HIGH = (1 << PI_DBC_EN_0_bit); 
 
};

// 9.13.13 GPIO_DB_CTRL_P1_0
struct GPIO_DB_CTRL_PJ
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0B4;

    const uint32_t MSK_PJ_DBC_EN_7_bit = 15;
    const uint32_t MSK_PJ_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_7_DISABLE = (0 << MSK_PJ_DBC_EN_7_bit);
    const uint32_t MSK_PJ_DBC_EN_7_ENABLE = (1 << MSK_PJ_DBC_EN_7_bit); 
         
    const uint32_t MSK_PJ_DBC_EN_6_bit = 14;
    const uint32_t MSK_PJ_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_6_DISABLE = (0 << MSK_PJ_DBC_EN_6_bit);
    const uint32_t MSK_PJ_DBC_EN_6_ENABLE = (1 << MSK_PJ_DBC_EN_6_bit); 
          
    const uint32_t MSK_PJ_DBC_EN_5_bit = 13;
    const uint32_t MSK_PJ_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_5_DISABLE = (0 << MSK_PJ_DBC_EN_5_bit);
    const uint32_t MSK_PJ_DBC_EN_5_ENABLE = (1 << MSK_PJ_DBC_EN_5_bit); 
           
    const uint32_t MSK_PJ_DBC_EN_4_bit = 12;
    const uint32_t MSK_PJ_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_4_DISABLE = (0 << MSK_PJ_DBC_EN_4_bit);
    const uint32_t MSK_PJ_DBC_EN_4_ENABLE = (1 << MSK_PJ_DBC_EN_4_bit); 
            
    const uint32_t MSK_PJ_DBC_EN_3_bit = 11;
    const uint32_t MSK_PJ_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_3_DISABLE = (0 << MSK_PJ_DBC_EN_3_bit);
    const uint32_t MSK_PJ_DBC_EN_3_ENABLE = (1 << MSK_PJ_DBC_EN_3_bit); 
             
    const uint32_t MSK_PJ_DBC_EN_2_bit = 10;
    const uint32_t MSK_PJ_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_2_DISABLE = (0 << MSK_PJ_DBC_EN_2_bit);
    const uint32_t MSK_PJ_DBC_EN_2_ENABLE = (1 << MSK_PJ_DBC_EN_2_bit); 
              
    const uint32_t MSK_PJ_DBC_EN_1_bit = 9;
    const uint32_t MSK_PJ_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_1_DISABLE = (0 << MSK_PJ_DBC_EN_1_bit);
    const uint32_t MSK_PJ_DBC_EN_1_ENABLE = (1 << MSK_PJ_DBC_EN_1_bit); 
               
    const uint32_t MSK_PJ_DBC_EN_0_bit = 8;
    const uint32_t MSK_PJ_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PJ_DBC_EN_0_DISABLE = (0 << MSK_PJ_DBC_EN_0_bit);
    const uint32_t MSK_PJ_DBC_EN_0_ENABLE = (1 << MSK_PJ_DBC_EN_0_bit); 
 
    const uint32_t PJ_DBJC_EN_7_bit = 7;
    const uint32_t PJ_DBC_EN_7_bitWidth = 1;
    const uint32_t PJ_DBC_EN_7_LOW = (0 << PJ_DBC_EN_7_bit);
    const uint32_t PJ_DBC_EN_7_HIGH = (1 << PJ_DBC_EN_7_bit); 
 
    const uint32_t PJ_DBC_EN_6_bit = 6;
    const uint32_t PJ_DBC_EN_6_bitWidth = 1;
    const uint32_t PJ_DBC_EN_6_LOW = (0 << PJ_DBC_EN_6_bit);
    const uint32_t PJ_DBC_EN_6_HIGH = (1 << PJ_DBC_EN_6_bit); 
 
    const uint32_t PJ_DBC_EN_5_bit = 5;
    const uint32_t PJ_DBC_EN_5_bitWidth = 1;
    const uint32_t PJ_DBC_EN_5_LOW = (0 << PJ_DBC_EN_5_bit);
    const uint32_t PJ_DBC_EN_5_HIGH = (1 << PJ_DBC_EN_5_bit); 
 
    const uint32_t PJ_DBC_EN_4_bit = 4;
    const uint32_t PJ_DBC_EN_4_bitWidth = 1;
    const uint32_t PJ_DBC_EN_4_LOW = (0 << PJ_DBC_EN_4_bit);
    const uint32_t PJ_DBC_EN_4_HIGH = (1 << PJ_DBC_EN_4_bit); 
 
    const uint32_t PJ_DBC_EN_3_bit = 3;
    const uint32_t PJ_DBC_EN_3_bitWidth = 1;
    const uint32_t PJ_DBC_EN_3_LOW = (0 << PJ_DBC_EN_3_bit);
    const uint32_t PJ_DBC_EN_3_HIGH = (1 << PJ_DBC_EN_3_bit); 
 
    const uint32_t PJ_DBC_EN_2_bit = 2;
    const uint32_t PJ_DBC_EN_2_bitWidth = 1;
    const uint32_t PJ_DBC_EN_2_LOW = (0 << PJ_DBC_EN_2_bit);
    const uint32_t PJ_DBC_EN_2_HIGH = (1 << PJ_DBC_EN_2_bit); 
 
    const uint32_t PJ_DBC_EN_1_bit = 1;
    const uint32_t PJ_DBC_EN_1_bitWidth = 1;
    const uint32_t PJ_DBC_EN_1_LOW = (0 << PJ_DBC_EN_1_bit);
    const uint32_t PJ_DBC_EN_1_HIGH = (1 << PJ_DBC_EN_1_bit); 
 
    const uint32_t PJ_DBC_EN_0_bit = 0;
    const uint32_t PJ_DBC_EN_0_bitWidth = 1;
    const uint32_t PJ_DBC_EN_0_LOW = (0 << PJ_DBC_EN_0_bit);
    const uint32_t PJ_DBC_EN_0_HIGH = (1 << PJ_DBC_EN_0_bit); 
 
};

// 9.13.14 GPIO_DB_CTRL_P2_0
struct GPIO_DB_CTRL_PK
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0B8;

    const uint32_t MSK_PK_DBC_EN_7_bit = 15;
    const uint32_t MSK_PK_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_7_DISABLE = (0 << MSK_PK_DBC_EN_7_bit);
    const uint32_t MSK_PK_DBC_EN_7_ENABLE = (1 << MSK_PK_DBC_EN_7_bit); 
         
    const uint32_t MSK_PK_DBC_EN_6_bit = 14;
    const uint32_t MSK_PK_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_6_DISABLE = (0 << MSK_PK_DBC_EN_6_bit);
    const uint32_t MSK_PK_DBC_EN_6_ENABLE = (1 << MSK_PK_DBC_EN_6_bit); 
          
    const uint32_t MSK_PK_DBC_EN_5_bit = 13;
    const uint32_t MSK_PK_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_5_DISABLE = (0 << MSK_PK_DBC_EN_5_bit);
    const uint32_t MSK_PK_DBC_EN_5_ENABLE = (1 << MSK_PK_DBC_EN_5_bit); 
           
    const uint32_t MSK_PK_DBC_EN_4_bit = 12;
    const uint32_t MSK_PK_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_4_DISABLE = (0 << MSK_PK_DBC_EN_4_bit);
    const uint32_t MSK_PK_DBC_EN_4_ENABLE = (1 << MSK_PK_DBC_EN_4_bit); 
            
    const uint32_t MSK_PK_DBC_EN_3_bit = 11;
    const uint32_t MSK_PK_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_3_DISABLE = (0 << MSK_PK_DBC_EN_3_bit);
    const uint32_t MSK_PK_DBC_EN_3_ENABLE = (1 << MSK_PK_DBC_EN_3_bit); 
             
    const uint32_t MSK_PK_DBC_EN_2_bit = 10;
    const uint32_t MSK_PK_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_2_DISABLE = (0 << MSK_PK_DBC_EN_2_bit);
    const uint32_t MSK_PK_DBC_EN_2_ENABLE = (1 << MSK_PK_DBC_EN_2_bit); 
              
    const uint32_t MSK_PK_DBC_EN_1_bit = 9;
    const uint32_t MSK_PK_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_1_DISABLE = (0 << MSK_PK_DBC_EN_1_bit);
    const uint32_t MSK_PK_DBC_EN_1_ENABLE = (1 << MSK_PK_DBC_EN_1_bit); 
               
    const uint32_t MSK_PK_DBC_EN_0_bit = 8;
    const uint32_t MSK_PK_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PK_DBC_EN_0_DISABLE = (0 << MSK_PK_DBC_EN_0_bit);
    const uint32_t MSK_PK_DBC_EN_0_ENABLE = (1 << MSK_PK_DBC_EN_0_bit); 
 
    const uint32_t PK_DBC_EN_7_bit = 7;
    const uint32_t PK_DBC_EN_7_bitWidth = 1;
    const uint32_t PK_DBC_EN_7_LOW = (0 << PK_DBC_EN_7_bit);
    const uint32_t PK_DBC_EN_7_HIGH = (1 << PK_DBC_EN_7_bit); 
 
    const uint32_t PK_DBC_EN_6_bit = 6;
    const uint32_t PK_DBC_EN_6_bitWidth = 1;
    const uint32_t PK_DBC_EN_6_LOW = (0 << PK_DBC_EN_6_bit);
    const uint32_t PK_DBC_EN_6_HIGH = (1 << PK_DBC_EN_6_bit); 
 
    const uint32_t PK_DBC_EN_5_bit = 5;
    const uint32_t PK_DBC_EN_5_bitWidth = 1;
    const uint32_t PK_DBC_EN_5_LOW = (0 << PK_DBC_EN_5_bit);
    const uint32_t PK_DBC_EN_5_HIGH = (1 << PK_DBC_EN_5_bit); 
 
    const uint32_t PK_DBC_EN_4_bit = 4;
    const uint32_t PK_DBC_EN_4_bitWidth = 1;
    const uint32_t PK_DBC_EN_4_LOW = (0 << PK_DBC_EN_4_bit);
    const uint32_t PK_DBC_EN_4_HIGH = (1 << PK_DBC_EN_4_bit); 
 
    const uint32_t PK_DBC_EN_3_bit = 3;
    const uint32_t PK_DBC_EN_3_bitWidth = 1;
    const uint32_t PK_DBC_EN_3_LOW = (0 << PK_DBC_EN_3_bit);
    const uint32_t PK_DBC_EN_3_HIGH = (1 << PK_DBC_EN_3_bit); 
 
    const uint32_t PK_DBC_EN_2_bit = 2;
    const uint32_t PK_DBC_EN_2_bitWidth = 1;
    const uint32_t PK_DBC_EN_2_LOW = (0 << PK_DBC_EN_2_bit);
    const uint32_t PK_DBC_EN_2_HIGH = (1 << PK_DBC_EN_2_bit); 
 
    const uint32_t PK_DBC_EN_1_bit = 1;
    const uint32_t PK_DBC_EN_1_bitWidth = 1;
    const uint32_t PK_DBC_EN_1_LOW = (0 << PK_DBC_EN_1_bit);
    const uint32_t PK_DBC_EN_1_HIGH = (1 << PK_DBC_EN_1_bit); 
 
    const uint32_t PK_DBC_EN_0_bit = 0;
    const uint32_t PK_DBC_EN_0_bitWidth = 1;
    const uint32_t PK_DBC_EN_0_LOW = (0 << PK_DBC_EN_0_bit);
    const uint32_t PK_DBC_EN_0_HIGH = (1 << PK_DBC_EN_0_bit); 
 
};

// 9.13.15 GPIO_DB_CTRL_P3_0
struct GPIO_DB_CTRL_PL
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0BC;

    const uint32_t MSK_PL_DBC_EN_7_bit = 15;
    const uint32_t MSK_PL_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_7_DISABLE = (0 << MSK_PL_DBC_EN_7_bit);
    const uint32_t MSK_PL_DBC_EN_7_ENABLE = (1 << MSK_PL_DBC_EN_7_bit); 
         
    const uint32_t MSK_PL_DBC_EN_6_bit = 14;
    const uint32_t MSK_PL_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_6_DISABLE = (0 << MSK_PL_DBC_EN_6_bit);
    const uint32_t MSK_PL_DBC_EN_6_ENABLE = (1 << MSK_PL_DBC_EN_6_bit); 
          
    const uint32_t MSK_PL_DBC_EN_5_bit = 13;
    const uint32_t MSK_PL_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_5_DISABLE = (0 << MSK_PL_DBC_EN_5_bit);
    const uint32_t MSK_PL_DBC_EN_5_ENABLE = (1 << MSK_PL_DBC_EN_5_bit); 
           
    const uint32_t MSK_PL_DBC_EN_4_bit = 12;
    const uint32_t MSK_PL_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_4_DISABLE = (0 << MSK_PL_DBC_EN_4_bit);
    const uint32_t MSK_PL_DBC_EN_4_ENABLE = (1 << MSK_PL_DBC_EN_4_bit); 
            
    const uint32_t MSK_PL_DBC_EN_3_bit = 11;
    const uint32_t MSK_PL_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_3_DISABLE = (0 << MSK_PL_DBC_EN_3_bit);
    const uint32_t MSK_PL_DBC_EN_3_ENABLE = (1 << MSK_PL_DBC_EN_3_bit); 
             
    const uint32_t MSK_PL_DBC_EN_2_bit = 10;
    const uint32_t MSK_PL_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_2_DISABLE = (0 << MSK_PL_DBC_EN_2_bit);
    const uint32_t MSK_PL_DBC_EN_2_ENABLE = (1 << MSK_PL_DBC_EN_2_bit); 
              
    const uint32_t MSK_PL_DBC_EN_1_bit = 9;
    const uint32_t MSK_PL_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_1_DISABLE = (0 << MSK_PL_DBC_EN_1_bit);
    const uint32_t MSK_PL_DBC_EN_1_ENABLE = (1 << MSK_PL_DBC_EN_1_bit); 
               
    const uint32_t MSK_PL_DBC_EN_0_bit = 8;
    const uint32_t MSK_PL_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PL_DBC_EN_0_DISABLE = (0 << MSK_PL_DBC_EN_0_bit);
    const uint32_t MSK_PL_DBC_EN_0_ENABLE = (1 << MSK_PL_DBC_EN_0_bit); 
 
    const uint32_t PL_DBC_EN_7_bit = 7;
    const uint32_t PL_DBC_EN_7_bitWidth = 1;
    const uint32_t PL_DBC_EN_7_LOW = (0 << PL_DBC_EN_7_bit);
    const uint32_t PL_DBC_EN_7_HIGH = (1 << PL_DBC_EN_7_bit); 
 
    const uint32_t PL_DBC_EN_6_bit = 6;
    const uint32_t PL_DBC_EN_6_bitWidth = 1;
    const uint32_t PL_DBC_EN_6_LOW = (0 << PL_DBC_EN_6_bit);
    const uint32_t PL_DBC_EN_6_HIGH = (1 << PL_DBC_EN_6_bit); 
 
    const uint32_t PL_DBC_EN_5_bit = 5;
    const uint32_t PL_DBC_EN_5_bitWidth = 1;
    const uint32_t PL_DBC_EN_5_LOW = (0 << PL_DBC_EN_5_bit);
    const uint32_t PL_DBC_EN_5_HIGH = (1 << PL_DBC_EN_5_bit); 
 
    const uint32_t PL_DBC_EN_4_bit = 4;
    const uint32_t PL_DBC_EN_4_bitWidth = 1;
    const uint32_t PL_DBC_EN_4_LOW = (0 << PL_DBC_EN_4_bit);
    const uint32_t PL_DBC_EN_4_HIGH = (1 << PL_DBC_EN_4_bit); 
 
    const uint32_t PL_DBC_EN_3_bit = 3;
    const uint32_t PL_DBC_EN_3_bitWidth = 1;
    const uint32_t PL_DBC_EN_3_LOW = (0 << PL_DBC_EN_3_bit);
    const uint32_t PL_DBC_EN_3_HIGH = (1 << PL_DBC_EN_3_bit); 
 
    const uint32_t PL_DBC_EN_2_bit = 2;
    const uint32_t PL_DBC_EN_2_bitWidth = 1;
    const uint32_t PL_DBC_EN_2_LOW = (0 << PL_DBC_EN_2_bit);
    const uint32_t PL_DBC_EN_2_HIGH = (1 << PL_DBC_EN_2_bit); 
 
    const uint32_t PL_DBC_EN_1_bit = 1;
    const uint32_t PL_DBC_EN_1_bitWidth = 1;
    const uint32_t PL_DBC_EN_1_LOW = (0 << PL_DBC_EN_1_bit);
    const uint32_t PL_DBC_EN_1_HIGH = (1 << PL_DBC_EN_1_bit); 
 
    const uint32_t PL_DBC_EN_0_bit = 0;
    const uint32_t PL_DBC_EN_0_bitWidth = 1;
    const uint32_t PL_DBC_EN_0_LOW = (0 << PL_DBC_EN_0_bit);
    const uint32_t PL_DBC_EN_0_HIGH = (1 << PL_DBC_EN_0_bit); 
 
};

/**
 * 9.13.16 GPIO_MSK_INT_STA_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_STATUS_I
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0C0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_J
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0C4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_K
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0C8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_L
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0CC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.17 GPIO_MSK_INT_ENB_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_I
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0D0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_J
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0D4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_K
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0D8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_L
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0DC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.18 GPIO_MSK_INT_LVL_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_I
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0E0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_J
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0E4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_K
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0E8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_L
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0EC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

// 9.13.19 GPIO_DB_CNT_P0_0
struct GPIO_DB_CNT_PI
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0F0;

    const uint32_t PI_DBC_CNT_bit = 0;
    const uint32_t PI_DBC_CNT_bitWidth 8;
    const uint32_t PI_DBC_CNT_0 = (0 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_1 = (1 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_2 = (2 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_3 = (3 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_4 = (4 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_5 = (5 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_6 = (6 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_7 = (7 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_8 = (8 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_9 = (9 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_10 = (10 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_11 = (11 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_12 = (12 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_13 = (13 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_14 = (14 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_15 = (15 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_16 = (16 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_17 = (17 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_18 = (18 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_19 = (19 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_20 = (20 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_21 = (21 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_22 = (22 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_23 = (23 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_24 = (24 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_25 = (25 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_26 = (26 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_27 = (27 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_28 = (28 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_29 = (29 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_30 = (30 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_31 = (31 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_32 = (32 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_33 = (33 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_34 = (34 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_35 = (35 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_36 = (36 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_37 = (37 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_38 = (38 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_39 = (39 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_40 = (40 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_41 = (41 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_42 = (42 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_43 = (43 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_44 = (44 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_45 = (45 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_46 = (46 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_47 = (47 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_48 = (48 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_49 = (49 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_50 = (50 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_51 = (51 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_52 = (52 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_53 = (53 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_54 = (54 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_55 = (55 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_56 = (56 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_57 = (57 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_58 = (58 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_59 = (59 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_60 = (60 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_61 = (61 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_62 = (62 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_63 = (63 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_64 = (64 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_65 = (65 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_66 = (66 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_67 = (67 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_68 = (68 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_69 = (69 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_70 = (70 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_71 = (71 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_72 = (72 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_73 = (73 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_74 = (74 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_75 = (75 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_76 = (76 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_77 = (77 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_78 = (78 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_79 = (79 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_80 = (80 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_81 = (81 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_82 = (82 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_83 = (83 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_84 = (84 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_85 = (85 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_86 = (86 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_87 = (87 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_88 = (88 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_89 = (89 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_90 = (90 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_91 = (91 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_92 = (92 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_93 = (93 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_94 = (94 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_95 = (95 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_96 = (96 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_97 = (97 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_98 = (98 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_99 = (99 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_100 = (100 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_101 = (101 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_102 = (102 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_103 = (103 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_104 = (104 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_105 = (105 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_106 = (106 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_107 = (107 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_108 = (108 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_109 = (109 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_110 = (110 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_111 = (111 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_112 = (112 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_113 = (113 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_114 = (114 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_115 = (115 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_116 = (116 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_117 = (117 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_118 = (118 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_119 = (119 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_120 = (120 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_121 = (121 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_122 = (122 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_123 = (123 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_124 = (124 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_125 = (125 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_126 = (126 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_127 = (127 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_128 = (128 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_129 = (129 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_130 = (130 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_131 = (131 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_132 = (132 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_133 = (133 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_134 = (134 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_135 = (135 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_136 = (136 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_137 = (137 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_138 = (138 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_139 = (139 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_140 = (140 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_141 = (141 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_142 = (142 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_143 = (143 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_144 = (144 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_145 = (145 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_146 = (146 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_147 = (147 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_148 = (148 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_149 = (149 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_150 = (150 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_151 = (151 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_152 = (152 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_153 = (153 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_154 = (154 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_155 = (155 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_156 = (156 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_157 = (157 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_158 = (158 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_159 = (159 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_160 = (160 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_161 = (161 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_162 = (162 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_163 = (163 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_164 = (164 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_165 = (165 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_166 = (166 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_167 = (167 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_168 = (168 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_169 = (169 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_170 = (170 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_171 = (171 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_172 = (172 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_173 = (173 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_174 = (174 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_175 = (175 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_176 = (176 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_177 = (177 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_178 = (178 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_179 = (179 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_180 = (180 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_181 = (181 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_182 = (182 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_183 = (183 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_184 = (184 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_185 = (185 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_186 = (186 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_187 = (187 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_188 = (188 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_189 = (189 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_190 = (190 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_191 = (191 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_192 = (192 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_193 = (193 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_194 = (194 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_195 = (195 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_196 = (196 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_197 = (197 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_198 = (198 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_199 = (199 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_200 = (200 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_201 = (201 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_202 = (202 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_203 = (203 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_204 = (204 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_205 = (205 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_206 = (206 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_207 = (207 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_208 = (208 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_209 = (209 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_210 = (210 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_211 = (211 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_212 = (212 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_213 = (213 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_214 = (214 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_215 = (215 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_216 = (216 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_217 = (217 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_218 = (218 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_219 = (219 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_220 = (220 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_221 = (221 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_222 = (222 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_223 = (223 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_224 = (224 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_225 = (225 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_226 = (226 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_227 = (227 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_228 = (228 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_229 = (229 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_230 = (230 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_231 = (231 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_232 = (232 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_233 = (233 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_234 = (234 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_235 = (235 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_236 = (236 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_237 = (237 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_238 = (238 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_239 = (239 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_240 = (240 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_241 = (241 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_242 = (242 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_243 = (243 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_244 = (244 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_245 = (245 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_246 = (246 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_247 = (247 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_248 = (248 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_249 = (249 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_250 = (250 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_251 = (251 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_252 = (252 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_253 = (253 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_254 = (254 << PI_DBC_CNT_bit);
    const uint32_t PI_DBC_CNT_255 = (255 << PI_DBC_CNT_bit);

};

// 9.13.20 GPIO_DB_CNT_P1_0
struct GPIO_DB_CNT_PJ
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0F4;

    const uint32_t PJ_DBC_CNT_bit = 0;
    const uint32_t PJ_DBC_CNT_bitWidth 8;
    const uint32_t PJ_DBC_CNT_0 = (0 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_1 = (1 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_2 = (2 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_3 = (3 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_4 = (4 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_5 = (5 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_6 = (6 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_7 = (7 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_8 = (8 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_9 = (9 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_10 = (10 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_11 = (11 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_12 = (12 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_13 = (13 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_14 = (14 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_15 = (15 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_16 = (16 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_17 = (17 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_18 = (18 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_19 = (19 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_20 = (20 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_21 = (21 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_22 = (22 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_23 = (23 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_24 = (24 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_25 = (25 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_26 = (26 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_27 = (27 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_28 = (28 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_29 = (29 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_30 = (30 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_31 = (31 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_32 = (32 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_33 = (33 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_34 = (34 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_35 = (35 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_36 = (36 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_37 = (37 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_38 = (38 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_39 = (39 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_40 = (40 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_41 = (41 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_42 = (42 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_43 = (43 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_44 = (44 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_45 = (45 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_46 = (46 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_47 = (47 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_48 = (48 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_49 = (49 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_50 = (50 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_51 = (51 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_52 = (52 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_53 = (53 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_54 = (54 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_55 = (55 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_56 = (56 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_57 = (57 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_58 = (58 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_59 = (59 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_60 = (60 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_61 = (61 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_62 = (62 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_63 = (63 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_64 = (64 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_65 = (65 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_66 = (66 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_67 = (67 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_68 = (68 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_69 = (69 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_70 = (70 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_71 = (71 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_72 = (72 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_73 = (73 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_74 = (74 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_75 = (75 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_76 = (76 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_77 = (77 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_78 = (78 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_79 = (79 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_80 = (80 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_81 = (81 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_82 = (82 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_83 = (83 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_84 = (84 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_85 = (85 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_86 = (86 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_87 = (87 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_88 = (88 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_89 = (89 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_90 = (90 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_91 = (91 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_92 = (92 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_93 = (93 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_94 = (94 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_95 = (95 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_96 = (96 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_97 = (97 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_98 = (98 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_99 = (99 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_100 = (100 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_101 = (101 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_102 = (102 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_103 = (103 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_104 = (104 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_105 = (105 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_106 = (106 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_107 = (107 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_108 = (108 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_109 = (109 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_110 = (110 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_111 = (111 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_112 = (112 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_113 = (113 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_114 = (114 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_115 = (115 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_116 = (116 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_117 = (117 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_118 = (118 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_119 = (119 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_120 = (120 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_121 = (121 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_122 = (122 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_123 = (123 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_124 = (124 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_125 = (125 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_126 = (126 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_127 = (127 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_128 = (128 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_129 = (129 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_130 = (130 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_131 = (131 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_132 = (132 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_133 = (133 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_134 = (134 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_135 = (135 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_136 = (136 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_137 = (137 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_138 = (138 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_139 = (139 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_140 = (140 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_141 = (141 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_142 = (142 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_143 = (143 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_144 = (144 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_145 = (145 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_146 = (146 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_147 = (147 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_148 = (148 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_149 = (149 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_150 = (150 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_151 = (151 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_152 = (152 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_153 = (153 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_154 = (154 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_155 = (155 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_156 = (156 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_157 = (157 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_158 = (158 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_159 = (159 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_160 = (160 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_161 = (161 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_162 = (162 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_163 = (163 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_164 = (164 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_165 = (165 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_166 = (166 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_167 = (167 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_168 = (168 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_169 = (169 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_170 = (170 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_171 = (171 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_172 = (172 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_173 = (173 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_174 = (174 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_175 = (175 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_176 = (176 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_177 = (177 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_178 = (178 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_179 = (179 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_180 = (180 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_181 = (181 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_182 = (182 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_183 = (183 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_184 = (184 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_185 = (185 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_186 = (186 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_187 = (187 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_188 = (188 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_189 = (189 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_190 = (190 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_191 = (191 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_192 = (192 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_193 = (193 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_194 = (194 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_195 = (195 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_196 = (196 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_197 = (197 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_198 = (198 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_199 = (199 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_200 = (200 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_201 = (201 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_202 = (202 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_203 = (203 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_204 = (204 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_205 = (205 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_206 = (206 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_207 = (207 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_208 = (208 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_209 = (209 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_210 = (210 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_211 = (211 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_212 = (212 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_213 = (213 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_214 = (214 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_215 = (215 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_216 = (216 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_217 = (217 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_218 = (218 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_219 = (219 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_220 = (220 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_221 = (221 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_222 = (222 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_223 = (223 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_224 = (224 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_225 = (225 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_226 = (226 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_227 = (227 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_228 = (228 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_229 = (229 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_230 = (230 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_231 = (231 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_232 = (232 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_233 = (233 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_234 = (234 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_235 = (235 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_236 = (236 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_237 = (237 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_238 = (238 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_239 = (239 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_240 = (240 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_241 = (241 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_242 = (242 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_243 = (243 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_244 = (244 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_245 = (245 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_246 = (246 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_247 = (247 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_248 = (248 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_249 = (249 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_250 = (250 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_251 = (251 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_252 = (252 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_253 = (253 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_254 = (254 << PJ_DBC_CNT_bit);
    const uint32_t PJ_DBC_CNT_255 = (255 << PJ_DBC_CNT_bit);

};

// 9.13.21 GPIO_DB_CNT_P2_0
struct GPIO_DB_CNT_PK
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0F8;

    const uint32_t PK_DBC_CNT_bit = 0;
    const uint32_t PK_DBC_CNT_bitWidth 8;
    const uint32_t PK_DBC_CNT_0 = (0 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_1 = (1 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_2 = (2 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_3 = (3 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_4 = (4 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_5 = (5 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_6 = (6 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_7 = (7 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_8 = (8 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_9 = (9 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_10 = (10 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_11 = (11 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_12 = (12 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_13 = (13 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_14 = (14 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_15 = (15 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_16 = (16 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_17 = (17 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_18 = (18 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_19 = (19 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_20 = (20 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_21 = (21 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_22 = (22 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_23 = (23 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_24 = (24 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_25 = (25 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_26 = (26 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_27 = (27 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_28 = (28 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_29 = (29 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_30 = (30 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_31 = (31 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_32 = (32 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_33 = (33 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_34 = (34 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_35 = (35 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_36 = (36 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_37 = (37 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_38 = (38 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_39 = (39 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_40 = (40 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_41 = (41 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_42 = (42 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_43 = (43 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_44 = (44 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_45 = (45 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_46 = (46 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_47 = (47 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_48 = (48 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_49 = (49 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_50 = (50 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_51 = (51 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_52 = (52 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_53 = (53 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_54 = (54 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_55 = (55 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_56 = (56 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_57 = (57 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_58 = (58 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_59 = (59 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_60 = (60 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_61 = (61 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_62 = (62 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_63 = (63 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_64 = (64 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_65 = (65 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_66 = (66 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_67 = (67 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_68 = (68 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_69 = (69 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_70 = (70 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_71 = (71 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_72 = (72 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_73 = (73 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_74 = (74 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_75 = (75 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_76 = (76 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_77 = (77 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_78 = (78 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_79 = (79 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_80 = (80 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_81 = (81 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_82 = (82 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_83 = (83 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_84 = (84 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_85 = (85 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_86 = (86 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_87 = (87 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_88 = (88 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_89 = (89 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_90 = (90 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_91 = (91 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_92 = (92 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_93 = (93 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_94 = (94 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_95 = (95 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_96 = (96 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_97 = (97 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_98 = (98 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_99 = (99 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_100 = (100 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_101 = (101 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_102 = (102 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_103 = (103 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_104 = (104 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_105 = (105 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_106 = (106 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_107 = (107 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_108 = (108 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_109 = (109 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_110 = (110 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_111 = (111 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_112 = (112 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_113 = (113 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_114 = (114 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_115 = (115 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_116 = (116 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_117 = (117 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_118 = (118 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_119 = (119 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_120 = (120 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_121 = (121 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_122 = (122 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_123 = (123 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_124 = (124 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_125 = (125 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_126 = (126 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_127 = (127 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_128 = (128 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_129 = (129 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_130 = (130 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_131 = (131 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_132 = (132 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_133 = (133 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_134 = (134 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_135 = (135 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_136 = (136 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_137 = (137 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_138 = (138 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_139 = (139 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_140 = (140 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_141 = (141 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_142 = (142 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_143 = (143 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_144 = (144 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_145 = (145 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_146 = (146 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_147 = (147 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_148 = (148 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_149 = (149 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_150 = (150 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_151 = (151 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_152 = (152 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_153 = (153 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_154 = (154 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_155 = (155 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_156 = (156 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_157 = (157 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_158 = (158 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_159 = (159 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_160 = (160 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_161 = (161 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_162 = (162 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_163 = (163 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_164 = (164 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_165 = (165 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_166 = (166 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_167 = (167 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_168 = (168 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_169 = (169 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_170 = (170 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_171 = (171 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_172 = (172 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_173 = (173 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_174 = (174 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_175 = (175 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_176 = (176 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_177 = (177 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_178 = (178 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_179 = (179 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_180 = (180 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_181 = (181 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_182 = (182 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_183 = (183 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_184 = (184 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_185 = (185 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_186 = (186 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_187 = (187 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_188 = (188 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_189 = (189 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_190 = (190 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_191 = (191 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_192 = (192 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_193 = (193 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_194 = (194 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_195 = (195 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_196 = (196 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_197 = (197 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_198 = (198 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_199 = (199 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_200 = (200 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_201 = (201 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_202 = (202 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_203 = (203 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_204 = (204 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_205 = (205 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_206 = (206 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_207 = (207 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_208 = (208 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_209 = (209 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_210 = (210 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_211 = (211 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_212 = (212 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_213 = (213 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_214 = (214 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_215 = (215 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_216 = (216 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_217 = (217 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_218 = (218 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_219 = (219 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_220 = (220 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_221 = (221 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_222 = (222 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_223 = (223 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_224 = (224 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_225 = (225 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_226 = (226 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_227 = (227 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_228 = (228 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_229 = (229 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_230 = (230 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_231 = (231 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_232 = (232 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_233 = (233 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_234 = (234 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_235 = (235 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_236 = (236 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_237 = (237 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_238 = (238 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_239 = (239 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_240 = (240 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_241 = (241 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_242 = (242 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_243 = (243 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_244 = (244 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_245 = (245 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_246 = (246 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_247 = (247 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_248 = (248 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_249 = (249 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_250 = (250 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_251 = (251 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_252 = (252 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_253 = (253 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_254 = (254 << PK_DBC_CNT_bit);
    const uint32_t PK_DBC_CNT_255 = (255 << PK_DBC_CNT_bit);

};

// 9.13.22 GPIO_DB_CNT_P3_0
struct GPIO_DB_CNT_PL
{
    const uint32_t address = 0x60000000 + 0xD200 + 0x0FC;

    const uint32_t PL_DBC_CNT_bit = 0;
    const uint32_t PL_DBC_CNT_bitWidth 8;
    const uint32_t PL_DBC_CNT_0 = (0 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_1 = (1 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_2 = (2 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_3 = (3 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_4 = (4 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_5 = (5 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_6 = (6 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_7 = (7 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_8 = (8 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_9 = (9 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_10 = (10 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_11 = (11 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_12 = (12 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_13 = (13 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_14 = (14 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_15 = (15 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_16 = (16 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_17 = (17 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_18 = (18 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_19 = (19 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_20 = (20 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_21 = (21 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_22 = (22 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_23 = (23 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_24 = (24 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_25 = (25 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_26 = (26 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_27 = (27 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_28 = (28 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_29 = (29 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_30 = (30 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_31 = (31 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_32 = (32 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_33 = (33 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_34 = (34 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_35 = (35 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_36 = (36 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_37 = (37 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_38 = (38 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_39 = (39 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_40 = (40 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_41 = (41 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_42 = (42 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_43 = (43 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_44 = (44 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_45 = (45 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_46 = (46 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_47 = (47 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_48 = (48 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_49 = (49 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_50 = (50 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_51 = (51 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_52 = (52 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_53 = (53 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_54 = (54 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_55 = (55 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_56 = (56 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_57 = (57 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_58 = (58 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_59 = (59 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_60 = (60 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_61 = (61 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_62 = (62 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_63 = (63 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_64 = (64 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_65 = (65 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_66 = (66 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_67 = (67 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_68 = (68 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_69 = (69 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_70 = (70 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_71 = (71 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_72 = (72 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_73 = (73 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_74 = (74 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_75 = (75 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_76 = (76 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_77 = (77 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_78 = (78 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_79 = (79 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_80 = (80 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_81 = (81 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_82 = (82 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_83 = (83 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_84 = (84 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_85 = (85 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_86 = (86 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_87 = (87 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_88 = (88 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_89 = (89 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_90 = (90 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_91 = (91 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_92 = (92 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_93 = (93 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_94 = (94 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_95 = (95 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_96 = (96 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_97 = (97 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_98 = (98 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_99 = (99 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_100 = (100 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_101 = (101 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_102 = (102 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_103 = (103 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_104 = (104 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_105 = (105 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_106 = (106 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_107 = (107 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_108 = (108 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_109 = (109 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_110 = (110 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_111 = (111 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_112 = (112 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_113 = (113 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_114 = (114 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_115 = (115 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_116 = (116 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_117 = (117 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_118 = (118 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_119 = (119 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_120 = (120 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_121 = (121 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_122 = (122 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_123 = (123 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_124 = (124 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_125 = (125 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_126 = (126 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_127 = (127 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_128 = (128 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_129 = (129 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_130 = (130 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_131 = (131 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_132 = (132 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_133 = (133 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_134 = (134 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_135 = (135 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_136 = (136 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_137 = (137 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_138 = (138 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_139 = (139 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_140 = (140 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_141 = (141 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_142 = (142 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_143 = (143 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_144 = (144 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_145 = (145 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_146 = (146 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_147 = (147 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_148 = (148 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_149 = (149 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_150 = (150 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_151 = (151 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_152 = (152 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_153 = (153 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_154 = (154 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_155 = (155 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_156 = (156 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_157 = (157 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_158 = (158 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_159 = (159 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_160 = (160 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_161 = (161 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_162 = (162 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_163 = (163 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_164 = (164 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_165 = (165 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_166 = (166 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_167 = (167 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_168 = (168 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_169 = (169 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_170 = (170 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_171 = (171 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_172 = (172 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_173 = (173 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_174 = (174 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_175 = (175 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_176 = (176 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_177 = (177 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_178 = (178 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_179 = (179 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_180 = (180 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_181 = (181 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_182 = (182 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_183 = (183 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_184 = (184 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_185 = (185 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_186 = (186 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_187 = (187 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_188 = (188 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_189 = (189 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_190 = (190 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_191 = (191 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_192 = (192 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_193 = (193 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_194 = (194 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_195 = (195 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_196 = (196 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_197 = (197 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_198 = (198 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_199 = (199 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_200 = (200 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_201 = (201 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_202 = (202 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_203 = (203 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_204 = (204 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_205 = (205 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_206 = (206 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_207 = (207 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_208 = (208 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_209 = (209 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_210 = (210 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_211 = (211 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_212 = (212 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_213 = (213 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_214 = (214 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_215 = (215 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_216 = (216 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_217 = (217 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_218 = (218 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_219 = (219 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_220 = (220 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_221 = (221 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_222 = (222 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_223 = (223 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_224 = (224 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_225 = (225 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_226 = (226 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_227 = (227 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_228 = (228 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_229 = (229 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_230 = (230 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_231 = (231 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_232 = (232 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_233 = (233 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_234 = (234 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_235 = (235 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_236 = (236 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_237 = (237 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_238 = (238 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_239 = (239 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_240 = (240 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_241 = (241 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_242 = (242 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_243 = (243 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_244 = (244 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_245 = (245 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_246 = (246 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_247 = (247 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_248 = (248 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_249 = (249 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_250 = (250 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_251 = (251 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_252 = (252 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_253 = (253 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_254 = (254 << PL_DBC_CNT_bit);
    const uint32_t PL_DBC_CNT_255 = (255 << PL_DBC_CNT_bit);

};

// GPIO Controller 8 – Start Addr 6000:d700

/**
 * 9.13.1 GPIO_CNF_0 
 *
 * Designates whether each pin operates as a GPIO or as an SFIO. By default all 
 * pins come up in SFIO mode. These can be programmed to GPIO mode at any stage.
 *
 * Lock bits are used to control the access to the CNF and OE registers. When 
 * set, no one can write to the CNF and OE bits. They can be programmed ONLY 
 * during Boot and get reset by chip reset only.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_CNF_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x000;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x004;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x008;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

struct GPIO_CNF_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x00C;

    const uint32_t LOCK_7_bit = 15;
    const uint32_t LOCK_7_bitWidth = 1;
    const uint32_t LOCK_7_DISABLE = (0 << LOCK_7_bit);
    const uint32_t LOCK_7_ENABLE = (1 << LOCK_7_bit);
 
    const uint32_t LOCK_6_bit = 14;
    const uint32_t LOCK_6_bitWidth = 1;
    const uint32_t LOCK_6_DISABLE = (0 << LOCK_6_bit);
    const uint32_t LOCK_6_ENABLE = (1 << LOCK_6_bit);
 
    const uint32_t LOCK_5_bit = 13;
    const uint32_t LOCK_5_bitWidth = 1;
    const uint32_t LOCK_5_DISABLE = (0 << LOCK_5_bit);
    const uint32_t LOCK_5_ENABLE = (1 << LOCK_5_bit);
 
    const uint32_t LOCK_4_bit = 12;
    const uint32_t LOCK_4_bitWidth = 1;
    const uint32_t LOCK_4_DISABLE = (0 << LOCK_4_bit);
    const uint32_t LOCK_4_ENABLE = (1 << LOCK_4_bit);
 
    const uint32_t LOCK_3_bit = 11;
    const uint32_t LOCK_3_bitWidth = 1;
    const uint32_t LOCK_3_DISABLE = (0 << LOCK_3_bit);
    const uint32_t LOCK_3_ENABLE = (1 << LOCK_3_bit);
 
    const uint32_t LOCK_2_bit = 10;
    const uint32_t LOCK_2_bitWidth = 1;
    const uint32_t LOCK_2_DISABLE = (0 << LOCK_2_bit);
    const uint32_t LOCK_2_ENABLE = (1 << LOCK_2_bit);
 
    const uint32_t LOCK_1_bit = 9;
    const uint32_t LOCK_1_bitWidth = 1;
    const uint32_t LOCK_1_DISABLE = (0 << LOCK_1_bit);
    const uint32_t LOCK_1_ENABLE = (1 << LOCK_1_bit);
 
    const uint32_t LOCK_0_bit = 8;
    const uint32_t LOCK_0_bitWidth = 1;
    const uint32_t LOCK_0_DISABLE = (0 << LOCK_0_bit);
    const uint32_t LOCK_0_ENABLE = (1 << LOCK_0_bit);
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit);
 
};

/**
 * 9.13.2 GPIO_OE_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid.
 * 
 * The set of registers below are used to either drive the signal out or as an 
 * Input. This needs to be programmed depending upon whether the pin needs to 
 * be in either Input or Output.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OE_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x010;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x014;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x018;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

struct GPIO_OE_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x01C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit);
 
};

/**
 * 9.13.3 GPIO_OUT_0
 *
 * GPIO_CNF.x=1 (in GPIO mode) AND GPIO_OE.x=1 (GPIO output enabled) must be 
 * true for this to be valid. This register will take affect only in GPIO 
 * mode. This register is used to drive the value out on a given pin.
 * 
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_OUT_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x020;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x024;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x028;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_OUT_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x02C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * 9.13.4 GPIO_IN_0
 *
 * GPIO mode (GPIO_CNF.x=1) must be true for this condition to be valid. This 
 * is a read-only register used to read the value from the pin. This is an 
 * array of 4 identical register entries; the register fields below apply to each entry.
 */

struct GPIO_IN_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x030;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x034;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x038;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

struct GPIO_IN_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x03C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit);
 
};

/**
 * All GPIO inputs can be independently programmed to generate an interrupt 
 * request.
 * 
 * In addition, the individual trigger level for interrupt on each input pin 
 * can be programmed as either active-on-high or active-on-low. For example, to 
 * program an active-on-high interrupt on bit 3 of GPIO-PORT_C, write '1' into 
 * bit 3 of GPIO_INT.LVL.C register (this sets the interrupt to be 
 * active-on-high), and then write '1' into bit 3 of GPIO_INT.ENB.C (this 
 * enables interrupt on the named bit).
 *
 * The interrupt flag status can be read in the appropriate bit of the 
 * GPIO_INT.STA.C register. Once the programmed interrupt occurs, status should 
 * be cleared by writing into the appropriate bit of the GPIO_INT.CLR.C 
 * register. Note that the interrupt thus generated is routed to the processor 
 * only if the corresponding bit for GPIO interrupts in the Secondary interrupt
 *  controller is enabled.
 */

/**
 * 9.13.5 GPIO_INT_STA_0
 *
 * GPIO mode (GPIO_CNF.x=1) and GPIO_INT.ENB.x=1 must be true for this condition 
 * to be valid. Every GPIO pin generates an Interrupt when switching from 
 * Low-High to High-Low. Interrupt status for each port is saved in an 
 * Interrupt status register.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_STATUS_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x040;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x044;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x048;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_STATUS_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x04C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit);
 
};


/**
 * 9.13.6 GPIO_INT_ENB_0
 *
 * Every bit of the GPIO pin has an enable which, when enabled, routes the 
 * Interrupt to the Interrupt controller. This is an array of 4 identical 
 * register entries; the register fields below apply to each entry.
 */

struct GPIO_INT_ENABLE_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x050;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x054;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x058;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

struct GPIO_INT_ENABLE_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x05C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit);
 
};

/**
 * 9.13.7 GPIO_INT_LVL_0
 *
 * The GPIO can detect an interrupt for any edge- or level-sensitive signal.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry
 */

struct GPIO_INT_LEVEL_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x060;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x064;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x068;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};

struct GPIO_INT_LEVEL_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x06C;

    const uint32_t DELTA_7_bit = 23;
    const uint32_t DELTA_7_bitWidth = 1;
    const uint32_t DELTA_7_DISABLE = (0 << DELTA_7_bit);
    const uint32_t DELTA_7_ENABLE = (1 << DELTA_7_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
 
    const uint32_t DELTA_6_bit = 22;
    const uint32_t DELTA_6_bitWidth = 1;
    const uint32_t DELTA_6_DISABLE = (0 << DELTA_6_bit);
    const uint32_t DELTA_6_ENABLE = (1 << DELTA_6_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
  
    const uint32_t DELTA_5_bit = 21;
    const uint32_t DELTA_5_bitWidth = 1;
    const uint32_t DELTA_5_DISABLE = (0 << DELTA_5_bit);
    const uint32_t DELTA_5_ENABLE = (1 << DELTA_5_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
   
    const uint32_t DELTA_4_bit = 20;
    const uint32_t DELTA_4_bitWidth = 1;
    const uint32_t DELTA_4_DISABLE = (0 << DELTA_4_bit);
    const uint32_t DELTA_4_ENABLE = (1 << DELTA_4_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
    
    const uint32_t DELTA_3_bit = 19;
    const uint32_t DELTA_3_bitWidth = 1;
    const uint32_t DELTA_3_DISABLE = (0 << DELTA_3_bit);
    const uint32_t DELTA_3_ENABLE = (1 << DELTA_3_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
     
    const uint32_t DELTA_2_bit = 18;
    const uint32_t DELTA_2_bitWidth = 1;
    const uint32_t DELTA_2_DISABLE = (0 << DELTA_2_bit);
    const uint32_t DELTA_2_ENABLE = (1 << DELTA_2_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
      
    const uint32_t DELTA_1_bit = 17;
    const uint32_t DELTA_1_bitWidth = 1;
    const uint32_t DELTA_1_DISABLE = (0 << DELTA_1_bit);
    const uint32_t DELTA_1_ENABLE = (1 << DELTA_1_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
       
    const uint32_t DELTA_0_bit = 16;
    const uint32_t DELTA_0_bitWidth = 1;
    const uint32_t DELTA_0_DISABLE = (0 << DELTA_0_bit);
    const uint32_t DELTA_0_ENABLE = (1 << DELTA_0_bit); // 1 means Trigger Interrupt on ANY change of input if EDGE is TRUE
        
    const uint32_t EDGE_7_bit = 15;
    const uint32_t EDGE_7_bitWidth = 1;
    const uint32_t EDGE_7_DISABLE = (0 << EDGE_7_bit);
    const uint32_t EDGE_7_ENABLE = (1 << EDGE_7_bit); // 1 means Configure as Edge-Triggered Interrupt
         
    const uint32_t EDGE_6_bit = 14;
    const uint32_t EDGE_6_bitWidth = 1;
    const uint32_t EDGE_6_DISABLE = (0 << EDGE_6_bit);
    const uint32_t EDGE_6_ENABLE = (1 << EDGE_6_bit); // 1 means Configure as Edge-Triggered Interrupt
          
    const uint32_t EDGE_5_bit = 13;
    const uint32_t EDGE_5_bitWidth = 1;
    const uint32_t EDGE_5_DISABLE = (0 << EDGE_5_bit);
    const uint32_t EDGE_5_ENABLE = (1 << EDGE_5_bit); // 1 means Configure as Edge-Triggered Interrupt
           
    const uint32_t EDGE_4_bit = 12;
    const uint32_t EDGE_4_bitWidth = 1;
    const uint32_t EDGE_4_DISABLE = (0 << EDGE_4_bit);
    const uint32_t EDGE_4_ENABLE = (1 << EDGE_4_bit); // 1 means Configure as Edge-Triggered Interrupt
            
    const uint32_t EDGE_3_bit = 11;
    const uint32_t EDGE_3_bitWidth = 1;
    const uint32_t EDGE_3_DISABLE = (0 << EDGE_3_bit);
    const uint32_t EDGE_3_ENABLE = (1 << EDGE_3_bit); // 1 means Configure as Edge-Triggered Interrupt
             
    const uint32_t EDGE_2_bit = 10;
    const uint32_t EDGE_2_bitWidth = 1;
    const uint32_t EDGE_2_DISABLE = (0 << EDGE_2_bit);
    const uint32_t EDGE_2_ENABLE = (1 << EDGE_2_bit); // 1 means Configure as Edge-Triggered Interrupt
              
    const uint32_t EDGE_1_bit = 9;
    const uint32_t EDGE_1_bitWidth = 1;
    const uint32_t EDGE_1_DISABLE = (0 << EDGE_1_bit);
    const uint32_t EDGE_1_ENABLE = (1 << EDGE_1_bit); // 1 means Configure as Edge-Triggered Interrupt
               
    const uint32_t EDGE_0_bit = 8;
    const uint32_t EDGE_0_bitWidth = 1;
    const uint32_t EDGE_0_DISABLE = (0 << EDGE_0_bit);
    const uint32_t EDGE_0_ENABLE = (1 << EDGE_0_bit); // 1 means Configure as Edge-Triggered Interrupt
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); // Interrupt Activation Level or Edge (HIGH for High level or Rising Edge)
 
};


/**
 * 9.13.8 GPIO_INT_CLR_0
 * 
 * This write-only register clears the Interrupts that are set. This is valid 
 * only in GPIO mode when GPIO_INT.ENB is set.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_INT_CLEAR_M_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x070;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_N_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x074;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_O_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x078;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

struct GPIO_INT_CLEAR_P_RMW
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x07C;

    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SET = (0 << BIT_7_bit);
    const uint32_t BIT_7_CLEAR = (1 << BIT_7_bit);
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SET = (0 << BIT_6_bit);
    const uint32_t BIT_6_CLEAR = (1 << BIT_6_bit);
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SET = (0 << BIT_5_bit);
    const uint32_t BIT_5_CLEAR = (1 << BIT_5_bit);
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SET = (0 << BIT_4_bit);
    const uint32_t BIT_4_CLEAR = (1 << BIT_4_bit);
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SET = (0 << BIT_3_bit);
    const uint32_t BIT_3_CLEAR = (1 << BIT_3_bit);
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SET = (0 << BIT_2_bit);
    const uint32_t BIT_2_CLEAR = (1 << BIT_2_bit);
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SET = (0 << BIT_1_bit);
    const uint32_t BIT_1_CLEAR = (1 << BIT_1_bit);
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SET = (0 << BIT_0_bit);
    const uint32_t BIT_0_CLEAR = (1 << BIT_0_bit);
 
};

/**
 * 9.13.9 GPIO_MSK_CNF_0
 *
 * Each register is provided with an individual 16-bit version for enabling 
 * Masked Writes to avoid a Read-Modify-Write operation by the firmware. The 
 * exception is for the interrupt clear register, whose functionality is 
 * combined in the interrupt status register. Individual pins only can be 
 * programmed by suitably enabling the write masks in the upper byte of these 
 * 16-bit registers.
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_CNF_M
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x080;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_N
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x084;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_O
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x088;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_CNF_P
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x08C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_SPIO = (0 << BIT_7_bit);
    const uint32_t BIT_7_GPIO = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_SPIO = (0 << BIT_6_bit);
    const uint32_t BIT_6_GPIO = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_SPIO = (0 << BIT_5_bit);
    const uint32_t BIT_5_GPIO = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_SPIO = (0 << BIT_4_bit);
    const uint32_t BIT_4_GPIO = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_SPIO = (0 << BIT_3_bit);
    const uint32_t BIT_3_GPIO = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_SPIO = (0 << BIT_2_bit);
    const uint32_t BIT_2_GPIO = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_SPIO = (0 << BIT_1_bit);
    const uint32_t BIT_1_GPIO = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_SPIO = (0 << BIT_0_bit);
    const uint32_t BIT_0_GPIO = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.10 GPIO_MSK_OE_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OE_M
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x090;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_N
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x094;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_O
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x098;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OE_P
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x09C;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_TRI_STATE = (0 << BIT_7_bit);
    const uint32_t BIT_7_DRIVEN = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_TRI_STATE = (0 << BIT_6_bit);
    const uint32_t BIT_6_DRIVEN = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_TRI_STATE = (0 << BIT_5_bit);
    const uint32_t BIT_5_DRIVEN = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_TRI_STATE = (0 << BIT_4_bit);
    const uint32_t BIT_4_DRIVEN = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_TRI_STATE = (0 << BIT_3_bit);
    const uint32_t BIT_3_DRIVEN = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_TRI_STATE = (0 << BIT_2_bit);
    const uint32_t BIT_2_DRIVEN = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_TRI_STATE = (0 << BIT_1_bit);
    const uint32_t BIT_1_DRIVEN = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_TRI_STATE = (0 << BIT_0_bit);
    const uint32_t BIT_0_DRIVEN = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.11 GPIO_MSK_OUT_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_OUT_M
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0A0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_N
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0A4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_O
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0A8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_OUT_P
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0AC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << MSK_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.12 GPIO_DB_CTRL_P0_0
 */

struct GPIO_DB_CTRL_PM
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0B0;

    const uint32_t MSK_PM_DBC_EN_7_bit = 15;
    const uint32_t MSK_PM_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PM_DBC_EN_7_DISABLE = (0 << MSK_PM_DBC_EN_7_bit);
    const uint32_t MSK_PM_DBC_EN_7_ENABLE = (1 << MSK_PM_DBC_EN_7_bit); 
         
    const uint32_t MSK_PM_DBC_EN_6_bit = 14;
    const uint32_t MSK_PM_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PM_DBC_EN_6_DISABLE = (0 << MSK_PM_DBC_EN_6_bit);
    const uint32_t MSK_PM_DBC_EN_6_ENABLE = (1 << MSK_PM_DBC_EN_6_bit); 
          
    const uint32_t MSK_PM_DBC_EN_5_bit = 13;
    const uint32_t MSK_PM_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PM_DBC_EN_5_DISABLE = (0 << MSK_PM_DBC_EN_5_bit);
    const uint32_t MSK_PM_DBC_EN_5_ENABLE = (1 << MSK_PM_DBC_EN_5_bit); 
           
    const uint32_t MSK_PM_DBC_EN_4_bit = 12;
    const uint32_t MSK_PM_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PM_DBC_EN_4_DISABLE = (0 << MSK_PM_DBC_EN_4_bit);
    const uint32_t MSK_PM_DBC_EN_4_ENABLE = (1 << MSK_PM_DBC_EN_4_bit); 
            
    const uint32_t MSK_PM_DBC_EN_3_bit = 11;
    const uint32_t MSK_PM_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PM_DBC_EN_3_DISABLE = (0 << MSK_PM_DBC_EN_3_bit);
    const uint32_t MSK_PM_DBC_EN_3_ENABLE = (1 << MSK_PM_DBC_EN_3_bit); 
             
    const uint32_t MSK_PM_DBC_EN_2_bit = 10;
    const uint32_t MSK_PM_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PM_DBC_EN_2_DISABLE = (0 << MSK_PM_DBC_EN_2_bit);
    const uint32_t MSK_PM_DBC_EN_2_ENABLE = (1 << MSK_PM_DBC_EN_2_bit); 
              
    const uint32_t MSK_PM_DBC_EN_1_bit = 9;
    const uint32_t MSK_PM_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PM_DBC_EN_1_DISABLE = (0 << MSK_PM_DBC_EN_1_bit);
    const uint32_t MSK_PM_DBC_EN_1_ENABLE = (1 << MSK_PM_DBC_EN_1_bit); 
               
    const uint32_t MSK_PI_DBC_EN_0_bit = 8;
    const uint32_t MSK_PI_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PI_DBC_EN_0_DISABLE = (0 << MSK_PM_DBC_EN_0_bit);
    const uint32_t MSK_PI_DBC_EN_0_ENABLE = (1 << MSK_PM_DBC_EN_0_bit); 
 
    const uint32_t PM_DBC_EN_7_bit = 7;
    const uint32_t PM_DBC_EN_7_bitWidth = 1;
    const uint32_t PM_DBC_EN_7_LOW = (0 << PM_DBC_EN_7_bit);
    const uint32_t PM_DBC_EN_7_HIGH = (1 << PM_DBC_EN_7_bit); 
 
    const uint32_t PM_DBC_EN_6_bit = 6;
    const uint32_t PM_DBC_EN_6_bitWidth = 1;
    const uint32_t PM_DBC_EN_6_LOW = (0 << PM_DBC_EN_6_bit);
    const uint32_t PM_DBC_EN_6_HIGH = (1 << PM_DBC_EN_6_bit); 
 
    const uint32_t PM_DBC_EN_5_bit = 5;
    const uint32_t PM_DBC_EN_5_bitWidth = 1;
    const uint32_t PM_DBC_EN_5_LOW = (0 << PM_DBC_EN_5_bit);
    const uint32_t PM_DBC_EN_5_HIGH = (1 << PM_DBC_EN_5_bit); 
 
    const uint32_t PM_DBC_EN_4_bit = 4;
    const uint32_t PM_DBC_EN_4_bitWidth = 1;
    const uint32_t PM_DBC_EN_4_LOW = (0 << PM_DBC_EN_4_bit);
    const uint32_t PM_DBC_EN_4_HIGH = (1 << PM_DBC_EN_4_bit); 
 
    const uint32_t PM_DBC_EN_3_bit = 3;
    const uint32_t PM_DBC_EN_3_bitWidth = 1;
    const uint32_t PM_DBC_EN_3_LOW = (0 << PM_DBC_EN_3_bit);
    const uint32_t PM_DBC_EN_3_HIGH = (1 << PM_DBC_EN_3_bit); 
 
    const uint32_t PM_DBC_EN_2_bit = 2;
    const uint32_t PM_DBC_EN_2_bitWidth = 1;
    const uint32_t PM_DBC_EN_2_LOW = (0 << PM_DBC_EN_2_bit);
    const uint32_t PM_DBC_EN_2_HIGH = (1 << PM_DBC_EN_2_bit); 
 
    const uint32_t PM_DBC_EN_1_bit = 1;
    const uint32_t PM_DBC_EN_1_bitWidth = 1;
    const uint32_t PM_DBC_EN_1_LOW = (0 << PM_DBC_EN_1_bit);
    const uint32_t PM_DBC_EN_1_HIGH = (1 << PM_DBC_EN_1_bit); 
 
    const uint32_t PM_DBC_EN_0_bit = 0;
    const uint32_t PM_DBC_EN_0_bitWidth = 1;
    const uint32_t PM_DBC_EN_0_LOW = (0 << PM_DBC_EN_0_bit);
    const uint32_t PM_DBC_EN_0_HIGH = (1 << PM_DBC_EN_0_bit); 
 
};

// 9.13.13 GPIO_DB_CTRL_P1_0
struct GPIO_DB_CTRL_PN
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0B4;

    const uint32_t MSK_PN_DBC_EN_7_bit = 15;
    const uint32_t MSK_PN_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_7_DISABLE = (0 << MSK_PN_DBC_EN_7_bit);
    const uint32_t MSK_PN_DBC_EN_7_ENABLE = (1 << MSK_PN_DBC_EN_7_bit); 
         
    const uint32_t MSK_PN_DBC_EN_6_bit = 14;
    const uint32_t MSK_PN_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_6_DISABLE = (0 << MSK_PN_DBC_EN_6_bit);
    const uint32_t MSK_PN_DBC_EN_6_ENABLE = (1 << MSK_PN_DBC_EN_6_bit); 
          
    const uint32_t MSK_PN_DBC_EN_5_bit = 13;
    const uint32_t MSK_PN_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_5_DISABLE = (0 << MSK_PN_DBC_EN_5_bit);
    const uint32_t MSK_PN_DBC_EN_5_ENABLE = (1 << MSK_PN_DBC_EN_5_bit); 
           
    const uint32_t MSK_PN_DBC_EN_4_bit = 12;
    const uint32_t MSK_PN_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_4_DISABLE = (0 << MSK_PN_DBC_EN_4_bit);
    const uint32_t MSK_PN_DBC_EN_4_ENABLE = (1 << MSK_PN_DBC_EN_4_bit); 
            
    const uint32_t MSK_PN_DBC_EN_3_bit = 11;
    const uint32_t MSK_PN_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_3_DISABLE = (0 << MSK_PN_DBC_EN_3_bit);
    const uint32_t MSK_PN_DBC_EN_3_ENABLE = (1 << MSK_PN_DBC_EN_3_bit); 
             
    const uint32_t MSK_PN_DBC_EN_2_bit = 10;
    const uint32_t MSK_PN_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_2_DISABLE = (0 << MSK_PN_DBC_EN_2_bit);
    const uint32_t MSK_PN_DBC_EN_2_ENABLE = (1 << MSK_PN_DBC_EN_2_bit); 
              
    const uint32_t MSK_PN_DBC_EN_1_bit = 9;
    const uint32_t MSK_PN_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_1_DISABLE = (0 << MSK_PN_DBC_EN_1_bit);
    const uint32_t MSK_PN_DBC_EN_1_ENABLE = (1 << MSK_PN_DBC_EN_1_bit); 
               
    const uint32_t MSK_PN_DBC_EN_0_bit = 8;
    const uint32_t MSK_PN_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PN_DBC_EN_0_DISABLE = (0 << MSK_PN_DBC_EN_0_bit);
    const uint32_t MSK_PN_DBC_EN_0_ENABLE = (1 << MSK_PN_DBC_EN_0_bit); 
 
    const uint32_t PN_DBJC_EN_7_bit = 7;
    const uint32_t PN_DBC_EN_7_bitWidth = 1;
    const uint32_t PN_DBC_EN_7_LOW = (0 << PN_DBC_EN_7_bit);
    const uint32_t PN_DBC_EN_7_HIGH = (1 << PN_DBC_EN_7_bit); 
 
    const uint32_t PN_DBC_EN_6_bit = 6;
    const uint32_t PN_DBC_EN_6_bitWidth = 1;
    const uint32_t PN_DBC_EN_6_LOW = (0 << PN_DBC_EN_6_bit);
    const uint32_t PN_DBC_EN_6_HIGH = (1 << PN_DBC_EN_6_bit); 
 
    const uint32_t PN_DBC_EN_5_bit = 5;
    const uint32_t PN_DBC_EN_5_bitWidth = 1;
    const uint32_t PN_DBC_EN_5_LOW = (0 << PN_DBC_EN_5_bit);
    const uint32_t PN_DBC_EN_5_HIGH = (1 << PN_DBC_EN_5_bit); 
 
    const uint32_t PN_DBC_EN_4_bit = 4;
    const uint32_t PN_DBC_EN_4_bitWidth = 1;
    const uint32_t PN_DBC_EN_4_LOW = (0 << PN_DBC_EN_4_bit);
    const uint32_t PN_DBC_EN_4_HIGH = (1 << PN_DBC_EN_4_bit); 
 
    const uint32_t PN_DBC_EN_3_bit = 3;
    const uint32_t PN_DBC_EN_3_bitWidth = 1;
    const uint32_t PN_DBC_EN_3_LOW = (0 << PN_DBC_EN_3_bit);
    const uint32_t PN_DBC_EN_3_HIGH = (1 << PN_DBC_EN_3_bit); 
 
    const uint32_t PN_DBC_EN_2_bit = 2;
    const uint32_t PN_DBC_EN_2_bitWidth = 1;
    const uint32_t PN_DBC_EN_2_LOW = (0 << PN_DBC_EN_2_bit);
    const uint32_t PN_DBC_EN_2_HIGH = (1 << PN_DBC_EN_2_bit); 
 
    const uint32_t PN_DBC_EN_1_bit = 1;
    const uint32_t PN_DBC_EN_1_bitWidth = 1;
    const uint32_t PN_DBC_EN_1_LOW = (0 << PN_DBC_EN_1_bit);
    const uint32_t PN_DBC_EN_1_HIGH = (1 << PN_DBC_EN_1_bit); 
 
    const uint32_t PN_DBC_EN_0_bit = 0;
    const uint32_t PN_DBC_EN_0_bitWidth = 1;
    const uint32_t PN_DBC_EN_0_LOW = (0 << PN_DBC_EN_0_bit);
    const uint32_t PN_DBC_EN_0_HIGH = (1 << PN_DBC_EN_0_bit); 
 
};

// 9.13.14 GPIO_DB_CTRL_P2_0
struct GPIO_DB_CTRL_PO
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0B8;

    const uint32_t MSK_PO_DBC_EN_7_bit = 15;
    const uint32_t MSK_PO_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_7_DISABLE = (0 << MSK_PO_DBC_EN_7_bit);
    const uint32_t MSK_PO_DBC_EN_7_ENABLE = (1 << MSK_PO_DBC_EN_7_bit); 
         
    const uint32_t MSK_PO_DBC_EN_6_bit = 14;
    const uint32_t MSK_PO_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_6_DISABLE = (0 << MSK_PO_DBC_EN_6_bit);
    const uint32_t MSK_PO_DBC_EN_6_ENABLE = (1 << MSK_PO_DBC_EN_6_bit); 
          
    const uint32_t MSK_PO_DBC_EN_5_bit = 13;
    const uint32_t MSK_PO_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_5_DISABLE = (0 << MSK_PO_DBC_EN_5_bit);
    const uint32_t MSK_PO_DBC_EN_5_ENABLE = (1 << MSK_PO_DBC_EN_5_bit); 
           
    const uint32_t MSK_PO_DBC_EN_4_bit = 12;
    const uint32_t MSK_PO_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_4_DISABLE = (0 << MSK_PO_DBC_EN_4_bit);
    const uint32_t MSK_PO_DBC_EN_4_ENABLE = (1 << MSK_PO_DBC_EN_4_bit); 
            
    const uint32_t MSK_PO_DBC_EN_3_bit = 11;
    const uint32_t MSK_PO_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_3_DISABLE = (0 << MSK_PO_DBC_EN_3_bit);
    const uint32_t MSK_PO_DBC_EN_3_ENABLE = (1 << MSK_PO_DBC_EN_3_bit); 
             
    const uint32_t MSK_PO_DBC_EN_2_bit = 10;
    const uint32_t MSK_PO_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_2_DISABLE = (0 << MSK_PO_DBC_EN_2_bit);
    const uint32_t MSK_PO_DBC_EN_2_ENABLE = (1 << MSK_PO_DBC_EN_2_bit); 
              
    const uint32_t MSK_PO_DBC_EN_1_bit = 9;
    const uint32_t MSK_PO_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_1_DISABLE = (0 << MSK_PO_DBC_EN_1_bit);
    const uint32_t MSK_PO_DBC_EN_1_ENABLE = (1 << MSK_PO_DBC_EN_1_bit); 
               
    const uint32_t MSK_PO_DBC_EN_0_bit = 8;
    const uint32_t MSK_PO_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PO_DBC_EN_0_DISABLE = (0 << MSK_PO_DBC_EN_0_bit);
    const uint32_t MSK_PO_DBC_EN_0_ENABLE = (1 << MSK_PO_DBC_EN_0_bit); 
 
    const uint32_t PO_DBC_EN_7_bit = 7;
    const uint32_t PO_DBC_EN_7_bitWidth = 1;
    const uint32_t PO_DBC_EN_7_LOW = (0 << PO_DBC_EN_7_bit);
    const uint32_t PO_DBC_EN_7_HIGH = (1 << PO_DBC_EN_7_bit); 
 
    const uint32_t PO_DBC_EN_6_bit = 6;
    const uint32_t PO_DBC_EN_6_bitWidth = 1;
    const uint32_t PO_DBC_EN_6_LOW = (0 << PO_DBC_EN_6_bit);
    const uint32_t PO_DBC_EN_6_HIGH = (1 << PO_DBC_EN_6_bit); 
 
    const uint32_t PO_DBC_EN_5_bit = 5;
    const uint32_t PO_DBC_EN_5_bitWidth = 1;
    const uint32_t PO_DBC_EN_5_LOW = (0 << PO_DBC_EN_5_bit);
    const uint32_t PO_DBC_EN_5_HIGH = (1 << PO_DBC_EN_5_bit); 
 
    const uint32_t PO_DBC_EN_4_bit = 4;
    const uint32_t PO_DBC_EN_4_bitWidth = 1;
    const uint32_t PO_DBC_EN_4_LOW = (0 << PO_DBC_EN_4_bit);
    const uint32_t PO_DBC_EN_4_HIGH = (1 << PO_DBC_EN_4_bit); 
 
    const uint32_t PO_DBC_EN_3_bit = 3;
    const uint32_t PO_DBC_EN_3_bitWidth = 1;
    const uint32_t PO_DBC_EN_3_LOW = (0 << PO_DBC_EN_3_bit);
    const uint32_t PO_DBC_EN_3_HIGH = (1 << PO_DBC_EN_3_bit); 
 
    const uint32_t PO_DBC_EN_2_bit = 2;
    const uint32_t PO_DBC_EN_2_bitWidth = 1;
    const uint32_t PO_DBC_EN_2_LOW = (0 << PO_DBC_EN_2_bit);
    const uint32_t PO_DBC_EN_2_HIGH = (1 << PO_DBC_EN_2_bit); 
 
    const uint32_t PO_DBC_EN_1_bit = 1;
    const uint32_t PO_DBC_EN_1_bitWidth = 1;
    const uint32_t PO_DBC_EN_1_LOW = (0 << PO_DBC_EN_1_bit);
    const uint32_t PO_DBC_EN_1_HIGH = (1 << PO_DBC_EN_1_bit); 
 
    const uint32_t PO_DBC_EN_0_bit = 0;
    const uint32_t PO_DBC_EN_0_bitWidth = 1;
    const uint32_t PO_DBC_EN_0_LOW = (0 << PO_DBC_EN_0_bit);
    const uint32_t PO_DBC_EN_0_HIGH = (1 << PO_DBC_EN_0_bit); 
 
};

// 9.13.15 GPIO_DB_CTRL_P3_0
struct GPIO_DB_CTRL_PP
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0BC;

    const uint32_t MSK_PP_DBC_EN_7_bit = 15;
    const uint32_t MSK_PP_DBC_EN_7_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_7_DISABLE = (0 << MSK_PP_DBC_EN_7_bit);
    const uint32_t MSK_PP_DBC_EN_7_ENABLE = (1 << MSK_PP_DBC_EN_7_bit); 
         
    const uint32_t MSK_PP_DBC_EN_6_bit = 14;
    const uint32_t MSK_PP_DBC_EN_6_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_6_DISABLE = (0 << MSK_PP_DBC_EN_6_bit);
    const uint32_t MSK_PP_DBC_EN_6_ENABLE = (1 << MSK_PP_DBC_EN_6_bit); 
          
    const uint32_t MSK_PP_DBC_EN_5_bit = 13;
    const uint32_t MSK_PP_DBC_EN_5_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_5_DISABLE = (0 << MSK_PP_DBC_EN_5_bit);
    const uint32_t MSK_PP_DBC_EN_5_ENABLE = (1 << MSK_PP_DBC_EN_5_bit); 
           
    const uint32_t MSK_PP_DBC_EN_4_bit = 12;
    const uint32_t MSK_PP_DBC_EN_4_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_4_DISABLE = (0 << MSK_PP_DBC_EN_4_bit);
    const uint32_t MSK_PP_DBC_EN_4_ENABLE = (1 << MSK_PP_DBC_EN_4_bit); 
            
    const uint32_t MSK_PP_DBC_EN_3_bit = 11;
    const uint32_t MSK_PP_DBC_EN_3_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_3_DISABLE = (0 << MSK_PP_DBC_EN_3_bit);
    const uint32_t MSK_PP_DBC_EN_3_ENABLE = (1 << MSK_PP_DBC_EN_3_bit); 
             
    const uint32_t MSK_PP_DBC_EN_2_bit = 10;
    const uint32_t MSK_PP_DBC_EN_2_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_2_DISABLE = (0 << MSK_PP_DBC_EN_2_bit);
    const uint32_t MSK_PP_DBC_EN_2_ENABLE = (1 << MSK_PP_DBC_EN_2_bit); 
              
    const uint32_t MSK_PP_DBC_EN_1_bit = 9;
    const uint32_t MSK_PP_DBC_EN_1_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_1_DISABLE = (0 << MSK_PP_DBC_EN_1_bit);
    const uint32_t MSK_PP_DBC_EN_1_ENABLE = (1 << MSK_PP_DBC_EN_1_bit); 
               
    const uint32_t MSK_PP_DBC_EN_0_bit = 8;
    const uint32_t MSK_PP_DBC_EN_0_bitWidth = 1;
    const uint32_t MSK_PP_DBC_EN_0_DISABLE = (0 << MSK_PP_DBC_EN_0_bit);
    const uint32_t MSK_PP_DBC_EN_0_ENABLE = (1 << MSK_PP_DBC_EN_0_bit); 
 
    const uint32_t PP_DBC_EN_7_bit = 7;
    const uint32_t PP_DBC_EN_7_bitWidth = 1;
    const uint32_t PP_DBC_EN_7_LOW = (0 << PP_DBC_EN_7_bit);
    const uint32_t PP_DBC_EN_7_HIGH = (1 << PP_DBC_EN_7_bit); 
 
    const uint32_t PP_DBC_EN_6_bit = 6;
    const uint32_t PP_DBC_EN_6_bitWidth = 1;
    const uint32_t PP_DBC_EN_6_LOW = (0 << PP_DBC_EN_6_bit);
    const uint32_t PP_DBC_EN_6_HIGH = (1 << PP_DBC_EN_6_bit); 
 
    const uint32_t PP_DBC_EN_5_bit = 5;
    const uint32_t PP_DBC_EN_5_bitWidth = 1;
    const uint32_t PP_DBC_EN_5_LOW = (0 << PP_DBC_EN_5_bit);
    const uint32_t PP_DBC_EN_5_HIGH = (1 << PP_DBC_EN_5_bit); 
 
    const uint32_t PP_DBC_EN_4_bit = 4;
    const uint32_t PP_DBC_EN_4_bitWidth = 1;
    const uint32_t PP_DBC_EN_4_LOW = (0 << PP_DBC_EN_4_bit);
    const uint32_t PP_DBC_EN_4_HIGH = (1 << PP_DBC_EN_4_bit); 
 
    const uint32_t PP_DBC_EN_3_bit = 3;
    const uint32_t PP_DBC_EN_3_bitWidth = 1;
    const uint32_t PP_DBC_EN_3_LOW = (0 << PP_DBC_EN_3_bit);
    const uint32_t PP_DBC_EN_3_HIGH = (1 << PP_DBC_EN_3_bit); 
 
    const uint32_t PP_DBC_EN_2_bit = 2;
    const uint32_t PP_DBC_EN_2_bitWidth = 1;
    const uint32_t PP_DBC_EN_2_LOW = (0 << PP_DBC_EN_2_bit);
    const uint32_t PP_DBC_EN_2_HIGH = (1 << PP_DBC_EN_2_bit); 
 
    const uint32_t PP_DBC_EN_1_bit = 1;
    const uint32_t PP_DBC_EN_1_bitWidth = 1;
    const uint32_t PP_DBC_EN_1_LOW = (0 << PP_DBC_EN_1_bit);
    const uint32_t PP_DBC_EN_1_HIGH = (1 << PP_DBC_EN_1_bit); 
 
    const uint32_t PP_DBC_EN_0_bit = 0;
    const uint32_t PP_DBC_EN_0_bitWidth = 1;
    const uint32_t PP_DBC_EN_0_LOW = (0 << PP_DBC_EN_0_bit);
    const uint32_t PP_DBC_EN_0_HIGH = (1 << PP_DBC_EN_0_bit); 
 
};

/**
 * 9.13.16 GPIO_MSK_INT_STA_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_STATUS_M
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0C0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_N
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0C4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_O
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0C8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_STATUS_P
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0CC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_INACTIVE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ACTIVE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_INACTIVE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ACTIVE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_INACTIVE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ACTIVE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_INACTIVE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ACTIVE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_INACTIVE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ACTIVE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_INACTIVE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ACTIVE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_INACTIVE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ACTIVE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_INACTIVE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ACTIVE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.17 GPIO_MSK_INT_ENB_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_M
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0D0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_N
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0D4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_O
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0D8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_P
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0DC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_DISABLE = (0 << BIT_7_bit);
    const uint32_t BIT_7_ENABLE = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_DISABLE = (0 << BIT_6_bit);
    const uint32_t BIT_6_ENABLE = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_DISABLE = (0 << BIT_5_bit);
    const uint32_t BIT_5_ENABLE = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_DISABLE = (0 << BIT_4_bit);
    const uint32_t BIT_4_ENABLE = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_DISABLE = (0 << BIT_3_bit);
    const uint32_t BIT_3_ENABLE = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_DISABLE = (0 << BIT_2_bit);
    const uint32_t BIT_2_ENABLE = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_DISABLE = (0 << BIT_1_bit);
    const uint32_t BIT_1_ENABLE = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_DISABLE = (0 << BIT_0_bit);
    const uint32_t BIT_0_ENABLE = (1 << BIT_0_bit); 
 
};

/**
 * 9.13.18 GPIO_MSK_INT_LVL_0
 *
 * This is an array of 4 identical register entries; the register fields below 
 * apply to each entry.
 */

struct GPIO_MSK_INT_ENABLE_M
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0E0;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_N
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0E4;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_O
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0E8;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

struct GPIO_MSK_INT_ENABLE_P
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0EC;

    const uint32_t MSK_7_bit = 15;
    const uint32_t MSK_7_bitWidth = 1;
    const uint32_t MSK_7_DISABLE = (0 << MSK_7_bit);
    const uint32_t MSK_7_ENABLE = (1 << MSK_7_bit); 
         
    const uint32_t MSK_6_bit = 14;
    const uint32_t MSK_6_bitWidth = 1;
    const uint32_t MSK_6_DISABLE = (0 << MSK_6_bit);
    const uint32_t MSK_6_ENABLE = (1 << MSK_6_bit); 
          
    const uint32_t MSK_5_bit = 13;
    const uint32_t MSK_5_bitWidth = 1;
    const uint32_t MSK_5_DISABLE = (0 << MSK_5_bit);
    const uint32_t MSK_5_ENABLE = (1 << MSK_5_bit); 
           
    const uint32_t MSK_4_bit = 12;
    const uint32_t MSK_4_bitWidth = 1;
    const uint32_t MSK_4_DISABLE = (0 << MSK_4_bit);
    const uint32_t MSK_4_ENABLE = (1 << EDGE_4_bit); 
            
    const uint32_t MSK_3_bit = 11;
    const uint32_t MSK_3_bitWidth = 1;
    const uint32_t MSK_3_DISABLE = (0 << MSK_3_bit);
    const uint32_t MSK_3_ENABLE = (1 << MSK_3_bit); 
             
    const uint32_t MSK_2_bit = 10;
    const uint32_t MSK_2_bitWidth = 1;
    const uint32_t MSK_2_DISABLE = (0 << MSK_2_bit);
    const uint32_t MSK_2_ENABLE = (1 << MSK_2_bit); 
              
    const uint32_t MSK_1_bit = 9;
    const uint32_t MSK_1_bitWidth = 1;
    const uint32_t MSK_1_DISABLE = (0 << MSK_1_bit);
    const uint32_t MSK_1_ENABLE = (1 << MSK_1_bit); 
               
    const uint32_t MSK_0_bit = 8;
    const uint32_t MSK_0_bitWidth = 1;
    const uint32_t MSK_0_DISABLE = (0 << MSK_0_bit);
    const uint32_t MSK_0_ENABLE = (1 << MSK_0_bit); 
 
    const uint32_t BIT_7_bit = 7;
    const uint32_t BIT_7_bitWidth = 1;
    const uint32_t BIT_7_LOW = (0 << BIT_7_bit);
    const uint32_t BIT_7_HIGH = (1 << BIT_7_bit); 
 
    const uint32_t BIT_6_bit = 6;
    const uint32_t BIT_6_bitWidth = 1;
    const uint32_t BIT_6_LOW = (0 << BIT_6_bit);
    const uint32_t BIT_6_HIGH = (1 << BIT_6_bit); 
 
    const uint32_t BIT_5_bit = 5;
    const uint32_t BIT_5_bitWidth = 1;
    const uint32_t BIT_5_LOW = (0 << BIT_5_bit);
    const uint32_t BIT_5_HIGH = (1 << BIT_5_bit); 
 
    const uint32_t BIT_4_bit = 4;
    const uint32_t BIT_4_bitWidth = 1;
    const uint32_t BIT_4_LOW = (0 << BIT_4_bit);
    const uint32_t BIT_4_HIGH = (1 << BIT_4_bit); 
 
    const uint32_t BIT_3_bit = 3;
    const uint32_t BIT_3_bitWidth = 1;
    const uint32_t BIT_3_LOW = (0 << BIT_3_bit);
    const uint32_t BIT_3_HIGH = (1 << BIT_3_bit); 
 
    const uint32_t BIT_2_bit = 2;
    const uint32_t BIT_2_bitWidth = 1;
    const uint32_t BIT_2_LOW = (0 << BIT_2_bit);
    const uint32_t BIT_2_HIGH = (1 << BIT_2_bit); 
 
    const uint32_t BIT_1_bit = 1;
    const uint32_t BIT_1_bitWidth = 1;
    const uint32_t BIT_1_LOW = (0 << BIT_1_bit);
    const uint32_t BIT_1_HIGH = (1 << BIT_1_bit); 
 
    const uint32_t BIT_0_bit = 0;
    const uint32_t BIT_0_bitWidth = 1;
    const uint32_t BIT_0_LOW = (0 << BIT_0_bit);
    const uint32_t BIT_0_HIGH = (1 << BIT_0_bit); 
 
};

// 9.13.19 GPIO_DB_CNT_P0_0
struct GPIO_DB_CNT_PM
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0F0;

    const uint32_t PM_DBC_CNT_bit = 0;
    const uint32_t PM_DBC_CNT_bitWidth 8;
    const uint32_t PM_DBC_CNT_0 = (0 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_1 = (1 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_2 = (2 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_3 = (3 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_4 = (4 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_5 = (5 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_6 = (6 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_7 = (7 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_8 = (8 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_9 = (9 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_10 = (10 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_11 = (11 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_12 = (12 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_13 = (13 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_14 = (14 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_15 = (15 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_16 = (16 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_17 = (17 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_18 = (18 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_19 = (19 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_20 = (20 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_21 = (21 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_22 = (22 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_23 = (23 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_24 = (24 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_25 = (25 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_26 = (26 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_27 = (27 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_28 = (28 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_29 = (29 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_30 = (30 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_31 = (31 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_32 = (32 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_33 = (33 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_34 = (34 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_35 = (35 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_36 = (36 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_37 = (37 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_38 = (38 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_39 = (39 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_40 = (40 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_41 = (41 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_42 = (42 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_43 = (43 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_44 = (44 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_45 = (45 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_46 = (46 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_47 = (47 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_48 = (48 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_49 = (49 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_50 = (50 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_51 = (51 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_52 = (52 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_53 = (53 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_54 = (54 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_55 = (55 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_56 = (56 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_57 = (57 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_58 = (58 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_59 = (59 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_60 = (60 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_61 = (61 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_62 = (62 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_63 = (63 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_64 = (64 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_65 = (65 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_66 = (66 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_67 = (67 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_68 = (68 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_69 = (69 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_70 = (70 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_71 = (71 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_72 = (72 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_73 = (73 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_74 = (74 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_75 = (75 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_76 = (76 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_77 = (77 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_78 = (78 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_79 = (79 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_80 = (80 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_81 = (81 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_82 = (82 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_83 = (83 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_84 = (84 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_85 = (85 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_86 = (86 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_87 = (87 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_88 = (88 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_89 = (89 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_90 = (90 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_91 = (91 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_92 = (92 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_93 = (93 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_94 = (94 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_95 = (95 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_96 = (96 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_97 = (97 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_98 = (98 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_99 = (99 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_100 = (100 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_101 = (101 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_102 = (102 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_103 = (103 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_104 = (104 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_105 = (105 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_106 = (106 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_107 = (107 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_108 = (108 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_109 = (109 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_110 = (110 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_111 = (111 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_112 = (112 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_113 = (113 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_114 = (114 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_115 = (115 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_116 = (116 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_117 = (117 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_118 = (118 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_119 = (119 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_120 = (120 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_121 = (121 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_122 = (122 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_123 = (123 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_124 = (124 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_125 = (125 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_126 = (126 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_127 = (127 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_128 = (128 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_129 = (129 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_130 = (130 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_131 = (131 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_132 = (132 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_133 = (133 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_134 = (134 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_135 = (135 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_136 = (136 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_137 = (137 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_138 = (138 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_139 = (139 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_140 = (140 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_141 = (141 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_142 = (142 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_143 = (143 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_144 = (144 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_145 = (145 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_146 = (146 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_147 = (147 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_148 = (148 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_149 = (149 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_150 = (150 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_151 = (151 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_152 = (152 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_153 = (153 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_154 = (154 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_155 = (155 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_156 = (156 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_157 = (157 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_158 = (158 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_159 = (159 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_160 = (160 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_161 = (161 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_162 = (162 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_163 = (163 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_164 = (164 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_165 = (165 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_166 = (166 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_167 = (167 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_168 = (168 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_169 = (169 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_170 = (170 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_171 = (171 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_172 = (172 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_173 = (173 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_174 = (174 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_175 = (175 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_176 = (176 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_177 = (177 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_178 = (178 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_179 = (179 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_180 = (180 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_181 = (181 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_182 = (182 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_183 = (183 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_184 = (184 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_185 = (185 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_186 = (186 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_187 = (187 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_188 = (188 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_189 = (189 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_190 = (190 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_191 = (191 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_192 = (192 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_193 = (193 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_194 = (194 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_195 = (195 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_196 = (196 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_197 = (197 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_198 = (198 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_199 = (199 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_200 = (200 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_201 = (201 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_202 = (202 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_203 = (203 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_204 = (204 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_205 = (205 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_206 = (206 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_207 = (207 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_208 = (208 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_209 = (209 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_210 = (210 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_211 = (211 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_212 = (212 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_213 = (213 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_214 = (214 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_215 = (215 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_216 = (216 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_217 = (217 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_218 = (218 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_219 = (219 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_220 = (220 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_221 = (221 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_222 = (222 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_223 = (223 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_224 = (224 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_225 = (225 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_226 = (226 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_227 = (227 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_228 = (228 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_229 = (229 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_230 = (230 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_231 = (231 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_232 = (232 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_233 = (233 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_234 = (234 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_235 = (235 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_236 = (236 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_237 = (237 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_238 = (238 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_239 = (239 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_240 = (240 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_241 = (241 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_242 = (242 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_243 = (243 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_244 = (244 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_245 = (245 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_246 = (246 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_247 = (247 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_248 = (248 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_249 = (249 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_250 = (250 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_251 = (251 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_252 = (252 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_253 = (253 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_254 = (254 << PM_DBC_CNT_bit);
    const uint32_t PM_DBC_CNT_255 = (255 << PM_DBC_CNT_bit);

};

// 9.13.20 GPIO_DB_CNT_P1_0
struct GPIO_DB_CNT_PN
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0F4;

    const uint32_t PN_DBC_CNT_bit = 0;
    const uint32_t PN_DBC_CNT_bitWidth 8;
    const uint32_t PN_DBC_CNT_0 = (0 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_1 = (1 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_2 = (2 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_3 = (3 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_4 = (4 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_5 = (5 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_6 = (6 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_7 = (7 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_8 = (8 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_9 = (9 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_10 = (10 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_11 = (11 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_12 = (12 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_13 = (13 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_14 = (14 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_15 = (15 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_16 = (16 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_17 = (17 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_18 = (18 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_19 = (19 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_20 = (20 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_21 = (21 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_22 = (22 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_23 = (23 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_24 = (24 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_25 = (25 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_26 = (26 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_27 = (27 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_28 = (28 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_29 = (29 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_30 = (30 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_31 = (31 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_32 = (32 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_33 = (33 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_34 = (34 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_35 = (35 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_36 = (36 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_37 = (37 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_38 = (38 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_39 = (39 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_40 = (40 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_41 = (41 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_42 = (42 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_43 = (43 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_44 = (44 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_45 = (45 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_46 = (46 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_47 = (47 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_48 = (48 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_49 = (49 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_50 = (50 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_51 = (51 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_52 = (52 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_53 = (53 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_54 = (54 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_55 = (55 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_56 = (56 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_57 = (57 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_58 = (58 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_59 = (59 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_60 = (60 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_61 = (61 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_62 = (62 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_63 = (63 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_64 = (64 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_65 = (65 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_66 = (66 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_67 = (67 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_68 = (68 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_69 = (69 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_70 = (70 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_71 = (71 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_72 = (72 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_73 = (73 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_74 = (74 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_75 = (75 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_76 = (76 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_77 = (77 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_78 = (78 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_79 = (79 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_80 = (80 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_81 = (81 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_82 = (82 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_83 = (83 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_84 = (84 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_85 = (85 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_86 = (86 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_87 = (87 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_88 = (88 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_89 = (89 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_90 = (90 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_91 = (91 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_92 = (92 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_93 = (93 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_94 = (94 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_95 = (95 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_96 = (96 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_97 = (97 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_98 = (98 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_99 = (99 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_100 = (100 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_101 = (101 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_102 = (102 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_103 = (103 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_104 = (104 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_105 = (105 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_106 = (106 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_107 = (107 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_108 = (108 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_109 = (109 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_110 = (110 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_111 = (111 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_112 = (112 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_113 = (113 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_114 = (114 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_115 = (115 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_116 = (116 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_117 = (117 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_118 = (118 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_119 = (119 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_120 = (120 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_121 = (121 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_122 = (122 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_123 = (123 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_124 = (124 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_125 = (125 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_126 = (126 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_127 = (127 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_128 = (128 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_129 = (129 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_130 = (130 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_131 = (131 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_132 = (132 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_133 = (133 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_134 = (134 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_135 = (135 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_136 = (136 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_137 = (137 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_138 = (138 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_139 = (139 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_140 = (140 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_141 = (141 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_142 = (142 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_143 = (143 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_144 = (144 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_145 = (145 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_146 = (146 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_147 = (147 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_148 = (148 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_149 = (149 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_150 = (150 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_151 = (151 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_152 = (152 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_153 = (153 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_154 = (154 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_155 = (155 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_156 = (156 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_157 = (157 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_158 = (158 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_159 = (159 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_160 = (160 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_161 = (161 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_162 = (162 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_163 = (163 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_164 = (164 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_165 = (165 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_166 = (166 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_167 = (167 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_168 = (168 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_169 = (169 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_170 = (170 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_171 = (171 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_172 = (172 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_173 = (173 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_174 = (174 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_175 = (175 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_176 = (176 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_177 = (177 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_178 = (178 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_179 = (179 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_180 = (180 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_181 = (181 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_182 = (182 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_183 = (183 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_184 = (184 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_185 = (185 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_186 = (186 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_187 = (187 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_188 = (188 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_189 = (189 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_190 = (190 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_191 = (191 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_192 = (192 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_193 = (193 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_194 = (194 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_195 = (195 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_196 = (196 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_197 = (197 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_198 = (198 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_199 = (199 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_200 = (200 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_201 = (201 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_202 = (202 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_203 = (203 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_204 = (204 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_205 = (205 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_206 = (206 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_207 = (207 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_208 = (208 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_209 = (209 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_210 = (210 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_211 = (211 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_212 = (212 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_213 = (213 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_214 = (214 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_215 = (215 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_216 = (216 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_217 = (217 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_218 = (218 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_219 = (219 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_220 = (220 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_221 = (221 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_222 = (222 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_223 = (223 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_224 = (224 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_225 = (225 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_226 = (226 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_227 = (227 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_228 = (228 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_229 = (229 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_230 = (230 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_231 = (231 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_232 = (232 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_233 = (233 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_234 = (234 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_235 = (235 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_236 = (236 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_237 = (237 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_238 = (238 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_239 = (239 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_240 = (240 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_241 = (241 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_242 = (242 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_243 = (243 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_244 = (244 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_245 = (245 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_246 = (246 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_247 = (247 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_248 = (248 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_249 = (249 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_250 = (250 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_251 = (251 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_252 = (252 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_253 = (253 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_254 = (254 << PN_DBC_CNT_bit);
    const uint32_t PN_DBC_CNT_255 = (255 << PN_DBC_CNT_bit);

};

// 9.13.21 GPIO_DB_CNT_P2_0
struct GPIO_DB_CNT_PO
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0F8;

    const uint32_t PO_DBC_CNT_bit = 0;
    const uint32_t PO_DBC_CNT_bitWidth 8;
    const uint32_t PO_DBC_CNT_0 = (0 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_1 = (1 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_2 = (2 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_3 = (3 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_4 = (4 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_5 = (5 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_6 = (6 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_7 = (7 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_8 = (8 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_9 = (9 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_10 = (10 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_11 = (11 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_12 = (12 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_13 = (13 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_14 = (14 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_15 = (15 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_16 = (16 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_17 = (17 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_18 = (18 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_19 = (19 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_20 = (20 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_21 = (21 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_22 = (22 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_23 = (23 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_24 = (24 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_25 = (25 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_26 = (26 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_27 = (27 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_28 = (28 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_29 = (29 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_30 = (30 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_31 = (31 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_32 = (32 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_33 = (33 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_34 = (34 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_35 = (35 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_36 = (36 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_37 = (37 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_38 = (38 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_39 = (39 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_40 = (40 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_41 = (41 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_42 = (42 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_43 = (43 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_44 = (44 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_45 = (45 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_46 = (46 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_47 = (47 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_48 = (48 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_49 = (49 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_50 = (50 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_51 = (51 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_52 = (52 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_53 = (53 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_54 = (54 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_55 = (55 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_56 = (56 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_57 = (57 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_58 = (58 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_59 = (59 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_60 = (60 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_61 = (61 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_62 = (62 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_63 = (63 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_64 = (64 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_65 = (65 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_66 = (66 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_67 = (67 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_68 = (68 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_69 = (69 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_70 = (70 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_71 = (71 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_72 = (72 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_73 = (73 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_74 = (74 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_75 = (75 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_76 = (76 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_77 = (77 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_78 = (78 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_79 = (79 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_80 = (80 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_81 = (81 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_82 = (82 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_83 = (83 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_84 = (84 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_85 = (85 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_86 = (86 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_87 = (87 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_88 = (88 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_89 = (89 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_90 = (90 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_91 = (91 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_92 = (92 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_93 = (93 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_94 = (94 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_95 = (95 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_96 = (96 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_97 = (97 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_98 = (98 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_99 = (99 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_100 = (100 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_101 = (101 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_102 = (102 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_103 = (103 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_104 = (104 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_105 = (105 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_106 = (106 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_107 = (107 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_108 = (108 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_109 = (109 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_110 = (110 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_111 = (111 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_112 = (112 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_113 = (113 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_114 = (114 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_115 = (115 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_116 = (116 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_117 = (117 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_118 = (118 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_119 = (119 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_120 = (120 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_121 = (121 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_122 = (122 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_123 = (123 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_124 = (124 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_125 = (125 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_126 = (126 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_127 = (127 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_128 = (128 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_129 = (129 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_130 = (130 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_131 = (131 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_132 = (132 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_133 = (133 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_134 = (134 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_135 = (135 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_136 = (136 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_137 = (137 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_138 = (138 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_139 = (139 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_140 = (140 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_141 = (141 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_142 = (142 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_143 = (143 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_144 = (144 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_145 = (145 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_146 = (146 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_147 = (147 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_148 = (148 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_149 = (149 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_150 = (150 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_151 = (151 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_152 = (152 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_153 = (153 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_154 = (154 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_155 = (155 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_156 = (156 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_157 = (157 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_158 = (158 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_159 = (159 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_160 = (160 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_161 = (161 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_162 = (162 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_163 = (163 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_164 = (164 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_165 = (165 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_166 = (166 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_167 = (167 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_168 = (168 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_169 = (169 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_170 = (170 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_171 = (171 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_172 = (172 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_173 = (173 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_174 = (174 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_175 = (175 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_176 = (176 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_177 = (177 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_178 = (178 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_179 = (179 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_180 = (180 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_181 = (181 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_182 = (182 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_183 = (183 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_184 = (184 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_185 = (185 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_186 = (186 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_187 = (187 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_188 = (188 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_189 = (189 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_190 = (190 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_191 = (191 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_192 = (192 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_193 = (193 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_194 = (194 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_195 = (195 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_196 = (196 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_197 = (197 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_198 = (198 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_199 = (199 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_200 = (200 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_201 = (201 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_202 = (202 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_203 = (203 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_204 = (204 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_205 = (205 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_206 = (206 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_207 = (207 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_208 = (208 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_209 = (209 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_210 = (210 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_211 = (211 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_212 = (212 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_213 = (213 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_214 = (214 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_215 = (215 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_216 = (216 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_217 = (217 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_218 = (218 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_219 = (219 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_220 = (220 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_221 = (221 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_222 = (222 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_223 = (223 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_224 = (224 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_225 = (225 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_226 = (226 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_227 = (227 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_228 = (228 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_229 = (229 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_230 = (230 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_231 = (231 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_232 = (232 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_233 = (233 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_234 = (234 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_235 = (235 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_236 = (236 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_237 = (237 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_238 = (238 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_239 = (239 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_240 = (240 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_241 = (241 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_242 = (242 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_243 = (243 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_244 = (244 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_245 = (245 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_246 = (246 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_247 = (247 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_248 = (248 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_249 = (249 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_250 = (250 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_251 = (251 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_252 = (252 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_253 = (253 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_254 = (254 << PO_DBC_CNT_bit);
    const uint32_t PO_DBC_CNT_255 = (255 << PO_DBC_CNT_bit);

};

// 9.13.22 GPIO_DB_CNT_P3_0
struct GPIO_DB_CNT_PP
{
    const uint32_t address = 0x60000000 + 0xD300 + 0x0FC;

    const uint32_t PP_DBC_CNT_bit = 0;
    const uint32_t PP_DBC_CNT_bitWidth 8;
    const uint32_t PP_DBC_CNT_0 = (0 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_1 = (1 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_2 = (2 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_3 = (3 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_4 = (4 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_5 = (5 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_6 = (6 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_7 = (7 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_8 = (8 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_9 = (9 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_10 = (10 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_11 = (11 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_12 = (12 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_13 = (13 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_14 = (14 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_15 = (15 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_16 = (16 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_17 = (17 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_18 = (18 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_19 = (19 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_20 = (20 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_21 = (21 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_22 = (22 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_23 = (23 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_24 = (24 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_25 = (25 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_26 = (26 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_27 = (27 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_28 = (28 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_29 = (29 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_30 = (30 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_31 = (31 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_32 = (32 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_33 = (33 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_34 = (34 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_35 = (35 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_36 = (36 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_37 = (37 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_38 = (38 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_39 = (39 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_40 = (40 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_41 = (41 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_42 = (42 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_43 = (43 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_44 = (44 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_45 = (45 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_46 = (46 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_47 = (47 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_48 = (48 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_49 = (49 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_50 = (50 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_51 = (51 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_52 = (52 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_53 = (53 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_54 = (54 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_55 = (55 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_56 = (56 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_57 = (57 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_58 = (58 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_59 = (59 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_60 = (60 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_61 = (61 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_62 = (62 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_63 = (63 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_64 = (64 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_65 = (65 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_66 = (66 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_67 = (67 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_68 = (68 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_69 = (69 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_70 = (70 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_71 = (71 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_72 = (72 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_73 = (73 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_74 = (74 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_75 = (75 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_76 = (76 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_77 = (77 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_78 = (78 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_79 = (79 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_80 = (80 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_81 = (81 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_82 = (82 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_83 = (83 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_84 = (84 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_85 = (85 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_86 = (86 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_87 = (87 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_88 = (88 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_89 = (89 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_90 = (90 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_91 = (91 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_92 = (92 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_93 = (93 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_94 = (94 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_95 = (95 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_96 = (96 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_97 = (97 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_98 = (98 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_99 = (99 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_100 = (100 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_101 = (101 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_102 = (102 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_103 = (103 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_104 = (104 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_105 = (105 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_106 = (106 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_107 = (107 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_108 = (108 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_109 = (109 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_110 = (110 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_111 = (111 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_112 = (112 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_113 = (113 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_114 = (114 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_115 = (115 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_116 = (116 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_117 = (117 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_118 = (118 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_119 = (119 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_120 = (120 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_121 = (121 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_122 = (122 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_123 = (123 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_124 = (124 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_125 = (125 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_126 = (126 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_127 = (127 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_128 = (128 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_129 = (129 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_130 = (130 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_131 = (131 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_132 = (132 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_133 = (133 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_134 = (134 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_135 = (135 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_136 = (136 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_137 = (137 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_138 = (138 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_139 = (139 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_140 = (140 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_141 = (141 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_142 = (142 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_143 = (143 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_144 = (144 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_145 = (145 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_146 = (146 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_147 = (147 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_148 = (148 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_149 = (149 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_150 = (150 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_151 = (151 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_152 = (152 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_153 = (153 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_154 = (154 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_155 = (155 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_156 = (156 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_157 = (157 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_158 = (158 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_159 = (159 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_160 = (160 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_161 = (161 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_162 = (162 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_163 = (163 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_164 = (164 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_165 = (165 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_166 = (166 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_167 = (167 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_168 = (168 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_169 = (169 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_170 = (170 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_171 = (171 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_172 = (172 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_173 = (173 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_174 = (174 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_175 = (175 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_176 = (176 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_177 = (177 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_178 = (178 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_179 = (179 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_180 = (180 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_181 = (181 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_182 = (182 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_183 = (183 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_184 = (184 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_185 = (185 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_186 = (186 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_187 = (187 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_188 = (188 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_189 = (189 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_190 = (190 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_191 = (191 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_192 = (192 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_193 = (193 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_194 = (194 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_195 = (195 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_196 = (196 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_197 = (197 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_198 = (198 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_199 = (199 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_200 = (200 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_201 = (201 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_202 = (202 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_203 = (203 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_204 = (204 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_205 = (205 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_206 = (206 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_207 = (207 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_208 = (208 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_209 = (209 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_210 = (210 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_211 = (211 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_212 = (212 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_213 = (213 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_214 = (214 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_215 = (215 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_216 = (216 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_217 = (217 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_218 = (218 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_219 = (219 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_220 = (220 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_221 = (221 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_222 = (222 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_223 = (223 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_224 = (224 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_225 = (225 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_226 = (226 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_227 = (227 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_228 = (228 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_229 = (229 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_230 = (230 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_231 = (231 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_232 = (232 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_233 = (233 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_234 = (234 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_235 = (235 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_236 = (236 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_237 = (237 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_238 = (238 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_239 = (239 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_240 = (240 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_241 = (241 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_242 = (242 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_243 = (243 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_244 = (244 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_245 = (245 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_246 = (246 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_247 = (247 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_248 = (248 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_249 = (249 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_250 = (250 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_251 = (251 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_252 = (252 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_253 = (253 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_254 = (254 << PP_DBC_CNT_bit);
    const uint32_t PP_DBC_CNT_255 = (255 << PP_DBC_CNT_bit);

};








